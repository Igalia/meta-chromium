From 2ae2205143940066cab156e34a72a95e508d15c5 Mon Sep 17 00:00:00 2001
From: Tsuyoshi Horo <horo@chromium.org>
Date: Wed, 15 Feb 2023 00:11:27 +0000
Subject: Remove "Web" from names of  WebURLLoader* classes

This CL removes "Web" from the names of following classes, because Web*
classes are not in blink/public/ now.
  FakeWebURLLoader
  FakeWebURLLoaderFactory
  FetchTestingWebURLLoaderMockFactory
  InternetDisconnectedWebURLLoaderFactory
  NoNetworkWebURLLoader
  NoopWebURLLoader
  TestWebURLLoader
  TestWebURLLoaderClient
  WebURLLoader
  WebURLLoaderClient
  WebURLLoaderFactory
  WebURLLoaderFactoryForTest
  WebURLLoaderMock
  WebURLLoaderMockFactory
  WebURLLoaderMockFactoryImpl
  WebURLLoaderTest
  WebURLLoaderTestDelegate

Low-Coverage-Reason: Refactoring
Bug: 1413912
Change-Id: Ib8f3480a2626f62b9fa9a22c2f0a759110176b91
Reviewed-on: https://chromium-review.googlesource.com/c/chromium/src/+/4242309
Reviewed-by: Kouhei Ueno <kouhei@chromium.org>
Reviewed-by: Christian Dullweber <dullweber@chromium.org>
Reviewed-by: Derek Schuff <dschuff@chromium.org>
Reviewed-by: Nicolas Ouellet-Payeur <nicolaso@chromium.org>
Commit-Queue: Tsuyoshi Horo <horo@chromium.org>
Reviewed-by: Scott Violet <sky@chromium.org>
Reviewed-by: Kentaro Hara <haraken@chromium.org>
Reviewed-by: Jesse Doherty <jwd@chromium.org>
Cr-Commit-Position: refs/heads/main@{#1105384}
---
 ...ent_settings_agent_delegate_browsertest.cc |   2 +-
 ...content_settings_agent_impl_browsertest.cc |   2 +-
 components/nacl/renderer/file_downloader.cc   |   2 +-
 .../variations/net/variations_http_headers.h  |   6 +-
 .../variations/variations_ids_provider.cc     |   4 +-
 .../platform/web_worker_fetch_context.h       |  22 +--
 .../blink/public/web/web_local_frame_client.h |   4 +-
 .../bindings/core/v8/script_streamer_test.cc  |  18 +-
 third_party/blink/renderer/core/BUILD.gn      |   1 +
 .../blink/renderer/core/css/style_perftest.cc |   2 +-
 .../core/dom/events/listener_leak_test.cc     |   2 +-
 .../core/editing/serializers/serialization.cc |   2 +-
 .../web_document_subresource_filter_test.cc   |   2 +-
 .../web_frame_serializer_sanitization_test.cc |   2 +-
 .../exported/web_frame_serializer_test.cc     |   2 +-
 .../exported/web_plugin_container_test.cc     |   2 +-
 .../exported/web_searchable_form_data_test.cc |   2 +-
 .../renderer/core/exported/web_view_test.cc   |   2 +-
 .../core/frame/attribution_src_loader_test.cc |   8 +-
 .../core/frame/browser_controls_test.cc       |   4 +-
 .../core/frame/frame_serializer_test.cc       |   6 +-
 .../renderer/core/frame/frame_test_helpers.cc |  10 +-
 .../renderer/core/frame/frame_test_helpers.h  |   2 +-
 .../blink/renderer/core/frame/local_frame.cc  |   2 +-
 .../blink/renderer/core/frame/local_frame.h   |   8 +-
 .../renderer/core/frame/local_frame_client.h  |   4 +-
 .../core/frame/local_frame_client_impl.cc     |   3 +-
 .../core/frame/local_frame_client_impl.h      |   2 +-
 .../core/frame/visual_viewport_test.cc        |   2 +-
 .../renderer/core/frame/web_frame_test.cc     |  10 +-
 .../core/frame/web_local_frame_impl.cc        |   2 +-
 .../html/forms/external_popup_menu_test.cc    |   2 +-
 .../blink/renderer/core/html/html_perftest.cc |   2 +-
 .../html/parser/html_preload_scanner_test.cc  |   2 +-
 .../renderer/core/input/ime_on_focus_test.cc  |   2 +-
 .../renderer/core/input/touch_action_test.cc  |   2 +-
 .../core/inspector/inspector_network_agent.cc |   4 +-
 .../core/loader/document_loader_test.cc       |  33 ++--
 .../renderer/core/loader/empty_clients.h      |   6 +-
 .../renderer/core/loader/link_loader_test.cc  |   6 +-
 .../core/loader/loader_factory_for_frame.cc   |  10 +-
 .../core/loader/loader_factory_for_frame.h    |   2 +-
 .../core/loader/loader_factory_for_worker.cc  |   6 +-
 .../core/loader/loader_factory_for_worker.h   |   2 +-
 .../modulescript/module_script_loader_test.cc |   2 +-
 .../blink/renderer/core/loader/ping_loader.h  |   2 +-
 .../renderer/core/loader/ping_loader_test.cc  |   8 +-
 .../prefetched_signed_exchange_manager.cc     |  28 +--
 .../prefetched_signed_exchange_manager.h      |   9 +-
 .../renderer/core/loader/prerender_test.cc    |   2 +-
 .../core/loader/programmatic_scroll_test.cc   |   2 +-
 .../resource/css_style_sheet_resource_test.cc |   6 +-
 .../loader/resource/font_resource_test.cc     |   2 +-
 .../loader/resource/image_resource_test.cc    |   4 +-
 .../resource_loader_code_cache_test.cc        |   7 +-
 .../core/loader/threadable_loader_test.cc     |   2 +-
 .../core/loader/threaded_icon_loader_test.cc  |   7 +-
 .../loader/web_associated_url_loader_impl.cc  |   5 +-
 .../loader/web_associated_url_loader_impl.h   |   2 +-
 .../web_associated_url_loader_impl_test.cc    |   2 +-
 .../core/loader/worker_fetch_context.cc       |   2 +-
 .../core/page/context_menu_controller_test.cc |   4 +-
 .../main_thread_scrolling_reasons_test.cc     |   2 +-
 .../core/page/scrolling/root_scroller_test.cc |   2 +-
 .../core/page/scrolling/scrolling_test.cc     |   2 +-
 .../blink/renderer/core/page/viewport_test.cc |   2 +-
 .../core/paint/link_highlight_impl_test.cc    |   2 +-
 .../scheduler_affecting_features_test.cc      |   2 +-
 .../renderer/core/svg/graphics/svg_image.cc   |   6 +-
 .../core/testing/dummy_page_holder.cc         |   6 +-
 ...b_url_loader.h => no_network_url_loader.h} |  30 +--
 .../renderer/core/testing/sim/sim_network.cc  |  14 +-
 .../renderer/core/testing/sim/sim_network.h   |  16 +-
 .../renderer/core/testing/sim/sim_request.cc  |   7 +-
 .../renderer/core/testing/sim/sim_request.h   |  10 +-
 .../worklet_module_responses_map_test.cc      |   2 +-
 .../background_fetch_icon_loader_test.cc      |  10 +-
 .../multi_resolution_image_resource_fetcher.h |   2 +-
 .../modules/indexeddb/idb_request_test.cc     |   6 +-
 .../modules/indexeddb/idb_transaction_test.cc |   6 +-
 .../notification_resources_loader_test.cc     |   9 +-
 .../web_embedded_worker_impl_test.cc          |  35 ++--
 .../web_service_worker_fetch_context_impl.cc  |  27 ++-
 .../web_service_worker_fetch_context_impl.h   |  18 +-
 third_party/blink/renderer/platform/BUILD.gn  |  18 +-
 .../renderer/platform/exported/platform.cc    |   2 +-
 .../blink/renderer/platform/loader/BUILD.gn   |  18 +-
 .../platform/loader/fetch/resource_fetcher.cc |   2 +-
 .../platform/loader/fetch/resource_fetcher.h  |  10 +-
 .../fetch/resource_fetcher_properties.h       |   2 +-
 .../loader/fetch/resource_fetcher_test.cc     |  27 ++-
 .../platform/loader/fetch/resource_loader.cc  |  16 +-
 .../platform/loader/fetch/resource_loader.h   |  14 +-
 .../resource_loader_defer_loading_test.cc     |  30 +--
 .../loader/fetch/resource_loader_test.cc      |  11 +-
 .../platform/loader/fetch/resource_request.h  |   2 +-
 ...ted_or_shared_worker_fetch_context_impl.cc |  26 +--
 ...ated_or_shared_worker_fetch_context_impl.h |   6 +-
 .../fetch/url_loader/request_conversion.cc    |   2 +-
 .../{web_url_loader.cc => url_loader.cc}      | 171 ++++++++++--------
 .../{web_url_loader.h => url_loader.h}        |  26 +--
 .../fetch/url_loader/url_loader_client.cc     |  10 +
 ...rl_loader_client.h => url_loader_client.h} |  10 +-
 ...oader_factory.cc => url_loader_factory.cc} |  14 +-
 ..._loader_factory.h => url_loader_factory.h} |  30 +--
 ...der_unittest.cc => url_loader_unittest.cc} |  77 ++++----
 .../url_loader/web_resource_request_sender.h  |   2 +-
 .../fetch/url_loader/web_url_loader_client.cc |  11 --
 ...cc => internet_disconnected_url_loader.cc} |  38 ++--
 ...r.h => internet_disconnected_url_loader.h} |  36 ++--
 .../testing/fetch_testing_platform_support.cc |  13 +-
 .../testing/fetch_testing_platform_support.h  |   8 +-
 .../loader/testing/test_loader_factory.h      |  10 +-
 ...p_web_url_loader.cc => noop_url_loader.cc} |  10 +-
 ...oop_web_url_loader.h => noop_url_loader.h} |  18 +-
 .../platform/testing/scoped_mocked_url.cc     |   2 +-
 .../platform/testing/unit_test_helpers.h      |   2 +-
 ...burl_loader_mock.cc => url_loader_mock.cc} |  67 +++----
 ...weburl_loader_mock.h => url_loader_mock.h} |  44 ++---
 ...ck_factory.h => url_loader_mock_factory.h} |  24 +--
 ...mpl.cc => url_loader_mock_factory_impl.cc} |  97 +++++-----
 ..._impl.h => url_loader_mock_factory_impl.h} |  51 +++---
 ...elegate.cc => url_loader_test_delegate.cc} |  36 ++--
 ..._delegate.h => url_loader_test_delegate.h} |  28 +--
 .../platform/testing/url_test_helpers.cc      |  20 +-
 .../platform/testing/url_test_helpers.h       |  12 +-
 tools/traffic_annotation/safe_list.txt        |   2 +-
 .../summary/annotations.xml                   |   6 +-
 128 files changed, 800 insertions(+), 794 deletions(-)
 rename third_party/blink/renderer/core/testing/{no_network_web_url_loader.h => no_network_url_loader.h} (71%)
 rename third_party/blink/renderer/platform/loader/fetch/url_loader/{web_url_loader.cc => url_loader.cc} (87%)
 rename third_party/blink/renderer/platform/loader/fetch/url_loader/{web_url_loader.h => url_loader.h} (93%)
 create mode 100644 third_party/blink/renderer/platform/loader/fetch/url_loader/url_loader_client.cc
 rename third_party/blink/renderer/platform/loader/fetch/url_loader/{web_url_loader_client.h => url_loader_client.h} (96%)
 rename third_party/blink/renderer/platform/loader/fetch/url_loader/{web_url_loader_factory.cc => url_loader_factory.cc} (82%)
 rename third_party/blink/renderer/platform/loader/fetch/url_loader/{web_url_loader_factory.h => url_loader_factory.h} (76%)
 rename third_party/blink/renderer/platform/loader/fetch/url_loader/{web_url_loader_unittest.cc => url_loader_unittest.cc} (92%)
 delete mode 100644 third_party/blink/renderer/platform/loader/fetch/url_loader/web_url_loader_client.cc
 rename third_party/blink/renderer/platform/loader/{internet_disconnected_web_url_loader.cc => internet_disconnected_url_loader.cc} (73%)
 rename third_party/blink/renderer/platform/loader/{internet_disconnected_web_url_loader.h => internet_disconnected_url_loader.h} (73%)
 rename third_party/blink/renderer/platform/testing/{noop_web_url_loader.cc => noop_url_loader.cc} (84%)
 rename third_party/blink/renderer/platform/testing/{noop_web_url_loader.h => noop_url_loader.h} (78%)
 rename third_party/blink/renderer/platform/testing/{weburl_loader_mock.cc => url_loader_mock.cc} (75%)
 rename third_party/blink/renderer/platform/testing/{weburl_loader_mock.h => url_loader_mock.h} (69%)
 rename third_party/blink/renderer/platform/testing/{web_url_loader_mock_factory.h => url_loader_mock_factory.h} (78%)
 rename third_party/blink/renderer/platform/testing/{weburl_loader_mock_factory_impl.cc => url_loader_mock_factory_impl.cc} (76%)
 rename third_party/blink/renderer/platform/testing/{weburl_loader_mock_factory_impl.h => url_loader_mock_factory_impl.h} (73%)
 rename third_party/blink/renderer/platform/testing/{web_url_loader_test_delegate.cc => url_loader_test_delegate.cc} (51%)
 rename third_party/blink/renderer/platform/testing/{web_url_loader_test_delegate.h => url_loader_test_delegate.h} (63%)

diff --git a/chrome/renderer/chrome_content_settings_agent_delegate_browsertest.cc b/chrome/renderer/chrome_content_settings_agent_delegate_browsertest.cc
index 796cb4c8204af..400fb782a032a 100644
--- a/chrome/renderer/chrome_content_settings_agent_delegate_browsertest.cc
+++ b/chrome/renderer/chrome_content_settings_agent_delegate_browsertest.cc
@@ -16,7 +16,7 @@ class ChromeContentSettingsAgentDelegateBrowserTest
     ChromeRenderViewTest::SetUp();
 
     // Set up a fake url loader factory to ensure that script loader can create
-    // a WebURLLoader.
+    // a URLLoader.
     CreateFakeURLLoaderFactory();
 
     // Unbind the ContentSettingsAgent interface that would be registered by
diff --git a/components/content_settings/renderer/content_settings_agent_impl_browsertest.cc b/components/content_settings/renderer/content_settings_agent_impl_browsertest.cc
index 35c91a950321c..f9631257635bf 100644
--- a/components/content_settings/renderer/content_settings_agent_impl_browsertest.cc
+++ b/components/content_settings/renderer/content_settings_agent_impl_browsertest.cc
@@ -178,7 +178,7 @@ class ContentSettingsAgentImplBrowserTest : public content::RenderViewTest {
     RenderViewTest::SetUp();
 
     // Set up a fake url loader factory to ensure that script loader can create
-    // a WebURLLoader.
+    // a URLLoader.
     CreateFakeURLLoaderFactory();
 
     // Unbind the ContentSettingsAgent interface that would be registered by
diff --git a/components/nacl/renderer/file_downloader.cc b/components/nacl/renderer/file_downloader.cc
index bdb0177c4d425..bb325b4f82ba4 100644
--- a/components/nacl/renderer/file_downloader.cc
+++ b/components/nacl/renderer/file_downloader.cc
@@ -85,7 +85,7 @@ void FileDownloader::DidFail(const blink::WebURLError& error) {
     status_ = ACCESS_DENIED;
 
   // Delete url_loader to prevent didFinishLoading from being called, which
-  // some implementations of blink::WebURLLoader will do after calling didFail.
+  // some implementations of blink::URLLoader will do after calling didFail.
   url_loader_.reset();
 
   std::move(status_cb_).Run(status_, std::move(file_), http_status_code_);
diff --git a/components/variations/net/variations_http_headers.h b/components/variations/net/variations_http_headers.h
index 57c1f46a69608..99e46cb87fc8e 100644
--- a/components/variations/net/variations_http_headers.h
+++ b/components/variations/net/variations_http_headers.h
@@ -30,9 +30,9 @@ namespace variations {
 // Denotes whether the top frame of a request-initiating frame is a Google-
 // owned web property, e.g. YouTube.
 //
-// kUnknownFromRenderer is used only in WebURLLoaderImpl::Context::Start() on
-// the render thread and kUnknown is used elsewhere. This distinction allows us
-// to tell how many non-render-thread-initiated subframe requests, if any, lack
+// kUnknownFromRenderer is used only in URLLoader::Context::Start() on the
+// render thread and kUnknown is used elsewhere. This distinction allows us to
+// tell how many non-render-thread-initiated subframe requests, if any, lack
 // TrustedParams.
 //
 // This enum is used to record UMA histogram values, and should not be
diff --git a/components/variations/variations_ids_provider.cc b/components/variations/variations_ids_provider.cc
index af822ecbd9766..d483e52ed6329 100644
--- a/components/variations/variations_ids_provider.cc
+++ b/components/variations/variations_ids_provider.cc
@@ -53,8 +53,8 @@ bool VariationsHeaderKey::operator<(const VariationsHeaderKey& other) const {
 // implemented depends on the request type.
 // There are three cases:
 // 1. Subresources request in renderer, it is implemented by
-// WebURLLoaderImpl::Context::Start() by adding a VariationsURLLoaderThrottle
-// to a content::URLLoaderThrottle vector.
+// URLLoader::Context::Start() by adding a VariationsURLLoaderThrottle to a
+// content::URLLoaderThrottle vector.
 // 2. Navigations/Downloads request in browser, it is implemented in
 // ChromeContentBrowserClient::CreateURLLoaderThrottles() which calls
 // CreateContentBrowserURLLoaderThrottles which also adds a
diff --git a/third_party/blink/public/platform/web_worker_fetch_context.h b/third_party/blink/public/platform/web_worker_fetch_context.h
index ee83fa2bb9e6c..c578554ca757a 100644
--- a/third_party/blink/public/platform/web_worker_fetch_context.h
+++ b/third_party/blink/public/platform/web_worker_fetch_context.h
@@ -34,7 +34,7 @@ namespace blink {
 
 class CodeCacheHost;
 class WebDocumentSubresourceFilter;
-class WebURLLoaderFactory;
+class URLLoaderFactory;
 class WebURLRequest;
 
 // Helper class allowing DedicatedOrSharedWorkerFetchContextImpl to notify blink
@@ -49,13 +49,13 @@ class AcceptLanguagesWatcher {
 // passed to a worker (dedicated, shared and service worker) and initialized on
 // the worker thread by InitializeOnWorkerThread(). It contains information
 // about the resource fetching context (ex: service worker provider id), and is
-// used to create a new WebURLLoader instance in the worker thread.
+// used to create a new URLLoader instance in the worker thread.
 //
 // A single WebWorkerFetchContext is used for both worker
 // subresource fetch (i.e. "insideSettings") and off-the-main-thread top-level
 // worker script fetch (i.e. fetch as "outsideSettings"), as they both should be
 // e.g. controlled by the same ServiceWorker (if any) and thus can share a
-// single WebURLLoaderFactory.
+// single URLLoaderFactory.
 //
 // Note that WebWorkerFetchContext and WorkerFetchContext do NOT correspond 1:1
 // as multiple WorkerFetchContext can be created after crbug.com/880027.
@@ -73,13 +73,13 @@ class WebWorkerFetchContext : public base::RefCounted<WebWorkerFetchContext> {
 
   virtual void InitializeOnWorkerThread(AcceptLanguagesWatcher*) = 0;
 
-  // Returns a WebURLLoaderFactory which is associated with the worker context.
-  // The returned WebURLLoaderFactory is owned by |this|.
-  virtual WebURLLoaderFactory* GetURLLoaderFactory() = 0;
+  // Returns a URLLoaderFactory which is associated with the worker context.
+  // The returned URLLoaderFactory is owned by |this|.
+  virtual URLLoaderFactory* GetURLLoaderFactory() = 0;
 
-  // Returns a new WebURLLoaderFactory that wraps the given
+  // Returns a new URLLoaderFactory that wraps the given
   // network::mojom::URLLoaderFactory.
-  virtual std::unique_ptr<WebURLLoaderFactory> WrapURLLoaderFactory(
+  virtual std::unique_ptr<URLLoaderFactory> WrapURLLoaderFactory(
       CrossVariantMojoRemote<network::mojom::URLLoaderFactoryInterfaceBase>
           url_loader_factory) = 0;
 
@@ -95,10 +95,10 @@ class WebWorkerFetchContext : public base::RefCounted<WebWorkerFetchContext> {
     return nullptr;
   }
 
-  // Returns a WebURLLoaderFactory for loading scripts in this worker context.
+  // Returns a URLLoaderFactory for loading scripts in this worker context.
   // Unlike GetURLLoaderFactory(), this may return nullptr.
-  // The returned WebURLLoaderFactory is owned by |this|.
-  virtual WebURLLoaderFactory* GetScriptLoaderFactory() { return nullptr; }
+  // The returned URLLoaderFactory is owned by |this|.
+  virtual URLLoaderFactory* GetScriptLoaderFactory() { return nullptr; }
 
   // Called when a request is about to be sent out to modify the request to
   // handle the request correctly in the loading stack later. (Example: service
diff --git a/third_party/blink/public/web/web_local_frame_client.h b/third_party/blink/public/web/web_local_frame_client.h
index e808dae0706f4..d6bb89671f9d7 100644
--- a/third_party/blink/public/web/web_local_frame_client.h
+++ b/third_party/blink/public/web/web_local_frame_client.h
@@ -131,7 +131,7 @@ class WebServiceWorkerProvider;
 class WebSocketHandshakeThrottle;
 class WebString;
 class WebURL;
-class WebURLLoader;
+class URLLoader;
 class WebURLRequest;
 class WebURLResponse;
 class WebView;
@@ -674,7 +674,7 @@ class BLINK_EXPORT WebLocalFrameClient {
     return nullptr;
   }
 
-  virtual std::unique_ptr<WebURLLoader> CreateURLLoaderForTesting() {
+  virtual std::unique_ptr<URLLoader> CreateURLLoaderForTesting() {
     return nullptr;
   }
 
diff --git a/third_party/blink/renderer/bindings/core/v8/script_streamer_test.cc b/third_party/blink/renderer/bindings/core/v8/script_streamer_test.cc
index 06091a91791f9..51a981da7e275 100644
--- a/third_party/blink/renderer/bindings/core/v8/script_streamer_test.cc
+++ b/third_party/blink/renderer/bindings/core/v8/script_streamer_test.cc
@@ -33,7 +33,7 @@
 #include "third_party/blink/renderer/platform/loader/fetch/resource_loader.h"
 #include "third_party/blink/renderer/platform/loader/fetch/response_body_loader.h"
 #include "third_party/blink/renderer/platform/loader/fetch/script_fetch_options.h"
-#include "third_party/blink/renderer/platform/loader/fetch/url_loader/web_url_loader.h"
+#include "third_party/blink/renderer/platform/loader/fetch/url_loader/url_loader.h"
 #include "third_party/blink/renderer/platform/loader/testing/mock_fetch_context.h"
 #include "third_party/blink/renderer/platform/loader/testing/test_resource_fetcher_properties.h"
 #include "third_party/blink/renderer/platform/scheduler/public/thread_scheduler.h"
@@ -41,7 +41,7 @@
 #include "third_party/blink/renderer/platform/testing/mock_context_lifecycle_notifier.h"
 #include "third_party/blink/renderer/platform/testing/testing_platform_support_with_mock_scheduler.h"
 #include "third_party/blink/renderer/platform/testing/unit_test_helpers.h"
-#include "third_party/blink/renderer/platform/testing/web_url_loader_mock_factory.h"
+#include "third_party/blink/renderer/platform/testing/url_loader_mock_factory.h"
 #include "third_party/blink/renderer/platform/wtf/cross_thread_copier_base.h"
 #include "third_party/blink/renderer/platform/wtf/cross_thread_functional.h"
 #include "third_party/blink/renderer/platform/wtf/text/text_encoding.h"
@@ -79,31 +79,31 @@ class TestResourceClient final : public GarbageCollected<TestResourceClient>,
 // TODO(leszeks): This class has a similar class in resource_loader_test.cc,
 // the two should probably share the same class.
 class NoopLoaderFactory final : public ResourceFetcher::LoaderFactory {
-  std::unique_ptr<WebURLLoader> CreateURLLoader(
+  std::unique_ptr<URLLoader> CreateURLLoader(
       const ResourceRequest& request,
       const ResourceLoaderOptions& options,
       scoped_refptr<base::SingleThreadTaskRunner> freezable_task_runner,
       scoped_refptr<base::SingleThreadTaskRunner> unfreezable_task_runner,
       BackForwardCacheLoaderHelper*) override {
-    return std::make_unique<NoopWebURLLoader>(std::move(freezable_task_runner));
+    return std::make_unique<NoopURLLoader>(std::move(freezable_task_runner));
   }
   std::unique_ptr<WebCodeCacheLoader> CreateCodeCacheLoader() override {
     return std::make_unique<CodeCacheLoaderMock>();
   }
 
-  class NoopWebURLLoader final : public WebURLLoader {
+  class NoopURLLoader final : public URLLoader {
    public:
-    explicit NoopWebURLLoader(
+    explicit NoopURLLoader(
         scoped_refptr<base::SingleThreadTaskRunner> task_runner)
         : task_runner_(std::move(task_runner)) {}
-    ~NoopWebURLLoader() override = default;
+    ~NoopURLLoader() override = default;
     void LoadSynchronously(
         std::unique_ptr<network::ResourceRequest> request,
         scoped_refptr<WebURLRequestExtraData> url_request_extra_data,
         bool pass_response_pipe_to_client,
         bool no_mime_sniffing,
         base::TimeDelta timeout_interval,
-        WebURLLoaderClient*,
+        URLLoaderClient*,
         WebURLResponse&,
         absl::optional<WebURLError>&,
         WebData&,
@@ -120,7 +120,7 @@ class NoopLoaderFactory final : public ResourceFetcher::LoaderFactory {
         bool no_mime_sniffing,
         std::unique_ptr<blink::ResourceLoadInfoNotifierWrapper>
             resource_load_info_notifier_wrapper,
-        WebURLLoaderClient*) override {}
+        URLLoaderClient*) override {}
     void Freeze(WebLoaderFreezeMode) override {}
     void DidChangePriority(WebURLRequest::Priority, int) override {
       NOTREACHED();
diff --git a/third_party/blink/renderer/core/BUILD.gn b/third_party/blink/renderer/core/BUILD.gn
index 4dac30c7bb4e5..d99aba7b8da00 100644
--- a/third_party/blink/renderer/core/BUILD.gn
+++ b/third_party/blink/renderer/core/BUILD.gn
@@ -1487,6 +1487,7 @@ source_set("perf_tests") {
     "html/html_perftest.cc",
     "layout/svg/svg_hit_test_perftest.cc",
     "layout/visual_rect_mapping_perftest.cc",
+    "testing/no_network_url_loader.h",
   ]
 
   configs += [
diff --git a/third_party/blink/renderer/core/css/style_perftest.cc b/third_party/blink/renderer/core/css/style_perftest.cc
index 48deb82cf80c4..4f13adf0d5d20 100644
--- a/third_party/blink/renderer/core/css/style_perftest.cc
+++ b/third_party/blink/renderer/core/css/style_perftest.cc
@@ -27,7 +27,7 @@
 #include "third_party/blink/renderer/core/html/html_body_element.h"
 #include "third_party/blink/renderer/core/loader/empty_clients.h"
 #include "third_party/blink/renderer/core/style/computed_style.h"
-#include "third_party/blink/renderer/core/testing/no_network_web_url_loader.h"
+#include "third_party/blink/renderer/core/testing/no_network_url_loader.h"
 #include "third_party/blink/renderer/core/testing/page_test_base.h"
 #include "third_party/blink/renderer/platform/heap/process_heap.h"
 #include "third_party/blink/renderer/platform/testing/unit_test_helpers.h"
diff --git a/third_party/blink/renderer/core/dom/events/listener_leak_test.cc b/third_party/blink/renderer/core/dom/events/listener_leak_test.cc
index a656356e4d17c..e2e13782cf59f 100644
--- a/third_party/blink/renderer/core/dom/events/listener_leak_test.cc
+++ b/third_party/blink/renderer/core/dom/events/listener_leak_test.cc
@@ -36,8 +36,8 @@
 #include "third_party/blink/renderer/core/frame/web_local_frame_impl.h"
 #include "third_party/blink/renderer/platform/heap/thread_state.h"
 #include "third_party/blink/renderer/platform/testing/unit_test_helpers.h"
+#include "third_party/blink/renderer/platform/testing/url_loader_mock_factory.h"
 #include "third_party/blink/renderer/platform/testing/url_test_helpers.h"
-#include "third_party/blink/renderer/platform/testing/web_url_loader_mock_factory.h"
 #include "v8/include/v8-profiler.h"
 #include "v8/include/v8.h"
 
diff --git a/third_party/blink/renderer/core/editing/serializers/serialization.cc b/third_party/blink/renderer/core/editing/serializers/serialization.cc
index 94fb83c55e13e..aad40428a9400 100644
--- a/third_party/blink/renderer/core/editing/serializers/serialization.cc
+++ b/third_party/blink/renderer/core/editing/serializers/serialization.cc
@@ -82,7 +82,7 @@
 #include "third_party/blink/renderer/platform/bindings/runtime_call_stats.h"
 #include "third_party/blink/renderer/platform/bindings/v8_per_isolate_data.h"
 #include "third_party/blink/renderer/platform/heap/garbage_collected.h"
-#include "third_party/blink/renderer/platform/loader/fetch/url_loader/web_url_loader_client.h"
+#include "third_party/blink/renderer/platform/loader/fetch/url_loader/url_loader_client.h"
 #include "third_party/blink/renderer/platform/weborigin/kurl.h"
 #include "third_party/blink/renderer/platform/wtf/functional.h"
 #include "third_party/blink/renderer/platform/wtf/std_lib_extras.h"
diff --git a/third_party/blink/renderer/core/exported/web_document_subresource_filter_test.cc b/third_party/blink/renderer/core/exported/web_document_subresource_filter_test.cc
index b6587ee3521f5..fe63a0dfebeec 100644
--- a/third_party/blink/renderer/core/exported/web_document_subresource_filter_test.cc
+++ b/third_party/blink/renderer/core/exported/web_document_subresource_filter_test.cc
@@ -17,8 +17,8 @@
 #include "third_party/blink/renderer/core/frame/web_local_frame_impl.h"
 #include "third_party/blink/renderer/core/html/html_image_element.h"
 #include "third_party/blink/renderer/platform/testing/unit_test_helpers.h"
+#include "third_party/blink/renderer/platform/testing/url_loader_mock_factory.h"
 #include "third_party/blink/renderer/platform/testing/url_test_helpers.h"
-#include "third_party/blink/renderer/platform/testing/web_url_loader_mock_factory.h"
 
 namespace blink {
 
diff --git a/third_party/blink/renderer/core/exported/web_frame_serializer_sanitization_test.cc b/third_party/blink/renderer/core/exported/web_frame_serializer_sanitization_test.cc
index d2b41e6157b0e..6eeb986650469 100644
--- a/third_party/blink/renderer/core/exported/web_frame_serializer_sanitization_test.cc
+++ b/third_party/blink/renderer/core/exported/web_frame_serializer_sanitization_test.cc
@@ -39,8 +39,8 @@
 #include "third_party/blink/renderer/core/frame/frame_test_helpers.h"
 #include "third_party/blink/renderer/core/frame/web_local_frame_impl.h"
 #include "third_party/blink/renderer/platform/testing/unit_test_helpers.h"
+#include "third_party/blink/renderer/platform/testing/url_loader_mock_factory.h"
 #include "third_party/blink/renderer/platform/testing/url_test_helpers.h"
-#include "third_party/blink/renderer/platform/testing/web_url_loader_mock_factory.h"
 #include "third_party/blink/renderer/platform/weborigin/kurl.h"
 
 namespace blink {
diff --git a/third_party/blink/renderer/core/exported/web_frame_serializer_test.cc b/third_party/blink/renderer/core/exported/web_frame_serializer_test.cc
index ba98bd617f628..a2dba8c45260e 100644
--- a/third_party/blink/renderer/core/exported/web_frame_serializer_test.cc
+++ b/third_party/blink/renderer/core/exported/web_frame_serializer_test.cc
@@ -39,8 +39,8 @@
 #include "third_party/blink/renderer/core/frame/frame_test_helpers.h"
 #include "third_party/blink/renderer/core/frame/web_local_frame_impl.h"
 #include "third_party/blink/renderer/platform/testing/unit_test_helpers.h"
+#include "third_party/blink/renderer/platform/testing/url_loader_mock_factory.h"
 #include "third_party/blink/renderer/platform/testing/url_test_helpers.h"
-#include "third_party/blink/renderer/platform/testing/web_url_loader_mock_factory.h"
 #include "third_party/blink/renderer/platform/weborigin/kurl.h"
 #include "third_party/blink/renderer/platform/wtf/text/string_builder.h"
 
diff --git a/third_party/blink/renderer/core/exported/web_plugin_container_test.cc b/third_party/blink/renderer/core/exported/web_plugin_container_test.cc
index 186663a4e8fad..3ba223da24d38 100644
--- a/third_party/blink/renderer/core/exported/web_plugin_container_test.cc
+++ b/third_party/blink/renderer/core/exported/web_plugin_container_test.cc
@@ -69,8 +69,8 @@
 #include "third_party/blink/renderer/platform/scheduler/public/thread.h"
 #include "third_party/blink/renderer/platform/testing/runtime_enabled_features_test_helpers.h"
 #include "third_party/blink/renderer/platform/testing/unit_test_helpers.h"
+#include "third_party/blink/renderer/platform/testing/url_loader_mock_factory.h"
 #include "third_party/blink/renderer/platform/testing/url_test_helpers.h"
-#include "third_party/blink/renderer/platform/testing/web_url_loader_mock_factory.h"
 
 using blink::test::RunPendingTasks;
 
diff --git a/third_party/blink/renderer/core/exported/web_searchable_form_data_test.cc b/third_party/blink/renderer/core/exported/web_searchable_form_data_test.cc
index 580680070b6ce..2c29626b2a47f 100644
--- a/third_party/blink/renderer/core/exported/web_searchable_form_data_test.cc
+++ b/third_party/blink/renderer/core/exported/web_searchable_form_data_test.cc
@@ -40,8 +40,8 @@
 #include "third_party/blink/renderer/core/frame/frame_test_helpers.h"
 #include "third_party/blink/renderer/core/frame/web_local_frame_impl.h"
 #include "third_party/blink/renderer/platform/testing/unit_test_helpers.h"
+#include "third_party/blink/renderer/platform/testing/url_loader_mock_factory.h"
 #include "third_party/blink/renderer/platform/testing/url_test_helpers.h"
-#include "third_party/blink/renderer/platform/testing/web_url_loader_mock_factory.h"
 
 namespace blink {
 
diff --git a/third_party/blink/renderer/core/exported/web_view_test.cc b/third_party/blink/renderer/core/exported/web_view_test.cc
index a10de2e13dc3d..8d5aff6c017bf 100644
--- a/third_party/blink/renderer/core/exported/web_view_test.cc
+++ b/third_party/blink/renderer/core/exported/web_view_test.cc
@@ -149,8 +149,8 @@
 #include "third_party/blink/renderer/platform/testing/histogram_tester.h"
 #include "third_party/blink/renderer/platform/testing/runtime_enabled_features_test_helpers.h"
 #include "third_party/blink/renderer/platform/testing/unit_test_helpers.h"
+#include "third_party/blink/renderer/platform/testing/url_loader_mock_factory.h"
 #include "third_party/blink/renderer/platform/testing/url_test_helpers.h"
-#include "third_party/blink/renderer/platform/testing/web_url_loader_mock_factory.h"
 #include "third_party/blink/renderer/platform/wtf/casting.h"
 #include "third_party/skia/include/core/SkBitmap.h"
 #include "third_party/skia/include/core/SkCanvas.h"
diff --git a/third_party/blink/renderer/core/frame/attribution_src_loader_test.cc b/third_party/blink/renderer/core/frame/attribution_src_loader_test.cc
index 80361202a479d..3fcb9cb8156b4 100644
--- a/third_party/blink/renderer/core/frame/attribution_src_loader_test.cc
+++ b/third_party/blink/renderer/core/frame/attribution_src_loader_test.cc
@@ -34,11 +34,11 @@
 #include "third_party/blink/renderer/platform/heap/garbage_collected.h"
 #include "third_party/blink/renderer/platform/heap/persistent.h"
 #include "third_party/blink/renderer/platform/loader/fetch/resource_request.h"
-#include "third_party/blink/renderer/platform/loader/fetch/url_loader/web_url_loader_factory.h"
+#include "third_party/blink/renderer/platform/loader/fetch/url_loader/url_loader_factory.h"
 #include "third_party/blink/renderer/platform/loader/testing/mock_resource.h"
 #include "third_party/blink/renderer/platform/testing/unit_test_helpers.h"
+#include "third_party/blink/renderer/platform/testing/url_loader_mock_factory.h"
 #include "third_party/blink/renderer/platform/testing/url_test_helpers.h"
-#include "third_party/blink/renderer/platform/testing/web_url_loader_mock_factory.h"
 #include "third_party/blink/renderer/platform/weborigin/kurl.h"
 #include "third_party/blink/renderer/platform/weborigin/referrer.h"
 #include "third_party/blink/renderer/platform/weborigin/security_origin.h"
@@ -57,8 +57,8 @@ class AttributionSrcLocalFrameClient : public EmptyLocalFrameClient {
  public:
   AttributionSrcLocalFrameClient() = default;
 
-  std::unique_ptr<WebURLLoader> CreateURLLoaderForTesting() override {
-    return WebURLLoaderMockFactory::GetSingletonInstance()->CreateURLLoader();
+  std::unique_ptr<URLLoader> CreateURLLoaderForTesting() override {
+    return URLLoaderMockFactory::GetSingletonInstance()->CreateURLLoader();
   }
 
   void DispatchWillSendRequest(ResourceRequest& request) override {
diff --git a/third_party/blink/renderer/core/frame/browser_controls_test.cc b/third_party/blink/renderer/core/frame/browser_controls_test.cc
index c1139aed5d4e5..4bdde31c45a91 100644
--- a/third_party/blink/renderer/core/frame/browser_controls_test.cc
+++ b/third_party/blink/renderer/core/frame/browser_controls_test.cc
@@ -52,8 +52,8 @@
 #include "third_party/blink/renderer/core/testing/sim/sim_test.h"
 #include "third_party/blink/renderer/platform/testing/testing_platform_support.h"
 #include "third_party/blink/renderer/platform/testing/unit_test_helpers.h"
+#include "third_party/blink/renderer/platform/testing/url_loader_mock_factory.h"
 #include "third_party/blink/renderer/platform/testing/url_test_helpers.h"
-#include "third_party/blink/renderer/platform/testing/web_url_loader_mock_factory.h"
 
 namespace blink {
 
@@ -88,7 +88,7 @@ class BrowserControlsTest : public testing::Test,
   }
 
   ~BrowserControlsTest() override {
-    WebURLLoaderMockFactory::GetSingletonInstance()
+    URLLoaderMockFactory::GetSingletonInstance()
         ->UnregisterAllURLsAndClearMemoryCache();
   }
 
diff --git a/third_party/blink/renderer/core/frame/frame_serializer_test.cc b/third_party/blink/renderer/core/frame/frame_serializer_test.cc
index db65290ba4f82..5a518bc13a009 100644
--- a/third_party/blink/renderer/core/frame/frame_serializer_test.cc
+++ b/third_party/blink/renderer/core/frame/frame_serializer_test.cc
@@ -48,8 +48,8 @@
 #include "third_party/blink/renderer/platform/scheduler/public/thread.h"
 #include "third_party/blink/renderer/platform/testing/testing_platform_support.h"
 #include "third_party/blink/renderer/platform/testing/unit_test_helpers.h"
+#include "third_party/blink/renderer/platform/testing/url_loader_mock_factory.h"
 #include "third_party/blink/renderer/platform/testing/url_test_helpers.h"
-#include "third_party/blink/renderer/platform/testing/web_url_loader_mock_factory.h"
 #include "third_party/blink/renderer/platform/wtf/deque.h"
 #include "third_party/blink/renderer/platform/wtf/text/string_builder.h"
 #include "third_party/blink/renderer/platform/wtf/vector.h"
@@ -70,7 +70,7 @@ class FrameSerializerTest : public testing::Test,
   }
 
   void TearDown() override {
-    WebURLLoaderMockFactory::GetSingletonInstance()
+    URLLoaderMockFactory::GetSingletonInstance()
         ->UnregisterAllURLsAndClearMemoryCache();
   }
 
@@ -99,7 +99,7 @@ class FrameSerializerTest : public testing::Test,
     response.SetMimeType("text/html");
     response.SetHttpStatusCode(status_code);
 
-    WebURLLoaderMockFactory::GetSingletonInstance()->RegisterErrorURL(
+    URLLoaderMockFactory::GetSingletonInstance()->RegisterErrorURL(
         KURL(base_url_, file), response, WebURLError(error));
   }
 
diff --git a/third_party/blink/renderer/core/frame/frame_test_helpers.cc b/third_party/blink/renderer/core/frame/frame_test_helpers.cc
index feb7d212e4abb..0fbe646dac6c0 100644
--- a/third_party/blink/renderer/core/frame/frame_test_helpers.cc
+++ b/third_party/blink/renderer/core/frame/frame_test_helpers.cc
@@ -85,8 +85,8 @@
 #include "third_party/blink/renderer/platform/scheduler/public/thread.h"
 #include "third_party/blink/renderer/platform/scheduler/test/fake_task_runner.h"
 #include "third_party/blink/renderer/platform/testing/unit_test_helpers.h"
+#include "third_party/blink/renderer/platform/testing/url_loader_mock_factory.h"
 #include "third_party/blink/renderer/platform/testing/url_test_helpers.h"
-#include "third_party/blink/renderer/platform/testing/web_url_loader_mock_factory.h"
 #include "third_party/blink/renderer/platform/widget/input/widget_input_handler_manager.h"
 #include "third_party/blink/renderer/platform/widget/widget_base.h"
 #include "third_party/blink/renderer/platform/wtf/casting.h"
@@ -119,7 +119,7 @@ namespace {
 void RunServeAsyncRequestsTask(scoped_refptr<base::TaskRunner> task_runner) {
   // TODO(kinuko,toyoshim): Create a mock factory and use it instead of
   // getting the platform's one. (crbug.com/751425)
-  WebURLLoaderMockFactory::GetSingletonInstance()->ServeAsynchronousRequests();
+  URLLoaderMockFactory::GetSingletonInstance()->ServeAsynchronousRequests();
   if (TestWebFrameClient::IsLoading()) {
     task_runner->PostTask(
         FROM_HERE, WTF::BindOnce(&RunServeAsyncRequestsTask, task_runner));
@@ -259,7 +259,7 @@ void FillNavigationParamsResponse(WebNavigationParams* params) {
   // Empty documents and srcdoc will be handled by DocumentLoader.
   if (DocumentLoader::WillLoadUrlAsEmpty(kurl) || kurl.IsAboutSrcdocURL())
     return;
-  WebURLLoaderMockFactory::GetSingletonInstance()->FillNavigationParamsResponse(
+  URLLoaderMockFactory::GetSingletonInstance()->FillNavigationParamsResponse(
       params);
 
   // Parse Content Security Policy response headers into the policy container,
@@ -795,8 +795,8 @@ bool TestWebFrameClient::SwapIn(WebFrame* previous_frame) {
   return result;
 }
 
-std::unique_ptr<WebURLLoader> TestWebFrameClient::CreateURLLoaderForTesting() {
-  return WebURLLoaderMockFactory::GetSingletonInstance()->CreateURLLoader();
+std::unique_ptr<URLLoader> TestWebFrameClient::CreateURLLoaderForTesting() {
+  return URLLoaderMockFactory::GetSingletonInstance()->CreateURLLoader();
 }
 
 void TestWebFrameClient::BeginNavigation(
diff --git a/third_party/blink/renderer/core/frame/frame_test_helpers.h b/third_party/blink/renderer/core/frame/frame_test_helpers.h
index f104e3a10189d..e6eb4d23b61bb 100644
--- a/third_party/blink/renderer/core/frame/frame_test_helpers.h
+++ b/third_party/blink/renderer/core/frame/frame_test_helpers.h
@@ -517,7 +517,7 @@ class TestWebFrameClient : public WebLocalFrameClient {
   void DidStartLoading() override;
   void DidStopLoading() override;
   bool SwapIn(WebFrame* previous_frame) override;
-  std::unique_ptr<WebURLLoader> CreateURLLoaderForTesting() override;
+  std::unique_ptr<URLLoader> CreateURLLoaderForTesting() override;
   void BeginNavigation(std::unique_ptr<WebNavigationInfo> info) override;
   WebEffectiveConnectionType GetEffectiveConnectionType() override;
   void SetEffectiveConnectionTypeForTesting(
diff --git a/third_party/blink/renderer/core/frame/local_frame.cc b/third_party/blink/renderer/core/frame/local_frame.cc
index a799b9eb5630c..af717e0d75750 100644
--- a/third_party/blink/renderer/core/frame/local_frame.cc
+++ b/third_party/blink/renderer/core/frame/local_frame.cc
@@ -2047,7 +2047,7 @@ LocalFrame::GetURLLoaderFactory() {
   return Client()->GetURLLoaderFactory();
 }
 
-std::unique_ptr<WebURLLoader> LocalFrame::CreateURLLoaderForTesting() {
+std::unique_ptr<URLLoader> LocalFrame::CreateURLLoaderForTesting() {
   return Client()->CreateURLLoaderForTesting();
 }
 
diff --git a/third_party/blink/renderer/core/frame/local_frame.h b/third_party/blink/renderer/core/frame/local_frame.h
index 221dbdcfbc565..e99d67f146952 100644
--- a/third_party/blink/renderer/core/frame/local_frame.h
+++ b/third_party/blink/renderer/core/frame/local_frame.h
@@ -155,7 +155,7 @@ class WebContentSettingsClient;
 class WebInputEventAttribution;
 class WebPluginContainerImpl;
 class WebPrescientNetworking;
-class WebURLLoader;
+class URLLoader;
 struct BlinkTransferableMessage;
 struct WebScriptSource;
 
@@ -501,9 +501,9 @@ class CORE_EXPORT LocalFrame final
 
   scoped_refptr<network::SharedURLLoaderFactory> GetURLLoaderFactory();
 
-  // For some tests, we use this method to create a WebURLLoader instead of
-  // using GetURLLoaderFactory().
-  std::unique_ptr<WebURLLoader> CreateURLLoaderForTesting();
+  // For some tests, we use this method to create a URLLoader instead of using
+  // GetURLLoaderFactory().
+  std::unique_ptr<URLLoader> CreateURLLoaderForTesting();
 
   bool IsInert() const { return is_inert_; }
 
diff --git a/third_party/blink/renderer/core/frame/local_frame_client.h b/third_party/blink/renderer/core/frame/local_frame_client.h
index 72db90a662922..553afb5528041 100644
--- a/third_party/blink/renderer/core/frame/local_frame_client.h
+++ b/third_party/blink/renderer/core/frame/local_frame_client.h
@@ -111,7 +111,7 @@ class WebRemotePlaybackClient;
 class WebServiceWorkerProvider;
 class WebSpellCheckPanelHostClient;
 class WebTextCheckClient;
-class WebURLLoader;
+class URLLoader;
 class ResourceLoadInfoNotifierWrapper;
 enum class SyncCondition;
 struct Impression;
@@ -368,7 +368,7 @@ class CORE_EXPORT LocalFrameClient : public FrameClient {
 
   virtual scoped_refptr<network::SharedURLLoaderFactory>
   GetURLLoaderFactory() = 0;
-  virtual std::unique_ptr<WebURLLoader> CreateURLLoaderForTesting() = 0;
+  virtual std::unique_ptr<URLLoader> CreateURLLoaderForTesting() = 0;
 
   virtual void AnnotatedRegionsChanged() = 0;
 
diff --git a/third_party/blink/renderer/core/frame/local_frame_client_impl.cc b/third_party/blink/renderer/core/frame/local_frame_client_impl.cc
index 7492b45338c70..7726bcd797b51 100644
--- a/third_party/blink/renderer/core/frame/local_frame_client_impl.cc
+++ b/third_party/blink/renderer/core/frame/local_frame_client_impl.cc
@@ -1009,8 +1009,7 @@ LocalFrameClientImpl::GetURLLoaderFactory() {
   return web_frame_->Client()->GetURLLoaderFactory();
 }
 
-std::unique_ptr<WebURLLoader>
-LocalFrameClientImpl::CreateURLLoaderForTesting() {
+std::unique_ptr<URLLoader> LocalFrameClientImpl::CreateURLLoaderForTesting() {
   return web_frame_->Client()->CreateURLLoaderForTesting();
 }
 
diff --git a/third_party/blink/renderer/core/frame/local_frame_client_impl.h b/third_party/blink/renderer/core/frame/local_frame_client_impl.h
index f1442b2e3eff8..5d2c6425dd568 100644
--- a/third_party/blink/renderer/core/frame/local_frame_client_impl.h
+++ b/third_party/blink/renderer/core/frame/local_frame_client_impl.h
@@ -229,7 +229,7 @@ class CORE_EXPORT LocalFrameClientImpl final : public LocalFrameClient {
   WebTextCheckClient* GetTextCheckerClient() const override;
 
   scoped_refptr<network::SharedURLLoaderFactory> GetURLLoaderFactory() override;
-  std::unique_ptr<WebURLLoader> CreateURLLoaderForTesting() override;
+  std::unique_ptr<URLLoader> CreateURLLoaderForTesting() override;
 
   blink::BrowserInterfaceBrokerProxy& GetBrowserInterfaceBroker() override;
 
diff --git a/third_party/blink/renderer/core/frame/visual_viewport_test.cc b/third_party/blink/renderer/core/frame/visual_viewport_test.cc
index 20f751638a4b6..2c344472052c1 100644
--- a/third_party/blink/renderer/core/frame/visual_viewport_test.cc
+++ b/third_party/blink/renderer/core/frame/visual_viewport_test.cc
@@ -55,8 +55,8 @@
 #include "third_party/blink/renderer/platform/testing/paint_property_test_helpers.h"
 #include "third_party/blink/renderer/platform/testing/paint_test_configurations.h"
 #include "third_party/blink/renderer/platform/testing/unit_test_helpers.h"
+#include "third_party/blink/renderer/platform/testing/url_loader_mock_factory.h"
 #include "third_party/blink/renderer/platform/testing/url_test_helpers.h"
-#include "third_party/blink/renderer/platform/testing/web_url_loader_mock_factory.h"
 #include "ui/accessibility/ax_mode.h"
 #include "ui/gfx/geometry/test/geometry_util.h"
 #include "ui/gfx/geometry/vector2d_conversions.h"
diff --git a/third_party/blink/renderer/core/frame/web_frame_test.cc b/third_party/blink/renderer/core/frame/web_frame_test.cc
index ba32cbd867e27..85f004ead79db 100644
--- a/third_party/blink/renderer/core/frame/web_frame_test.cc
+++ b/third_party/blink/renderer/core/frame/web_frame_test.cc
@@ -196,7 +196,7 @@
 #include "third_party/blink/renderer/platform/loader/fetch/raw_resource.h"
 #include "third_party/blink/renderer/platform/loader/fetch/resource_fetcher.h"
 #include "third_party/blink/renderer/platform/loader/fetch/resource_fetcher_properties.h"
-#include "third_party/blink/renderer/platform/loader/fetch/url_loader/web_url_loader_client.h"
+#include "third_party/blink/renderer/platform/loader/fetch/url_loader/url_loader_client.h"
 #include "third_party/blink/renderer/platform/runtime_enabled_features.h"
 #include "third_party/blink/renderer/platform/runtime_feature_state/runtime_feature_state_override_context.h"
 #include "third_party/blink/renderer/platform/scheduler/public/event_loop.h"
@@ -206,8 +206,8 @@
 #include "third_party/blink/renderer/platform/testing/runtime_enabled_features_test_helpers.h"
 #include "third_party/blink/renderer/platform/testing/testing_platform_support.h"
 #include "third_party/blink/renderer/platform/testing/unit_test_helpers.h"
+#include "third_party/blink/renderer/platform/testing/url_loader_mock_factory.h"
 #include "third_party/blink/renderer/platform/testing/url_test_helpers.h"
-#include "third_party/blink/renderer/platform/testing/web_url_loader_mock_factory.h"
 #include "third_party/blink/renderer/platform/weborigin/kurl_hash.h"
 #include "third_party/blink/renderer/platform/weborigin/scheme_registry.h"
 #include "third_party/blink/renderer/platform/weborigin/security_origin.h"
@@ -11966,13 +11966,13 @@ TEST_F(WebFrameTest, ScriptPriority) {
   client.VerifyAllRequests();
 }
 
-class MultipleDataChunkDelegate : public WebURLLoaderTestDelegate {
+class MultipleDataChunkDelegate : public URLLoaderTestDelegate {
  public:
   MultipleDataChunkDelegate() = default;
   ~MultipleDataChunkDelegate() override = default;
 
-  // WebURLLoaderTestDelegate:
-  void DidReceiveData(WebURLLoaderClient* original_client,
+  // URLLoaderTestDelegate:
+  void DidReceiveData(URLLoaderClient* original_client,
                       const char* data,
                       size_t data_length) override {
     EXPECT_GT(data_length, 16u);
diff --git a/third_party/blink/renderer/core/frame/web_local_frame_impl.cc b/third_party/blink/renderer/core/frame/web_local_frame_impl.cc
index b2bc1b7aff575..c75b1db746228 100644
--- a/third_party/blink/renderer/core/frame/web_local_frame_impl.cc
+++ b/third_party/blink/renderer/core/frame/web_local_frame_impl.cc
@@ -264,7 +264,7 @@
 #include "third_party/blink/renderer/platform/loader/fetch/fetch_context.h"
 #include "third_party/blink/renderer/platform/loader/fetch/resource_fetcher.h"
 #include "third_party/blink/renderer/platform/loader/fetch/resource_request.h"
-#include "third_party/blink/renderer/platform/loader/fetch/url_loader/web_url_loader_factory.h"
+#include "third_party/blink/renderer/platform/loader/fetch/url_loader/url_loader_factory.h"
 #include "third_party/blink/renderer/platform/scheduler/public/frame_scheduler.h"
 #include "third_party/blink/renderer/platform/scheduler/public/scheduling_policy.h"
 #include "third_party/blink/renderer/platform/text/text_direction.h"
diff --git a/third_party/blink/renderer/core/html/forms/external_popup_menu_test.cc b/third_party/blink/renderer/core/html/forms/external_popup_menu_test.cc
index 36ef6aa8c2778..e6eec044f8c4d 100644
--- a/third_party/blink/renderer/core/html/forms/external_popup_menu_test.cc
+++ b/third_party/blink/renderer/core/html/forms/external_popup_menu_test.cc
@@ -25,8 +25,8 @@
 #include "third_party/blink/renderer/core/testing/page_test_base.h"
 #include "third_party/blink/renderer/platform/heap/garbage_collected.h"
 #include "third_party/blink/renderer/platform/testing/unit_test_helpers.h"
+#include "third_party/blink/renderer/platform/testing/url_loader_mock_factory.h"
 #include "third_party/blink/renderer/platform/testing/url_test_helpers.h"
-#include "third_party/blink/renderer/platform/testing/web_url_loader_mock_factory.h"
 
 namespace blink {
 
diff --git a/third_party/blink/renderer/core/html/html_perftest.cc b/third_party/blink/renderer/core/html/html_perftest.cc
index 6d0ad1c2fc718..e498903cbb465 100644
--- a/third_party/blink/renderer/core/html/html_perftest.cc
+++ b/third_party/blink/renderer/core/html/html_perftest.cc
@@ -11,7 +11,7 @@
 #include "testing/perf/perf_test.h"
 #include "third_party/blink/renderer/core/dom/document.h"
 #include "third_party/blink/renderer/core/html/html_body_element.h"
-#include "third_party/blink/renderer/core/testing/no_network_web_url_loader.h"
+#include "third_party/blink/renderer/core/testing/no_network_url_loader.h"
 #include "third_party/blink/renderer/core/testing/page_test_base.h"
 #include "third_party/blink/renderer/platform/testing/unit_test_helpers.h"
 
diff --git a/third_party/blink/renderer/core/html/parser/html_preload_scanner_test.cc b/third_party/blink/renderer/core/html/parser/html_preload_scanner_test.cc
index 47c89b350b61d..ecedf47efecda 100644
--- a/third_party/blink/renderer/core/html/parser/html_preload_scanner_test.cc
+++ b/third_party/blink/renderer/core/html/parser/html_preload_scanner_test.cc
@@ -27,8 +27,8 @@
 #include "third_party/blink/renderer/platform/loader/fetch/client_hints_preferences.h"
 #include "third_party/blink/renderer/platform/network/http_names.h"
 #include "third_party/blink/renderer/platform/testing/runtime_enabled_features_test_helpers.h"
+#include "third_party/blink/renderer/platform/testing/url_loader_mock_factory.h"
 #include "third_party/blink/renderer/platform/testing/url_test_helpers.h"
-#include "third_party/blink/renderer/platform/testing/web_url_loader_mock_factory.h"
 #include "third_party/blink/renderer/platform/weborigin/security_origin.h"
 
 namespace blink {
diff --git a/third_party/blink/renderer/core/input/ime_on_focus_test.cc b/third_party/blink/renderer/core/input/ime_on_focus_test.cc
index e19cecb01d300..253ff106b0d89 100644
--- a/third_party/blink/renderer/core/input/ime_on_focus_test.cc
+++ b/third_party/blink/renderer/core/input/ime_on_focus_test.cc
@@ -12,8 +12,8 @@
 #include "third_party/blink/renderer/core/frame/web_local_frame_impl.h"
 #include "third_party/blink/renderer/core/html/html_element.h"
 #include "third_party/blink/renderer/platform/testing/unit_test_helpers.h"
+#include "third_party/blink/renderer/platform/testing/url_loader_mock_factory.h"
 #include "third_party/blink/renderer/platform/testing/url_test_helpers.h"
-#include "third_party/blink/renderer/platform/testing/web_url_loader_mock_factory.h"
 #include "ui/base/ime/mojom/text_input_state.mojom-blink.h"
 
 using blink::frame_test_helpers::LoadFrame;
diff --git a/third_party/blink/renderer/core/input/touch_action_test.cc b/third_party/blink/renderer/core/input/touch_action_test.cc
index e6f1a2b6b2b80..1f7c233ba6947 100644
--- a/third_party/blink/renderer/core/input/touch_action_test.cc
+++ b/third_party/blink/renderer/core/input/touch_action_test.cc
@@ -56,8 +56,8 @@
 #include "third_party/blink/renderer/core/paint/paint_layer.h"
 #include "third_party/blink/renderer/core/paint/paint_layer_scrollable_area.h"
 #include "third_party/blink/renderer/platform/testing/unit_test_helpers.h"
+#include "third_party/blink/renderer/platform/testing/url_loader_mock_factory.h"
 #include "third_party/blink/renderer/platform/testing/url_test_helpers.h"
-#include "third_party/blink/renderer/platform/testing/web_url_loader_mock_factory.h"
 
 using blink::test::RunPendingTasks;
 
diff --git a/third_party/blink/renderer/core/inspector/inspector_network_agent.cc b/third_party/blink/renderer/core/inspector/inspector_network_agent.cc
index 2e51676cdc697..0883a55201c6b 100644
--- a/third_party/blink/renderer/core/inspector/inspector_network_agent.cc
+++ b/third_party/blink/renderer/core/inspector/inspector_network_agent.cc
@@ -90,7 +90,7 @@
 #include "third_party/blink/renderer/platform/loader/fetch/resource_request.h"
 #include "third_party/blink/renderer/platform/loader/fetch/resource_response.h"
 #include "third_party/blink/renderer/platform/loader/fetch/unique_identifier.h"
-#include "third_party/blink/renderer/platform/loader/fetch/url_loader/web_url_loader_client.h"
+#include "third_party/blink/renderer/platform/loader/fetch/url_loader/url_loader_client.h"
 #include "third_party/blink/renderer/platform/network/http_header_map.h"
 #include "third_party/blink/renderer/platform/network/network_state_notifier.h"
 #include "third_party/blink/renderer/platform/scheduler/public/main_thread.h"
@@ -1553,7 +1553,7 @@ void InspectorNetworkAgent::DidReceiveCorsRedirectResponse(
   // Update the response and finish loading
   DidReceiveResourceResponse(identifier, loader, response, resource);
   DidFinishLoading(identifier, loader, base::TimeTicks(),
-                   WebURLLoaderClient::kUnknownEncodedDataLength, 0, false);
+                   URLLoaderClient::kUnknownEncodedDataLength, 0, false);
 }
 
 void InspectorNetworkAgent::DidFailLoading(
diff --git a/third_party/blink/renderer/core/loader/document_loader_test.cc b/third_party/blink/renderer/core/loader/document_loader_test.cc
index 44141ada38027..3d3ae58dda5bd 100644
--- a/third_party/blink/renderer/core/loader/document_loader_test.cc
+++ b/third_party/blink/renderer/core/loader/document_loader_test.cc
@@ -22,13 +22,13 @@
 #include "third_party/blink/renderer/core/testing/scoped_fake_plugin_registry.h"
 #include "third_party/blink/renderer/core/testing/sim/sim_request.h"
 #include "third_party/blink/renderer/core/testing/sim/sim_test.h"
-#include "third_party/blink/renderer/platform/loader/fetch/url_loader/web_url_loader_client.h"
+#include "third_party/blink/renderer/platform/loader/fetch/url_loader/url_loader_client.h"
 #include "third_party/blink/renderer/platform/loader/static_data_navigation_body_loader.h"
 #include "third_party/blink/renderer/platform/storage/blink_storage_key.h"
 #include "third_party/blink/renderer/platform/testing/histogram_tester.h"
 #include "third_party/blink/renderer/platform/testing/unit_test_helpers.h"
+#include "third_party/blink/renderer/platform/testing/url_loader_mock_factory.h"
 #include "third_party/blink/renderer/platform/testing/url_test_helpers.h"
-#include "third_party/blink/renderer/platform/testing/web_url_loader_mock_factory.h"
 #include "third_party/blink/renderer/platform/wtf/deque.h"
 
 namespace blink {
@@ -78,14 +78,14 @@ class DecodedBodyLoader : public StaticDataNavigationBodyLoader {
   std::unique_ptr<DecodedDataPassthroughClient> client_;
 };
 
-class BodyLoaderTestDelegate : public WebURLLoaderTestDelegate {
+class BodyLoaderTestDelegate : public URLLoaderTestDelegate {
  public:
   explicit BodyLoaderTestDelegate(
       std::unique_ptr<StaticDataNavigationBodyLoader> body_loader)
       : body_loader_(std::move(body_loader)),
         body_loader_raw_(body_loader_.get()) {}
 
-  // WebURLLoaderTestDelegate overrides:
+  // URLLoaderTestDelegate overrides:
   bool FillNavigationParamsResponse(WebNavigationParams* params) override {
     params->response = WebURLResponse(params->url);
     params->response.SetMimeType("text/html");
@@ -127,17 +127,17 @@ class DocumentLoaderTest : public testing::TestWithParam<bool> {
     url_test_helpers::RegisterMockedURLLoad(
         url_test_helpers::ToKURL("http://192.168.1.1/foo.html"),
         test::CoreTestDataPath("foo.html"), WebString::FromUTF8("text/html"),
-        WebURLLoaderMockFactory::GetSingletonInstance(),
+        URLLoaderMockFactory::GetSingletonInstance(),
         network::mojom::IPAddressSpace::kPrivate);
     url_test_helpers::RegisterMockedURLLoad(
         url_test_helpers::ToKURL("https://192.168.1.1/foo.html"),
         test::CoreTestDataPath("foo.html"), WebString::FromUTF8("text/html"),
-        WebURLLoaderMockFactory::GetSingletonInstance(),
+        URLLoaderMockFactory::GetSingletonInstance(),
         network::mojom::IPAddressSpace::kPrivate);
     url_test_helpers::RegisterMockedURLLoad(
         url_test_helpers::ToKURL("http://somethinglocal/foo.html"),
         test::CoreTestDataPath("foo.html"), WebString::FromUTF8("text/html"),
-        WebURLLoaderMockFactory::GetSingletonInstance(),
+        URLLoaderMockFactory::GetSingletonInstance(),
         network::mojom::IPAddressSpace::kLocal);
   }
 
@@ -149,7 +149,7 @@ class DocumentLoaderTest : public testing::TestWithParam<bool> {
 
   class ScopedLoaderDelegate {
    public:
-    ScopedLoaderDelegate(WebURLLoaderTestDelegate* delegate) {
+    explicit ScopedLoaderDelegate(URLLoaderTestDelegate* delegate) {
       url_test_helpers::SetLoaderDelegate(delegate);
     }
     ~ScopedLoaderDelegate() { url_test_helpers::SetLoaderDelegate(nullptr); }
@@ -166,9 +166,9 @@ INSTANTIATE_TEST_SUITE_P(DocumentLoaderTest,
                          ::testing::Bool());
 
 TEST_P(DocumentLoaderTest, SingleChunk) {
-  class TestDelegate : public WebURLLoaderTestDelegate {
+  class TestDelegate : public URLLoaderTestDelegate {
    public:
-    void DidReceiveData(WebURLLoaderClient* original_client,
+    void DidReceiveData(URLLoaderClient* original_client,
                         const char* data,
                         size_t data_length) override {
       EXPECT_EQ(34u, data_length)
@@ -188,9 +188,9 @@ TEST_P(DocumentLoaderTest, SingleChunk) {
 // Test normal case of DocumentLoader::dataReceived(): data in multiple chunks,
 // with no reentrancy.
 TEST_P(DocumentLoaderTest, MultiChunkNoReentrancy) {
-  class TestDelegate : public WebURLLoaderTestDelegate {
+  class TestDelegate : public URLLoaderTestDelegate {
    public:
-    void DidReceiveData(WebURLLoaderClient* original_client,
+    void DidReceiveData(URLLoaderClient* original_client,
                         const char* data,
                         size_t data_length) override {
       EXPECT_EQ(34u, data_length)
@@ -214,10 +214,10 @@ TEST_P(DocumentLoaderTest, MultiChunkWithReentrancy) {
   // 2. The middle part of the response, which is dispatched to
   //    BodyDataReceived() reentrantly.
   // 3. The final chunk, which is dispatched normally at the top-level.
-  class MainFrameClient : public WebURLLoaderTestDelegate,
+  class MainFrameClient : public URLLoaderTestDelegate,
                           public frame_test_helpers::TestWebFrameClient {
    public:
-    // WebURLLoaderTestDelegate overrides:
+    // URLLoaderTestDelegate overrides:
     bool FillNavigationParamsResponse(WebNavigationParams* params) override {
       params->response = WebURLResponse(params->url);
       params->response.SetMimeType("application/x-webkit-test-webplugin");
@@ -235,9 +235,8 @@ TEST_P(DocumentLoaderTest, MultiChunkWithReentrancy) {
 
     void Serve() {
       {
-        // Serve the first byte to the real WebURLLoaderCLient, which
-        // should trigger frameDetach() due to committing a provisional
-        // load.
+        // Serve the first byte to the real URLLoaderClient, which should
+        // trigger frameDetach() due to committing a provisional load.
         base::AutoReset<bool> dispatching(&dispatching_did_receive_data_, true);
         DispatchOneByte();
       }
diff --git a/third_party/blink/renderer/core/loader/empty_clients.h b/third_party/blink/renderer/core/loader/empty_clients.h
index 3abdb7fac8d4f..84e9886e4a27b 100644
--- a/third_party/blink/renderer/core/loader/empty_clients.h
+++ b/third_party/blink/renderer/core/loader/empty_clients.h
@@ -53,8 +53,8 @@
 #include "third_party/blink/renderer/platform/exported/wrapped_resource_request.h"
 #include "third_party/blink/renderer/platform/graphics/touch_action.h"
 #include "third_party/blink/renderer/platform/loader/fetch/resource_error.h"
-#include "third_party/blink/renderer/platform/loader/fetch/url_loader/web_url_loader.h"
-#include "third_party/blink/renderer/platform/loader/fetch/url_loader/web_url_loader_factory.h"
+#include "third_party/blink/renderer/platform/loader/fetch/url_loader/url_loader.h"
+#include "third_party/blink/renderer/platform/loader/fetch/url_loader/url_loader_factory.h"
 #include "third_party/blink/renderer/platform/wtf/allocator/allocator.h"
 #include "third_party/blink/renderer/platform/wtf/forward.h"
 #include "ui/base/cursor/cursor.h"
@@ -411,7 +411,7 @@ class CORE_EXPORT EmptyLocalFrameClient : public LocalFrameClient {
     return nullptr;
   }
 
-  std::unique_ptr<WebURLLoader> CreateURLLoaderForTesting() override {
+  std::unique_ptr<URLLoader> CreateURLLoaderForTesting() override {
     return nullptr;
   }
 
diff --git a/third_party/blink/renderer/core/loader/link_loader_test.cc b/third_party/blink/renderer/core/loader/link_loader_test.cc
index ee34526b63d94..2808413b19f63 100644
--- a/third_party/blink/renderer/core/loader/link_loader_test.cc
+++ b/third_party/blink/renderer/core/loader/link_loader_test.cc
@@ -30,8 +30,8 @@
 #include "third_party/blink/renderer/platform/loader/fetch/resource_fetcher.h"
 #include "third_party/blink/renderer/platform/loader/fetch/resource_load_priority.h"
 #include "third_party/blink/renderer/platform/testing/testing_platform_support.h"
+#include "third_party/blink/renderer/platform/testing/url_loader_mock_factory.h"
 #include "third_party/blink/renderer/platform/testing/url_test_helpers.h"
-#include "third_party/blink/renderer/platform/testing/web_url_loader_mock_factory.h"
 
 namespace blink {
 
@@ -599,7 +599,7 @@ TEST_P(LinkLoaderTestPrefetchPrivacyChanges, PrefetchPrivacyChanges) {
                   network::mojom::ReferrerPolicy::kDefault));
   }
 
-  WebURLLoaderMockFactory::GetSingletonInstance()
+  URLLoaderMockFactory::GetSingletonInstance()
       ->UnregisterAllURLsAndClearMemoryCache();
 }
 
@@ -665,7 +665,7 @@ TEST_F(LinkLoaderTest, Prefetch) {
                   resource->GetResourceRequest().GetReferrerPolicy());
       }
     }
-    WebURLLoaderMockFactory::GetSingletonInstance()
+    URLLoaderMockFactory::GetSingletonInstance()
         ->UnregisterAllURLsAndClearMemoryCache();
   }
 }
diff --git a/third_party/blink/renderer/core/loader/loader_factory_for_frame.cc b/third_party/blink/renderer/core/loader/loader_factory_for_frame.cc
index 9c443c4576777..1e79dc675ba31 100644
--- a/third_party/blink/renderer/core/loader/loader_factory_for_frame.cc
+++ b/third_party/blink/renderer/core/loader/loader_factory_for_frame.cc
@@ -22,7 +22,7 @@
 #include "third_party/blink/renderer/core/loader/document_loader.h"
 #include "third_party/blink/renderer/core/loader/prefetched_signed_exchange_manager.h"
 #include "third_party/blink/renderer/platform/exported/wrapped_resource_request.h"
-#include "third_party/blink/renderer/platform/loader/fetch/url_loader/web_url_loader_factory.h"
+#include "third_party/blink/renderer/platform/loader/fetch/url_loader/url_loader_factory.h"
 #include "third_party/blink/renderer/platform/weborigin/kurl.h"
 #include "third_party/blink/renderer/platform/wtf/std_lib_extras.h"
 
@@ -68,7 +68,7 @@ void LoaderFactoryForFrame::Trace(Visitor* visitor) const {
   LoaderFactory::Trace(visitor);
 }
 
-std::unique_ptr<WebURLLoader> LoaderFactoryForFrame::CreateURLLoader(
+std::unique_ptr<URLLoader> LoaderFactoryForFrame::CreateURLLoader(
     const ResourceRequest& request,
     const ResourceLoaderOptions& options,
     scoped_refptr<base::SingleThreadTaskRunner> freezable_task_runner,
@@ -113,7 +113,7 @@ std::unique_ptr<WebURLLoader> LoaderFactoryForFrame::CreateURLLoader(
   DCHECK(frame_scheduler);
 
   if (url_loader_factory) {
-    return std::make_unique<WebURLLoaderFactory>(
+    return std::make_unique<URLLoaderFactory>(
                base::MakeRefCounted<network::WrapperSharedURLLoaderFactory>(
                    CrossVariantMojoRemote<
                        network::mojom::URLLoaderFactoryInterfaceBase>(
@@ -135,7 +135,7 @@ std::unique_ptr<WebURLLoader> LoaderFactoryForFrame::CreateURLLoader(
     if (loader_factory) {
       IssueKeepAliveHandleIfRequested(request, frame->GetLocalFrameHostRemote(),
                                       std::move(pending_receiver));
-      return std::make_unique<WebURLLoaderFactory>(
+      return std::make_unique<URLLoaderFactory>(
                  std::move(loader_factory), GetCorsExemptHeaderList(),
                  /*terminate_sync_load_event=*/nullptr)
           ->CreateURLLoader(webreq, freezable_task_runner,
@@ -161,7 +161,7 @@ std::unique_ptr<WebURLLoader> LoaderFactoryForFrame::CreateURLLoader(
     return loader;
   }
 
-  return std::make_unique<WebURLLoaderFactory>(
+  return std::make_unique<URLLoaderFactory>(
              frame->GetURLLoaderFactory(), GetCorsExemptHeaderList(),
              /*terminate_sync_load_event=*/nullptr)
       ->CreateURLLoader(webreq, freezable_task_runner, unfreezable_task_runner,
diff --git a/third_party/blink/renderer/core/loader/loader_factory_for_frame.h b/third_party/blink/renderer/core/loader/loader_factory_for_frame.h
index 1998a9a2487b5..0f9b901c3ed3d 100644
--- a/third_party/blink/renderer/core/loader/loader_factory_for_frame.h
+++ b/third_party/blink/renderer/core/loader/loader_factory_for_frame.h
@@ -34,7 +34,7 @@ class CORE_EXPORT LoaderFactoryForFrame final
   void Trace(Visitor*) const override;
 
   // LoaderFactory implementations
-  std::unique_ptr<WebURLLoader> CreateURLLoader(
+  std::unique_ptr<URLLoader> CreateURLLoader(
       const ResourceRequest&,
       const ResourceLoaderOptions&,
       scoped_refptr<base::SingleThreadTaskRunner>,
diff --git a/third_party/blink/renderer/core/loader/loader_factory_for_worker.cc b/third_party/blink/renderer/core/loader/loader_factory_for_worker.cc
index 16916ffb1f79a..3f408ce52a810 100644
--- a/third_party/blink/renderer/core/loader/loader_factory_for_worker.cc
+++ b/third_party/blink/renderer/core/loader/loader_factory_for_worker.cc
@@ -18,8 +18,8 @@
 #include "third_party/blink/renderer/platform/exported/wrapped_resource_request.h"
 #include "third_party/blink/renderer/platform/loader/fetch/resource_loader_options.h"
 #include "third_party/blink/renderer/platform/loader/fetch/resource_request.h"
-#include "third_party/blink/renderer/platform/loader/fetch/url_loader/web_url_loader.h"
-#include "third_party/blink/renderer/platform/loader/fetch/url_loader/web_url_loader_factory.h"
+#include "third_party/blink/renderer/platform/loader/fetch/url_loader/url_loader.h"
+#include "third_party/blink/renderer/platform/loader/fetch/url_loader/url_loader_factory.h"
 
 namespace blink {
 
@@ -28,7 +28,7 @@ void LoaderFactoryForWorker::Trace(Visitor* visitor) const {
   LoaderFactory::Trace(visitor);
 }
 
-std::unique_ptr<WebURLLoader> LoaderFactoryForWorker::CreateURLLoader(
+std::unique_ptr<URLLoader> LoaderFactoryForWorker::CreateURLLoader(
     const ResourceRequest& request,
     const ResourceLoaderOptions& options,
     scoped_refptr<base::SingleThreadTaskRunner> freezable_task_runner,
diff --git a/third_party/blink/renderer/core/loader/loader_factory_for_worker.h b/third_party/blink/renderer/core/loader/loader_factory_for_worker.h
index 5de00451f9e6f..ceb0d3169c71d 100644
--- a/third_party/blink/renderer/core/loader/loader_factory_for_worker.h
+++ b/third_party/blink/renderer/core/loader/loader_factory_for_worker.h
@@ -25,7 +25,7 @@ class LoaderFactoryForWorker : public ResourceFetcher::LoaderFactory {
   void Trace(Visitor* visitor) const override;
 
   // LoaderFactory implementations
-  std::unique_ptr<WebURLLoader> CreateURLLoader(
+  std::unique_ptr<URLLoader> CreateURLLoader(
       const ResourceRequest& request,
       const ResourceLoaderOptions& options,
       scoped_refptr<base::SingleThreadTaskRunner> freezable_task_runner,
diff --git a/third_party/blink/renderer/core/loader/modulescript/module_script_loader_test.cc b/third_party/blink/renderer/core/loader/modulescript/module_script_loader_test.cc
index fca3156f234cd..228487b3999f0 100644
--- a/third_party/blink/renderer/core/loader/modulescript/module_script_loader_test.cc
+++ b/third_party/blink/renderer/core/loader/modulescript/module_script_loader_test.cc
@@ -41,8 +41,8 @@
 #include "third_party/blink/renderer/platform/testing/mock_context_lifecycle_notifier.h"
 #include "third_party/blink/renderer/platform/testing/runtime_enabled_features_test_helpers.h"
 #include "third_party/blink/renderer/platform/testing/unit_test_helpers.h"
+#include "third_party/blink/renderer/platform/testing/url_loader_mock_factory.h"
 #include "third_party/blink/renderer/platform/testing/url_test_helpers.h"
-#include "third_party/blink/renderer/platform/testing/web_url_loader_mock_factory.h"
 
 namespace blink {
 
diff --git a/third_party/blink/renderer/core/loader/ping_loader.h b/third_party/blink/renderer/core/loader/ping_loader.h
index 4b08c117d3a85..8fab6e6b884f3 100644
--- a/third_party/blink/renderer/core/loader/ping_loader.h
+++ b/third_party/blink/renderer/core/loader/ping_loader.h
@@ -33,7 +33,7 @@
 #define THIRD_PARTY_BLINK_RENDERER_CORE_LOADER_PING_LOADER_H_
 
 #include "third_party/blink/renderer/core/core_export.h"
-#include "third_party/blink/renderer/platform/loader/fetch/url_loader/web_url_loader_client.h"
+#include "third_party/blink/renderer/platform/loader/fetch/url_loader/url_loader_client.h"
 #include "third_party/blink/renderer/platform/timer.h"
 #include "third_party/blink/renderer/platform/wtf/allocator/allocator.h"
 #include "third_party/blink/renderer/platform/wtf/forward.h"
diff --git a/third_party/blink/renderer/core/loader/ping_loader_test.cc b/third_party/blink/renderer/core/loader/ping_loader_test.cc
index 495d50266c8f0..178b84245eac3 100644
--- a/third_party/blink/renderer/core/loader/ping_loader_test.cc
+++ b/third_party/blink/renderer/core/loader/ping_loader_test.cc
@@ -11,11 +11,11 @@
 #include "third_party/blink/renderer/core/loader/empty_clients.h"
 #include "third_party/blink/renderer/core/loader/frame_loader.h"
 #include "third_party/blink/renderer/core/testing/page_test_base.h"
-#include "third_party/blink/renderer/platform/loader/fetch/url_loader/web_url_loader_factory.h"
+#include "third_party/blink/renderer/platform/loader/fetch/url_loader/url_loader_factory.h"
 #include "third_party/blink/renderer/platform/network/encoded_form_data.h"
 #include "third_party/blink/renderer/platform/testing/unit_test_helpers.h"
+#include "third_party/blink/renderer/platform/testing/url_loader_mock_factory.h"
 #include "third_party/blink/renderer/platform/testing/url_test_helpers.h"
-#include "third_party/blink/renderer/platform/testing/web_url_loader_mock_factory.h"
 #include "third_party/blink/renderer/platform/weborigin/kurl.h"
 
 namespace blink {
@@ -47,8 +47,8 @@ class PingLocalFrameClient : public EmptyLocalFrameClient {
  public:
   PingLocalFrameClient() = default;
 
-  std::unique_ptr<WebURLLoader> CreateURLLoaderForTesting() override {
-    return WebURLLoaderMockFactory::GetSingletonInstance()->CreateURLLoader();
+  std::unique_ptr<URLLoader> CreateURLLoaderForTesting() override {
+    return URLLoaderMockFactory::GetSingletonInstance()->CreateURLLoader();
   }
 
   void DispatchWillSendRequest(ResourceRequest& request) override {
diff --git a/third_party/blink/renderer/core/loader/prefetched_signed_exchange_manager.cc b/third_party/blink/renderer/core/loader/prefetched_signed_exchange_manager.cc
index ab6f8c6e748fb..b14968237cc0b 100644
--- a/third_party/blink/renderer/core/loader/prefetched_signed_exchange_manager.cc
+++ b/third_party/blink/renderer/core/loader/prefetched_signed_exchange_manager.cc
@@ -32,9 +32,9 @@
 #include "third_party/blink/renderer/core/loader/loader_factory_for_frame.h"
 #include "third_party/blink/renderer/platform/heap/garbage_collected.h"
 #include "third_party/blink/renderer/platform/loader/fetch/loader_freeze_mode.h"
-#include "third_party/blink/renderer/platform/loader/fetch/url_loader/web_url_loader.h"
-#include "third_party/blink/renderer/platform/loader/fetch/url_loader/web_url_loader_client.h"
-#include "third_party/blink/renderer/platform/loader/fetch/url_loader/web_url_loader_factory.h"
+#include "third_party/blink/renderer/platform/loader/fetch/url_loader/url_loader.h"
+#include "third_party/blink/renderer/platform/loader/fetch/url_loader/url_loader_client.h"
+#include "third_party/blink/renderer/platform/loader/fetch/url_loader/url_loader_factory.h"
 #include "third_party/blink/renderer/platform/loader/link_header.h"
 #include "third_party/blink/renderer/platform/scheduler/public/frame_scheduler.h"
 #include "third_party/blink/renderer/platform/weborigin/kurl.h"
@@ -49,7 +49,7 @@
 namespace blink {
 
 class PrefetchedSignedExchangeManager::PrefetchedSignedExchangeLoader
-    : public WebURLLoader {
+    : public URLLoader {
  public:
   PrefetchedSignedExchangeLoader(
       const WebURLRequest& request,
@@ -75,7 +75,7 @@ class PrefetchedSignedExchangeManager::PrefetchedSignedExchangeLoader
     return weak_ptr_factory_.GetWeakPtr();
   }
 
-  void SetURLLoader(std::unique_ptr<WebURLLoader> url_loader) {
+  void SetURLLoader(std::unique_ptr<URLLoader> url_loader) {
     DCHECK(!url_loader_);
     url_loader_ = std::move(url_loader);
     ExecutePendingMethodCalls();
@@ -83,14 +83,14 @@ class PrefetchedSignedExchangeManager::PrefetchedSignedExchangeLoader
 
   const WebURLRequest& request() const { return request_; }
 
-  // WebURLLoader methods:
+  // URLLoader methods:
   void LoadSynchronously(
       std::unique_ptr<network::ResourceRequest> request,
       scoped_refptr<WebURLRequestExtraData> url_request_extra_data,
       bool pass_response_pipe_to_client,
       bool no_mime_sniffing,
       base::TimeDelta timeout_interval,
-      WebURLLoaderClient* client,
+      URLLoaderClient* client,
       WebURLResponse& response,
       absl::optional<WebURLError>& error,
       WebData& data,
@@ -107,7 +107,7 @@ class PrefetchedSignedExchangeManager::PrefetchedSignedExchangeLoader
       bool no_mime_sniffing,
       std::unique_ptr<blink::ResourceLoadInfoNotifierWrapper>
           resource_load_info_notifier_wrapper,
-      WebURLLoaderClient* client) override {
+      URLLoaderClient* client) override {
     if (url_loader_) {
       url_loader_->LoadAsynchronously(
           std::move(request), std::move(url_request_extra_data),
@@ -159,7 +159,7 @@ class PrefetchedSignedExchangeManager::PrefetchedSignedExchangeLoader
 
   WebURLRequest request_;
   scoped_refptr<base::SingleThreadTaskRunner> task_runner_;
-  std::unique_ptr<WebURLLoader> url_loader_;
+  std::unique_ptr<URLLoader> url_loader_;
   std::queue<base::OnceClosure> pending_method_calls_;
 
   base::WeakPtrFactory<PrefetchedSignedExchangeLoader> weak_ptr_factory_{this};
@@ -224,7 +224,7 @@ void PrefetchedSignedExchangeManager::StartPrefetchedLinkHeaderPreloads() {
   alternative_resources_.reset();
 }
 
-std::unique_ptr<WebURLLoader>
+std::unique_ptr<URLLoader>
 PrefetchedSignedExchangeManager::MaybeCreateURLLoader(
     const WebURLRequest& request) {
   if (started_)
@@ -243,10 +243,10 @@ PrefetchedSignedExchangeManager::MaybeCreateURLLoader(
   return loader;
 }
 
-std::unique_ptr<WebURLLoader>
+std::unique_ptr<URLLoader>
 PrefetchedSignedExchangeManager::CreateDefaultURLLoader(
     const WebURLRequest& request) {
-  return std::make_unique<blink::WebURLLoaderFactory>(
+  return std::make_unique<blink::URLLoaderFactory>(
              frame_->GetURLLoaderFactory(),
              LoaderFactoryForFrame::GetCorsExemptHeaderList(),
              /*terminate_sync_load_event=*/nullptr)
@@ -256,12 +256,12 @@ PrefetchedSignedExchangeManager::CreateDefaultURLLoader(
                         /*back_forward_cache_loader_helper=*/nullptr);
 }
 
-std::unique_ptr<WebURLLoader>
+std::unique_ptr<URLLoader>
 PrefetchedSignedExchangeManager::CreatePrefetchedSignedExchangeURLLoader(
     const WebURLRequest& request,
     mojo::PendingRemote<network::mojom::blink::URLLoaderFactory>
         loader_factory) {
-  return std::make_unique<WebURLLoaderFactory>(
+  return std::make_unique<URLLoaderFactory>(
              base::MakeRefCounted<network::WrapperSharedURLLoaderFactory>(
                  CrossVariantMojoRemote<
                      network::mojom::URLLoaderFactoryInterfaceBase>(
diff --git a/third_party/blink/renderer/core/loader/prefetched_signed_exchange_manager.h b/third_party/blink/renderer/core/loader/prefetched_signed_exchange_manager.h
index 2641ff523a2e3..c2ccd2fb53e64 100644
--- a/third_party/blink/renderer/core/loader/prefetched_signed_exchange_manager.h
+++ b/third_party/blink/renderer/core/loader/prefetched_signed_exchange_manager.h
@@ -19,7 +19,7 @@ namespace blink {
 
 class AlternateSignedExchangeResourceInfo;
 class LocalFrame;
-class WebURLLoader;
+class URLLoader;
 class WebURLRequest;
 
 // This class holds the prefetched signed exchange info and will returns
@@ -61,8 +61,7 @@ class PrefetchedSignedExchangeManager final
   //
   // The returned loader doesn't start loading until
   // StartPrefetchedLinkHeaderPreloads() will be called.
-  std::unique_ptr<WebURLLoader> MaybeCreateURLLoader(
-      const WebURLRequest& request);
+  std::unique_ptr<URLLoader> MaybeCreateURLLoader(const WebURLRequest& request);
 
   // If the all loaders which have been created by MaybeCreateURLLoader() have
   // a matching "alternate" link header in the outer response and the matching
@@ -83,9 +82,9 @@ class PrefetchedSignedExchangeManager final
   class PrefetchedSignedExchangeLoader;
 
   void TriggerLoad();
-  std::unique_ptr<WebURLLoader> CreateDefaultURLLoader(
+  std::unique_ptr<URLLoader> CreateDefaultURLLoader(
       const WebURLRequest& request);
-  std::unique_ptr<WebURLLoader> CreatePrefetchedSignedExchangeURLLoader(
+  std::unique_ptr<URLLoader> CreatePrefetchedSignedExchangeURLLoader(
       const WebURLRequest& request,
       mojo::PendingRemote<network::mojom::blink::URLLoaderFactory>
           loader_factory);
diff --git a/third_party/blink/renderer/core/loader/prerender_test.cc b/third_party/blink/renderer/core/loader/prerender_test.cc
index 6c89fb2aae732..11889a0ad00ae 100644
--- a/third_party/blink/renderer/core/loader/prerender_test.cc
+++ b/third_party/blink/renderer/core/loader/prerender_test.cc
@@ -50,8 +50,8 @@
 #include "third_party/blink/renderer/core/frame/web_local_frame_impl.h"
 #include "third_party/blink/renderer/core/html_element_type_helpers.h"
 #include "third_party/blink/renderer/platform/testing/unit_test_helpers.h"
+#include "third_party/blink/renderer/platform/testing/url_loader_mock_factory.h"
 #include "third_party/blink/renderer/platform/testing/url_test_helpers.h"
-#include "third_party/blink/renderer/platform/testing/web_url_loader_mock_factory.h"
 
 namespace blink {
 
diff --git a/third_party/blink/renderer/core/loader/programmatic_scroll_test.cc b/third_party/blink/renderer/core/loader/programmatic_scroll_test.cc
index 71b0a04a8828c..19ab6b9fe649a 100644
--- a/third_party/blink/renderer/core/loader/programmatic_scroll_test.cc
+++ b/third_party/blink/renderer/core/loader/programmatic_scroll_test.cc
@@ -20,8 +20,8 @@
 #include "third_party/blink/renderer/core/testing/sim/sim_request.h"
 #include "third_party/blink/renderer/core/testing/sim/sim_test.h"
 #include "third_party/blink/renderer/platform/testing/unit_test_helpers.h"
+#include "third_party/blink/renderer/platform/testing/url_loader_mock_factory.h"
 #include "third_party/blink/renderer/platform/testing/url_test_helpers.h"
-#include "third_party/blink/renderer/platform/testing/web_url_loader_mock_factory.h"
 
 namespace blink {
 
diff --git a/third_party/blink/renderer/core/loader/resource/css_style_sheet_resource_test.cc b/third_party/blink/renderer/core/loader/resource/css_style_sheet_resource_test.cc
index ce8ed99e09b14..3a6d0b9fe1ada 100644
--- a/third_party/blink/renderer/core/loader/resource/css_style_sheet_resource_test.cc
+++ b/third_party/blink/renderer/core/loader/resource/css_style_sheet_resource_test.cc
@@ -36,7 +36,7 @@
 #include "third_party/blink/renderer/platform/loader/testing/mock_fetch_context.h"
 #include "third_party/blink/renderer/platform/loader/testing/test_resource_fetcher_properties.h"
 #include "third_party/blink/renderer/platform/testing/mock_context_lifecycle_notifier.h"
-#include "third_party/blink/renderer/platform/testing/noop_web_url_loader.h"
+#include "third_party/blink/renderer/platform/testing/noop_url_loader.h"
 #include "third_party/blink/renderer/platform/testing/unit_test_helpers.h"
 #include "third_party/blink/renderer/platform/testing/url_test_helpers.h"
 #include "third_party/blink/renderer/platform/weborigin/kurl.h"
@@ -50,13 +50,13 @@ class Document;
 namespace {
 
 class NoopLoaderFactory final : public ResourceFetcher::LoaderFactory {
-  std::unique_ptr<WebURLLoader> CreateURLLoader(
+  std::unique_ptr<URLLoader> CreateURLLoader(
       const ResourceRequest& request,
       const ResourceLoaderOptions& options,
       scoped_refptr<base::SingleThreadTaskRunner> freezable_task_runner,
       scoped_refptr<base::SingleThreadTaskRunner> unfreezable_task_runner,
       BackForwardCacheLoaderHelper* back_forward_cache_loader_helper) override {
-    return std::make_unique<NoopWebURLLoader>(std::move(freezable_task_runner));
+    return std::make_unique<NoopURLLoader>(std::move(freezable_task_runner));
   }
   std::unique_ptr<WebCodeCacheLoader> CreateCodeCacheLoader() override {
     return std::make_unique<CodeCacheLoaderMock>();
diff --git a/third_party/blink/renderer/core/loader/resource/font_resource_test.cc b/third_party/blink/renderer/core/loader/resource/font_resource_test.cc
index ace90171dc421..a833cb9887749 100644
--- a/third_party/blink/renderer/core/loader/resource/font_resource_test.cc
+++ b/third_party/blink/renderer/core/loader/resource/font_resource_test.cc
@@ -26,8 +26,8 @@
 #include "third_party/blink/renderer/platform/loader/testing/test_resource_fetcher_properties.h"
 #include "third_party/blink/renderer/platform/testing/histogram_tester.h"
 #include "third_party/blink/renderer/platform/testing/mock_context_lifecycle_notifier.h"
+#include "third_party/blink/renderer/platform/testing/url_loader_mock_factory.h"
 #include "third_party/blink/renderer/platform/testing/url_test_helpers.h"
-#include "third_party/blink/renderer/platform/testing/web_url_loader_mock_factory.h"
 #include "third_party/blink/renderer/platform/weborigin/kurl.h"
 
 namespace blink {
diff --git a/third_party/blink/renderer/core/loader/resource/image_resource_test.cc b/third_party/blink/renderer/core/loader/resource/image_resource_test.cc
index 2096c5b8a120e..2f6bd62782890 100644
--- a/third_party/blink/renderer/core/loader/resource/image_resource_test.cc
+++ b/third_party/blink/renderer/core/loader/resource/image_resource_test.cc
@@ -74,7 +74,7 @@
 #include "third_party/blink/renderer/platform/testing/scoped_mocked_url.h"
 #include "third_party/blink/renderer/platform/testing/testing_platform_support_with_mock_scheduler.h"
 #include "third_party/blink/renderer/platform/testing/unit_test_helpers.h"
-#include "third_party/blink/renderer/platform/testing/web_url_loader_mock_factory.h"
+#include "third_party/blink/renderer/platform/testing/url_loader_mock_factory.h"
 #include "third_party/blink/renderer/platform/wtf/shared_buffer.h"
 #include "third_party/blink/renderer/platform/wtf/text/base64.h"
 
@@ -237,7 +237,7 @@ TEST_F(ImageResourceTest, MultipartImage) {
   ScopedMockedURLLoad scoped_mocked_url_load(test_url, GetTestFilePath());
 
   // Emulate starting a real load, but don't expect any "real"
-  // WebURLLoaderClient callbacks.
+  // URLLoaderClient callbacks.
   ImageResource* image_resource = ImageResource::CreateForTest(test_url);
   fetcher->StartLoad(image_resource);
 
diff --git a/third_party/blink/renderer/core/loader/resource/resource_loader_code_cache_test.cc b/third_party/blink/renderer/core/loader/resource/resource_loader_code_cache_test.cc
index a50b7c2d615f8..f01c55633108a 100644
--- a/third_party/blink/renderer/core/loader/resource/resource_loader_code_cache_test.cc
+++ b/third_party/blink/renderer/core/loader/resource/resource_loader_code_cache_test.cc
@@ -15,7 +15,7 @@
 #include "third_party/blink/renderer/platform/scheduler/test/fake_task_runner.h"
 #include "third_party/blink/renderer/platform/testing/code_cache_loader_mock.h"
 #include "third_party/blink/renderer/platform/testing/mock_context_lifecycle_notifier.h"
-#include "third_party/blink/renderer/platform/testing/noop_web_url_loader.h"
+#include "third_party/blink/renderer/platform/testing/noop_url_loader.h"
 #include "third_party/blink/renderer/platform/testing/testing_platform_support_with_mock_scheduler.h"
 #include "third_party/blink/renderer/platform/weborigin/scheme_registry.h"
 
@@ -44,15 +44,14 @@ class ResourceLoaderCodeCacheTest : public testing::Test {
     explicit CodeCacheTestLoaderFactory(
         scoped_refptr<CodeCacheLoaderMock::Controller> controller)
         : controller_(std::move(controller)) {}
-    std::unique_ptr<WebURLLoader> CreateURLLoader(
+    std::unique_ptr<URLLoader> CreateURLLoader(
         const ResourceRequest& request,
         const ResourceLoaderOptions& options,
         scoped_refptr<base::SingleThreadTaskRunner> freezable_task_runner,
         scoped_refptr<base::SingleThreadTaskRunner> unfreezable_task_runner,
         BackForwardCacheLoaderHelper* back_forward_cache_loader_helper)
         override {
-      return std::make_unique<NoopWebURLLoader>(
-          std::move(freezable_task_runner));
+      return std::make_unique<NoopURLLoader>(std::move(freezable_task_runner));
     }
     std::unique_ptr<WebCodeCacheLoader> CreateCodeCacheLoader() override {
       return std::make_unique<CodeCacheLoaderMock>(controller_);
diff --git a/third_party/blink/renderer/core/loader/threadable_loader_test.cc b/third_party/blink/renderer/core/loader/threadable_loader_test.cc
index 0c6d2a8d61da6..514df54a9ff99 100644
--- a/third_party/blink/renderer/core/loader/threadable_loader_test.cc
+++ b/third_party/blink/renderer/core/loader/threadable_loader_test.cc
@@ -32,8 +32,8 @@
 #include "third_party/blink/renderer/platform/loader/fetch/resource_request.h"
 #include "third_party/blink/renderer/platform/loader/fetch/resource_response.h"
 #include "third_party/blink/renderer/platform/testing/unit_test_helpers.h"
+#include "third_party/blink/renderer/platform/testing/url_loader_mock_factory.h"
 #include "third_party/blink/renderer/platform/testing/url_test_helpers.h"
-#include "third_party/blink/renderer/platform/testing/web_url_loader_mock_factory.h"
 #include "third_party/blink/renderer/platform/weborigin/kurl.h"
 #include "third_party/blink/renderer/platform/weborigin/security_origin.h"
 #include "third_party/blink/renderer/platform/wtf/functional.h"
diff --git a/third_party/blink/renderer/core/loader/threaded_icon_loader_test.cc b/third_party/blink/renderer/core/loader/threaded_icon_loader_test.cc
index 5c606f6d36b0e..4ffe70476a5eb 100644
--- a/third_party/blink/renderer/core/loader/threaded_icon_loader_test.cc
+++ b/third_party/blink/renderer/core/loader/threaded_icon_loader_test.cc
@@ -14,8 +14,8 @@
 #include "third_party/blink/renderer/platform/testing/histogram_tester.h"
 #include "third_party/blink/renderer/platform/testing/testing_platform_support.h"
 #include "third_party/blink/renderer/platform/testing/unit_test_helpers.h"
+#include "third_party/blink/renderer/platform/testing/url_loader_mock_factory.h"
 #include "third_party/blink/renderer/platform/testing/url_test_helpers.h"
-#include "third_party/blink/renderer/platform/testing/web_url_loader_mock_factory.h"
 #include "third_party/blink/renderer/platform/weborigin/kurl.h"
 #include "third_party/blink/renderer/platform/wtf/functional.h"
 #include "third_party/blink/renderer/platform/wtf/text/wtf_string.h"
@@ -37,7 +37,7 @@ class ThreadedIconLoaderTest : public PageTestBase {
   }
 
   void TearDown() override {
-    WebURLLoaderMockFactory::GetSingletonInstance()
+    URLLoaderMockFactory::GetSingletonInstance()
         ->UnregisterAllURLsAndClearMemoryCache();
   }
 
@@ -68,8 +68,7 @@ class ThreadedIconLoaderTest : public PageTestBase {
         WTF::BindOnce(&ThreadedIconLoaderTest::DidGetIcon,
                       WTF::Unretained(this), run_loop.QuitClosure(),
                       WTF::Unretained(&icon), WTF::Unretained(&resize_scale)));
-    WebURLLoaderMockFactory::GetSingletonInstance()
-        ->ServeAsynchronousRequests();
+    URLLoaderMockFactory::GetSingletonInstance()->ServeAsynchronousRequests();
     run_loop.Run();
 
     return {icon, resize_scale};
diff --git a/third_party/blink/renderer/core/loader/web_associated_url_loader_impl.cc b/third_party/blink/renderer/core/loader/web_associated_url_loader_impl.cc
index 089201449c2bb..91a53cc1f2cc4 100644
--- a/third_party/blink/renderer/core/loader/web_associated_url_loader_impl.cc
+++ b/third_party/blink/renderer/core/loader/web_associated_url_loader_impl.cc
@@ -517,9 +517,8 @@ void WebAssociatedURLLoaderImpl::DisposeObserver() {
   // ThreadState::current() is null. However, the fact we reached here
   // without cancelling the loader means that it's possible there're some
   // non-Blink non-on-heap objects still facing on-heap Blink objects. E.g.
-  // there could be a WebURLLoader instance behind the
-  // ThreadableLoader instance. So, for safety, we chose to just
-  // crash here.
+  // there could be a URLLoader instance behind the ThreadableLoader instance.
+  // So, for safety, we chose to just crash here.
   CHECK(ThreadState::Current());
 
   observer_->Dispose();
diff --git a/third_party/blink/renderer/core/loader/web_associated_url_loader_impl.h b/third_party/blink/renderer/core/loader/web_associated_url_loader_impl.h
index 9d131b7d92ebd..7b0beab974f7d 100644
--- a/third_party/blink/renderer/core/loader/web_associated_url_loader_impl.h
+++ b/third_party/blink/renderer/core/loader/web_associated_url_loader_impl.h
@@ -57,7 +57,7 @@ class CORE_EXPORT WebAssociatedURLLoaderImpl final
   WebAssociatedURLLoaderClient* client_;
   WebAssociatedURLLoaderOptions options_;
 
-  // Converts ThreadableLoaderClient method calls into WebURLLoaderClient method
+  // Converts ThreadableLoaderClient method calls into URLLoaderClient method
   // calls.
   Persistent<ClientAdapter> client_adapter_;
   Persistent<ThreadableLoader> loader_;
diff --git a/third_party/blink/renderer/core/loader/web_associated_url_loader_impl_test.cc b/third_party/blink/renderer/core/loader/web_associated_url_loader_impl_test.cc
index 21875db107608..684a078ababeb 100644
--- a/third_party/blink/renderer/core/loader/web_associated_url_loader_impl_test.cc
+++ b/third_party/blink/renderer/core/loader/web_associated_url_loader_impl_test.cc
@@ -47,8 +47,8 @@
 #include "third_party/blink/renderer/core/frame/web_local_frame_impl.h"
 #include "third_party/blink/renderer/platform/scheduler/public/thread.h"
 #include "third_party/blink/renderer/platform/testing/unit_test_helpers.h"
+#include "third_party/blink/renderer/platform/testing/url_loader_mock_factory.h"
 #include "third_party/blink/renderer/platform/testing/url_test_helpers.h"
-#include "third_party/blink/renderer/platform/testing/web_url_loader_mock_factory.h"
 #include "third_party/blink/renderer/platform/wtf/text/wtf_string.h"
 
 using blink::test::RunPendingTasks;
diff --git a/third_party/blink/renderer/core/loader/worker_fetch_context.cc b/third_party/blink/renderer/core/loader/worker_fetch_context.cc
index ed8568205a97e..b218b52bc992e 100644
--- a/third_party/blink/renderer/core/loader/worker_fetch_context.cc
+++ b/third_party/blink/renderer/core/loader/worker_fetch_context.cc
@@ -22,7 +22,7 @@
 #include "third_party/blink/renderer/platform/loader/fetch/resource_fetcher.h"
 #include "third_party/blink/renderer/platform/loader/fetch/resource_fetcher_properties.h"
 #include "third_party/blink/renderer/platform/loader/fetch/resource_timing_utils.h"
-#include "third_party/blink/renderer/platform/loader/fetch/url_loader/web_url_loader_factory.h"
+#include "third_party/blink/renderer/platform/loader/fetch/url_loader/url_loader_factory.h"
 #include "third_party/blink/renderer/platform/loader/fetch/worker_resource_timing_notifier.h"
 #include "third_party/blink/renderer/platform/network/network_state_notifier.h"
 #include "third_party/blink/renderer/platform/runtime_enabled_features.h"
diff --git a/third_party/blink/renderer/core/page/context_menu_controller_test.cc b/third_party/blink/renderer/core/page/context_menu_controller_test.cc
index 63500c7691c95..4d79591a011a6 100644
--- a/third_party/blink/renderer/core/page/context_menu_controller_test.cc
+++ b/third_party/blink/renderer/core/page/context_menu_controller_test.cc
@@ -47,9 +47,9 @@
 #include "third_party/blink/renderer/platform/testing/empty_web_media_player.h"
 #include "third_party/blink/renderer/platform/testing/scoped_mocked_url.h"
 #include "third_party/blink/renderer/platform/testing/unit_test_helpers.h"
+#include "third_party/blink/renderer/platform/testing/url_loader_mock.h"
+#include "third_party/blink/renderer/platform/testing/url_loader_mock_factory_impl.h"
 #include "third_party/blink/renderer/platform/testing/url_test_helpers.h"
-#include "third_party/blink/renderer/platform/testing/weburl_loader_mock.h"
-#include "third_party/blink/renderer/platform/testing/weburl_loader_mock_factory_impl.h"
 #include "third_party/blink/renderer/platform/wtf/casting.h"
 #include "ui/gfx/geometry/rect.h"
 
diff --git a/third_party/blink/renderer/core/page/scrolling/main_thread_scrolling_reasons_test.cc b/third_party/blink/renderer/core/page/scrolling/main_thread_scrolling_reasons_test.cc
index bbd1b29f09e42..7506cd24b1ff1 100644
--- a/third_party/blink/renderer/core/page/scrolling/main_thread_scrolling_reasons_test.cc
+++ b/third_party/blink/renderer/core/page/scrolling/main_thread_scrolling_reasons_test.cc
@@ -22,8 +22,8 @@
 #include "third_party/blink/renderer/platform/testing/find_cc_layer.h"
 #include "third_party/blink/renderer/platform/testing/paint_test_configurations.h"
 #include "third_party/blink/renderer/platform/testing/unit_test_helpers.h"
+#include "third_party/blink/renderer/platform/testing/url_loader_mock_factory.h"
 #include "third_party/blink/renderer/platform/testing/url_test_helpers.h"
-#include "third_party/blink/renderer/platform/testing/web_url_loader_mock_factory.h"
 
 namespace blink {
 
diff --git a/third_party/blink/renderer/core/page/scrolling/root_scroller_test.cc b/third_party/blink/renderer/core/page/scrolling/root_scroller_test.cc
index 98f7981794f20..00793360ea3a0 100644
--- a/third_party/blink/renderer/core/page/scrolling/root_scroller_test.cc
+++ b/third_party/blink/renderer/core/page/scrolling/root_scroller_test.cc
@@ -36,8 +36,8 @@
 #include "third_party/blink/renderer/core/testing/sim/sim_test.h"
 #include "third_party/blink/renderer/platform/testing/runtime_enabled_features_test_helpers.h"
 #include "third_party/blink/renderer/platform/testing/unit_test_helpers.h"
+#include "third_party/blink/renderer/platform/testing/url_loader_mock_factory.h"
 #include "third_party/blink/renderer/platform/testing/url_test_helpers.h"
-#include "third_party/blink/renderer/platform/testing/web_url_loader_mock_factory.h"
 #include "third_party/blink/renderer/platform/wtf/vector.h"
 
 using blink::test::RunPendingTasks;
diff --git a/third_party/blink/renderer/core/page/scrolling/scrolling_test.cc b/third_party/blink/renderer/core/page/scrolling/scrolling_test.cc
index 99f6cf8d9e587..04c423d29638d 100644
--- a/third_party/blink/renderer/core/page/scrolling/scrolling_test.cc
+++ b/third_party/blink/renderer/core/page/scrolling/scrolling_test.cc
@@ -66,8 +66,8 @@
 #include "third_party/blink/renderer/platform/testing/histogram_tester.h"
 #include "third_party/blink/renderer/platform/testing/paint_test_configurations.h"
 #include "third_party/blink/renderer/platform/testing/unit_test_helpers.h"
+#include "third_party/blink/renderer/platform/testing/url_loader_mock_factory.h"
 #include "third_party/blink/renderer/platform/testing/url_test_helpers.h"
-#include "third_party/blink/renderer/platform/testing/web_url_loader_mock_factory.h"
 #include "ui/base/ui_base_features.h"
 #include "ui/gfx/geometry/point.h"
 #include "ui/gfx/geometry/rect.h"
diff --git a/third_party/blink/renderer/core/page/viewport_test.cc b/third_party/blink/renderer/core/page/viewport_test.cc
index e5efbd8ab1057..6609aa42a542e 100644
--- a/third_party/blink/renderer/core/page/viewport_test.cc
+++ b/third_party/blink/renderer/core/page/viewport_test.cc
@@ -52,8 +52,8 @@
 #include "third_party/blink/renderer/platform/testing/histogram_tester.h"
 #include "third_party/blink/renderer/platform/testing/testing_platform_support.h"
 #include "third_party/blink/renderer/platform/testing/unit_test_helpers.h"
+#include "third_party/blink/renderer/platform/testing/url_loader_mock_factory.h"
 #include "third_party/blink/renderer/platform/testing/url_test_helpers.h"
-#include "third_party/blink/renderer/platform/testing/web_url_loader_mock_factory.h"
 #include "ui/base/ime/mojom/virtual_keyboard_types.mojom-blink.h"
 #include "ui/gfx/geometry/point.h"
 #include "ui/gfx/geometry/rect.h"
diff --git a/third_party/blink/renderer/core/paint/link_highlight_impl_test.cc b/third_party/blink/renderer/core/paint/link_highlight_impl_test.cc
index 5d9eb6b916063..59b53b48b81ca 100644
--- a/third_party/blink/renderer/core/paint/link_highlight_impl_test.cc
+++ b/third_party/blink/renderer/core/paint/link_highlight_impl_test.cc
@@ -50,8 +50,8 @@
 #include "third_party/blink/renderer/platform/heap/thread_state.h"
 #include "third_party/blink/renderer/platform/testing/paint_test_configurations.h"
 #include "third_party/blink/renderer/platform/testing/unit_test_helpers.h"
+#include "third_party/blink/renderer/platform/testing/url_loader_mock_factory.h"
 #include "third_party/blink/renderer/platform/testing/url_test_helpers.h"
-#include "third_party/blink/renderer/platform/testing/web_url_loader_mock_factory.h"
 #include "third_party/blink/renderer/platform/web_test_support.h"
 #include "ui/gfx/geometry/rect.h"
 
diff --git a/third_party/blink/renderer/core/scheduler_integration_tests/scheduler_affecting_features_test.cc b/third_party/blink/renderer/core/scheduler_integration_tests/scheduler_affecting_features_test.cc
index dde95e8a3bd18..116c794008354 100644
--- a/third_party/blink/renderer/core/scheduler_integration_tests/scheduler_affecting_features_test.cc
+++ b/third_party/blink/renderer/core/scheduler_integration_tests/scheduler_affecting_features_test.cc
@@ -14,7 +14,7 @@
 #include "third_party/blink/renderer/core/testing/sim/sim_request.h"
 #include "third_party/blink/renderer/core/testing/sim/sim_test.h"
 #include "third_party/blink/renderer/platform/scheduler/public/page_scheduler.h"
-#include "third_party/blink/renderer/platform/testing/web_url_loader_mock_factory.h"
+#include "third_party/blink/renderer/platform/testing/url_loader_mock_factory.h"
 
 using testing::_;
 
diff --git a/third_party/blink/renderer/core/svg/graphics/svg_image.cc b/third_party/blink/renderer/core/svg/graphics/svg_image.cc
index 4cfd6636c8b5d..1b0bd9057acc6 100644
--- a/third_party/blink/renderer/core/svg/graphics/svg_image.cc
+++ b/third_party/blink/renderer/core/svg/graphics/svg_image.cc
@@ -77,9 +77,9 @@
 #include "third_party/blink/renderer/platform/heap/garbage_collected.h"
 #include "third_party/blink/renderer/platform/instrumentation/histogram.h"
 #include "third_party/blink/renderer/platform/instrumentation/tracing/trace_event.h"
-#include "third_party/blink/renderer/platform/loader/fetch/url_loader/web_url_loader.h"
-#include "third_party/blink/renderer/platform/loader/fetch/url_loader/web_url_loader_client.h"
-#include "third_party/blink/renderer/platform/loader/fetch/url_loader/web_url_loader_factory.h"
+#include "third_party/blink/renderer/platform/loader/fetch/url_loader/url_loader.h"
+#include "third_party/blink/renderer/platform/loader/fetch/url_loader/url_loader_client.h"
+#include "third_party/blink/renderer/platform/loader/fetch/url_loader/url_loader_factory.h"
 #include "third_party/blink/renderer/platform/scheduler/public/main_thread.h"
 #include "third_party/blink/renderer/platform/scheduler/public/main_thread_scheduler.h"
 #include "third_party/blink/renderer/platform/wtf/functional.h"
diff --git a/third_party/blink/renderer/core/testing/dummy_page_holder.cc b/third_party/blink/renderer/core/testing/dummy_page_holder.cc
index 0a80e676885ee..6f53ef6e0c648 100644
--- a/third_party/blink/renderer/core/testing/dummy_page_holder.cc
+++ b/third_party/blink/renderer/core/testing/dummy_page_holder.cc
@@ -49,7 +49,7 @@
 #include "third_party/blink/renderer/platform/scheduler/public/agent_group_scheduler.h"
 #include "third_party/blink/renderer/platform/scheduler/public/main_thread.h"
 #include "third_party/blink/renderer/platform/scheduler/public/main_thread_scheduler.h"
-#include "third_party/blink/renderer/platform/testing/web_url_loader_mock_factory.h"
+#include "third_party/blink/renderer/platform/testing/url_loader_mock_factory.h"
 
 namespace blink {
 
@@ -60,8 +60,8 @@ class DummyLocalFrameClient : public EmptyLocalFrameClient {
   DummyLocalFrameClient() = default;
 
  private:
-  std::unique_ptr<WebURLLoader> CreateURLLoaderForTesting() override {
-    return WebURLLoaderMockFactory::GetSingletonInstance()->CreateURLLoader();
+  std::unique_ptr<URLLoader> CreateURLLoaderForTesting() override {
+    return URLLoaderMockFactory::GetSingletonInstance()->CreateURLLoader();
   }
 };
 
diff --git a/third_party/blink/renderer/core/testing/no_network_web_url_loader.h b/third_party/blink/renderer/core/testing/no_network_url_loader.h
similarity index 71%
rename from third_party/blink/renderer/core/testing/no_network_web_url_loader.h
rename to third_party/blink/renderer/core/testing/no_network_url_loader.h
index 0fdbbb1962c04..7b412be4120c9 100644
--- a/third_party/blink/renderer/core/testing/no_network_web_url_loader.h
+++ b/third_party/blink/renderer/core/testing/no_network_url_loader.h
@@ -2,33 +2,33 @@
 // Use of this source code is governed by a BSD-style license that can be
 // found in the LICENSE file.
 
-#ifndef THIRD_PARTY_BLINK_RENDERER_CORE_TESTING_NO_NETWORK_WEB_URL_LOADER_H_
-#define THIRD_PARTY_BLINK_RENDERER_CORE_TESTING_NO_NETWORK_WEB_URL_LOADER_H_
+#ifndef THIRD_PARTY_BLINK_RENDERER_CORE_TESTING_NO_NETWORK_URL_LOADER_H_
+#define THIRD_PARTY_BLINK_RENDERER_CORE_TESTING_NO_NETWORK_URL_LOADER_H_
 
 #include "base/task/single_thread_task_runner.h"
 #include "services/network/public/cpp/resource_request.h"
 #include "third_party/blink/renderer/core/loader/empty_clients.h"
-#include "third_party/blink/renderer/platform/loader/fetch/url_loader/web_url_loader.h"
+#include "third_party/blink/renderer/platform/loader/fetch/url_loader/url_loader.h"
 #include "third_party/blink/renderer/platform/scheduler/test/fake_task_runner.h"
 
 namespace blink {
 
-// A WebURLLoader simulating that requests time out forever due to no network.
+// A URLLoader simulating that requests time out forever due to no network.
 // Useful for perftests that don't really want to benchmark URL loading.
-class NoNetworkWebURLLoader : public WebURLLoader {
+class NoNetworkURLLoader : public URLLoader {
  public:
-  NoNetworkWebURLLoader() = default;
-  NoNetworkWebURLLoader(const NoNetworkWebURLLoader&) = delete;
-  NoNetworkWebURLLoader& operator=(const NoNetworkWebURLLoader&) = delete;
+  NoNetworkURLLoader() = default;
+  NoNetworkURLLoader(const NoNetworkURLLoader&) = delete;
+  NoNetworkURLLoader& operator=(const NoNetworkURLLoader&) = delete;
 
-  // WebURLLoader member functions:
+  // URLLoader member functions:
   void LoadSynchronously(
       std::unique_ptr<network::ResourceRequest> request,
       scoped_refptr<WebURLRequestExtraData> url_request_extra_data,
       bool pass_response_pipe_to_client,
       bool no_mime_sniffing,
       base::TimeDelta timeout_interval,
-      WebURLLoaderClient* client,
+      URLLoaderClient* client,
       WebURLResponse& response,
       absl::optional<WebURLError>&,
       WebData&,
@@ -46,7 +46,7 @@ class NoNetworkWebURLLoader : public WebURLLoader {
       bool no_mime_sniffing,
       std::unique_ptr<blink::ResourceLoadInfoNotifierWrapper>
           resource_load_info_notifier_wrapper,
-      WebURLLoaderClient* client) override {
+      URLLoaderClient* client) override {
     // We simply never call back, simulating load times that are larger
     // than the test runtime.
   }
@@ -63,18 +63,18 @@ class NoNetworkWebURLLoader : public WebURLLoader {
   }
 };
 
-// A LocalFrameClient that uses NoNetworkWebURLLoader, so that nothing external
+// A LocalFrameClient that uses NoNetworkURLLoader, so that nothing external
 // is ever loaded.
 class NoNetworkLocalFrameClient : public EmptyLocalFrameClient {
  public:
   NoNetworkLocalFrameClient() = default;
 
  private:
-  std::unique_ptr<WebURLLoader> CreateURLLoaderForTesting() override {
-    return std::make_unique<NoNetworkWebURLLoader>();
+  std::unique_ptr<URLLoader> CreateURLLoaderForTesting() override {
+    return std::make_unique<NoNetworkURLLoader>();
   }
 };
 
 }  // namespace blink
 
-#endif  // THIRD_PARTY_BLINK_RENDERER_CORE_TESTING_NO_NETWORK_WEB_URL_LOADER_H_
+#endif  // THIRD_PARTY_BLINK_RENDERER_CORE_TESTING_NO_NETWORK_URL_LOADER_H_
diff --git a/third_party/blink/renderer/core/testing/sim/sim_network.cc b/third_party/blink/renderer/core/testing/sim/sim_network.cc
index eabb533422d17..b57f214a2c407 100644
--- a/third_party/blink/renderer/core/testing/sim/sim_network.cc
+++ b/third_party/blink/renderer/core/testing/sim/sim_network.cc
@@ -11,11 +11,11 @@
 #include "third_party/blink/public/web/web_navigation_params.h"
 #include "third_party/blink/renderer/core/loader/document_loader.h"
 #include "third_party/blink/renderer/core/testing/sim/sim_request.h"
-#include "third_party/blink/renderer/platform/loader/fetch/url_loader/web_url_loader.h"
-#include "third_party/blink/renderer/platform/loader/fetch/url_loader/web_url_loader_client.h"
+#include "third_party/blink/renderer/platform/loader/fetch/url_loader/url_loader.h"
+#include "third_party/blink/renderer/platform/loader/fetch/url_loader/url_loader_client.h"
 #include "third_party/blink/renderer/platform/loader/static_data_navigation_body_loader.h"
+#include "third_party/blink/renderer/platform/testing/url_loader_mock_factory.h"
 #include "third_party/blink/renderer/platform/testing/url_test_helpers.h"
-#include "third_party/blink/renderer/platform/testing/web_url_loader_mock_factory.h"
 
 namespace blink {
 
@@ -46,7 +46,7 @@ void SimNetwork::ServePendingRequests() {
   url_test_helpers::ServeAsynchronousRequests();
 }
 
-void SimNetwork::DidReceiveResponse(WebURLLoaderClient* client,
+void SimNetwork::DidReceiveResponse(URLLoaderClient* client,
                                     const WebURLResponse& response) {
   auto it = requests_.find(response.CurrentRequestUrl().GetString());
   if (it == requests_.end()) {
@@ -58,14 +58,14 @@ void SimNetwork::DidReceiveResponse(WebURLLoaderClient* client,
   current_request_->DidReceiveResponse(client, response);
 }
 
-void SimNetwork::DidReceiveData(WebURLLoaderClient* client,
+void SimNetwork::DidReceiveData(URLLoaderClient* client,
                                 const char* data,
                                 size_t data_length) {
   if (!current_request_)
     client->DidReceiveData(data, data_length);
 }
 
-void SimNetwork::DidFail(WebURLLoaderClient* client,
+void SimNetwork::DidFail(URLLoaderClient* client,
                          const WebURLError& error,
                          int64_t total_encoded_data_length,
                          int64_t total_encoded_body_length,
@@ -78,7 +78,7 @@ void SimNetwork::DidFail(WebURLLoaderClient* client,
   current_request_->DidFail(error);
 }
 
-void SimNetwork::DidFinishLoading(WebURLLoaderClient* client,
+void SimNetwork::DidFinishLoading(URLLoaderClient* client,
                                   base::TimeTicks finish_time,
                                   int64_t total_encoded_data_length,
                                   int64_t total_encoded_body_length,
diff --git a/third_party/blink/renderer/core/testing/sim/sim_network.h b/third_party/blink/renderer/core/testing/sim/sim_network.h
index d94e3a15e7095..4bd3564a20f92 100644
--- a/third_party/blink/renderer/core/testing/sim/sim_network.h
+++ b/third_party/blink/renderer/core/testing/sim/sim_network.h
@@ -5,7 +5,7 @@
 #ifndef THIRD_PARTY_BLINK_RENDERER_CORE_TESTING_SIM_SIM_NETWORK_H_
 #define THIRD_PARTY_BLINK_RENDERER_CORE_TESTING_SIM_SIM_NETWORK_H_
 
-#include "third_party/blink/renderer/platform/testing/web_url_loader_test_delegate.h"
+#include "third_party/blink/renderer/platform/testing/url_loader_test_delegate.h"
 #include "third_party/blink/renderer/platform/wtf/hash_map.h"
 #include "third_party/blink/renderer/platform/wtf/text/string_hash.h"
 #include "third_party/blink/renderer/platform/wtf/text/wtf_string.h"
@@ -13,13 +13,13 @@
 namespace blink {
 
 class SimRequestBase;
-class WebURLLoaderClient;
+class URLLoaderClient;
 class WebURLResponse;
 
 // Simulates a network with precise flow control so you can make requests
 // return, write data, and finish in a specific order in a unit test. One of
 // these must be created before using the SimRequestBase to issue requests.
-class SimNetwork final : public WebURLLoaderTestDelegate {
+class SimNetwork final : public URLLoaderTestDelegate {
  public:
   SimNetwork();
   ~SimNetwork() override;
@@ -34,17 +34,17 @@ class SimNetwork final : public WebURLLoaderTestDelegate {
   void AddRequest(SimRequestBase&);
   void RemoveRequest(SimRequestBase&);
 
-  // WebURLLoaderTestDelegate
-  void DidReceiveResponse(WebURLLoaderClient*, const WebURLResponse&) override;
-  void DidReceiveData(WebURLLoaderClient*,
+  // URLLoaderTestDelegate
+  void DidReceiveResponse(URLLoaderClient*, const WebURLResponse&) override;
+  void DidReceiveData(URLLoaderClient*,
                       const char* data,
                       size_t data_length) override;
-  void DidFail(WebURLLoaderClient*,
+  void DidFail(URLLoaderClient*,
                const WebURLError&,
                int64_t total_encoded_data_length,
                int64_t total_encoded_body_length,
                int64_t total_decoded_body_length) override;
-  void DidFinishLoading(WebURLLoaderClient*,
+  void DidFinishLoading(URLLoaderClient*,
                         base::TimeTicks finish_time,
                         int64_t total_encoded_data_length,
                         int64_t total_encoded_body_length,
diff --git a/third_party/blink/renderer/core/testing/sim/sim_request.cc b/third_party/blink/renderer/core/testing/sim/sim_request.cc
index d8478fe1caf6a..2a5090f957949 100644
--- a/third_party/blink/renderer/core/testing/sim/sim_request.cc
+++ b/third_party/blink/renderer/core/testing/sim/sim_request.cc
@@ -5,7 +5,7 @@
 #include "third_party/blink/renderer/core/testing/sim/sim_request.h"
 
 #include "third_party/blink/renderer/core/testing/sim/sim_network.h"
-#include "third_party/blink/renderer/platform/loader/fetch/url_loader/web_url_loader_client.h"
+#include "third_party/blink/renderer/platform/loader/fetch/url_loader/url_loader_client.h"
 #include "third_party/blink/renderer/platform/loader/static_data_navigation_body_loader.h"
 #include "third_party/blink/renderer/platform/weborigin/kurl.h"
 #include "third_party/blink/renderer/platform/wtf/text/string_utf8_adaptor.h"
@@ -22,9 +22,6 @@ SimRequestBase::SimRequestBase(KURL url,
       referrer_(params.referrer),
       requestor_origin_(params.requestor_origin),
       start_immediately_(start_immediately),
-      started_(false),
-      client_(nullptr),
-      total_encoded_data_length_(0),
       response_http_headers_(params.response_http_headers),
       response_http_status_(params.response_http_status) {
   SimNetwork::Current().AddRequest(*this);
@@ -35,7 +32,7 @@ SimRequestBase::~SimRequestBase() {
   DCHECK(!navigation_body_loader_);
 }
 
-void SimRequestBase::DidReceiveResponse(WebURLLoaderClient* client,
+void SimRequestBase::DidReceiveResponse(URLLoaderClient* client,
                                         const WebURLResponse& response) {
   DCHECK(!navigation_body_loader_);
   client_ = client;
diff --git a/third_party/blink/renderer/core/testing/sim/sim_request.h b/third_party/blink/renderer/core/testing/sim/sim_request.h
index 73bc89830abe7..ac51b74bb1830 100644
--- a/third_party/blink/renderer/core/testing/sim/sim_request.h
+++ b/third_party/blink/renderer/core/testing/sim/sim_request.h
@@ -19,7 +19,7 @@ namespace blink {
 
 class SimNetwork;
 class StaticDataNavigationBodyLoader;
-class WebURLLoaderClient;
+class URLLoaderClient;
 
 // Simulates a single request for a resource from the server. Requires a
 // SimNetwork to have been created first. Use the Write(), Finish() and
@@ -82,7 +82,7 @@ class SimRequestBase {
   void WriteInternal(base::span<const char>);
 
   // Used by SimNetwork.
-  void DidReceiveResponse(WebURLLoaderClient*, const WebURLResponse&);
+  void DidReceiveResponse(URLLoaderClient*, const WebURLResponse&);
   void DidFail(const WebURLError&);
   void UsedForNavigation(StaticDataNavigationBodyLoader*);
 
@@ -92,11 +92,11 @@ class SimRequestBase {
   String referrer_;
   WebSecurityOrigin requestor_origin_;
   const bool start_immediately_;
-  bool started_;
+  bool started_ = false;
   WebURLResponse response_;
   absl::optional<WebURLError> error_;
-  WebURLLoaderClient* client_;
-  unsigned total_encoded_data_length_;
+  URLLoaderClient* client_ = nullptr;
+  unsigned total_encoded_data_length_ = 0;
   WTF::HashMap<String, String> response_http_headers_;
   int response_http_status_;
   StaticDataNavigationBodyLoader* navigation_body_loader_ = nullptr;
diff --git a/third_party/blink/renderer/core/workers/worklet_module_responses_map_test.cc b/third_party/blink/renderer/core/workers/worklet_module_responses_map_test.cc
index 1f6d29549c0ff..80ae9bb8b757c 100644
--- a/third_party/blink/renderer/core/workers/worklet_module_responses_map_test.cc
+++ b/third_party/blink/renderer/core/workers/worklet_module_responses_map_test.cc
@@ -19,8 +19,8 @@
 #include "third_party/blink/renderer/platform/testing/mock_context_lifecycle_notifier.h"
 #include "third_party/blink/renderer/platform/testing/testing_platform_support.h"
 #include "third_party/blink/renderer/platform/testing/unit_test_helpers.h"
+#include "third_party/blink/renderer/platform/testing/url_loader_mock_factory.h"
 #include "third_party/blink/renderer/platform/testing/url_test_helpers.h"
-#include "third_party/blink/renderer/platform/testing/web_url_loader_mock_factory.h"
 #include "third_party/blink/renderer/platform/weborigin/kurl.h"
 #include "third_party/blink/renderer/platform/wtf/functional.h"
 
diff --git a/third_party/blink/renderer/modules/background_fetch/background_fetch_icon_loader_test.cc b/third_party/blink/renderer/modules/background_fetch/background_fetch_icon_loader_test.cc
index 3f2df67d9a90c..85ef42e7ed452 100644
--- a/third_party/blink/renderer/modules/background_fetch/background_fetch_icon_loader_test.cc
+++ b/third_party/blink/renderer/modules/background_fetch/background_fetch_icon_loader_test.cc
@@ -16,8 +16,8 @@
 #include "third_party/blink/renderer/platform/heap/persistent.h"
 #include "third_party/blink/renderer/platform/testing/testing_platform_support.h"
 #include "third_party/blink/renderer/platform/testing/unit_test_helpers.h"
+#include "third_party/blink/renderer/platform/testing/url_loader_mock_factory.h"
 #include "third_party/blink/renderer/platform/testing/url_test_helpers.h"
-#include "third_party/blink/renderer/platform/testing/web_url_loader_mock_factory.h"
 #include "third_party/blink/renderer/platform/weborigin/kurl.h"
 
 namespace blink {
@@ -45,7 +45,7 @@ class BackgroundFetchIconLoaderTest : public PageTestBase {
       : loader_(MakeGarbageCollected<BackgroundFetchIconLoader>()) {}
   ~BackgroundFetchIconLoaderTest() override {
     loader_->Stop();
-    WebURLLoaderMockFactory::GetSingletonInstance()
+    URLLoaderMockFactory::GetSingletonInstance()
         ->UnregisterAllURLsAndClearMemoryCache();
   }
 
@@ -136,7 +136,7 @@ TEST_F(BackgroundFetchIconLoaderTest, SuccessTest) {
   LoadIcon(KURL(kBackgroundFetchImageLoaderIcon500x500FullPath), maximum_size,
            run_loop.QuitClosure());
 
-  WebURLLoaderMockFactory::GetSingletonInstance()->ServeAsynchronousRequests();
+  URLLoaderMockFactory::GetSingletonInstance()->ServeAsynchronousRequests();
 
   run_loop.Run();
 
@@ -196,7 +196,7 @@ TEST_F(BackgroundFetchIconLoaderTest, EmptySizes) {
   LoadIcon(KURL(kBackgroundFetchImageLoaderIcon500x500FullPath), maximum_size,
            run_loop.QuitClosure(), "", "ANY");
 
-  WebURLLoaderMockFactory::GetSingletonInstance()->ServeAsynchronousRequests();
+  URLLoaderMockFactory::GetSingletonInstance()->ServeAsynchronousRequests();
 
   run_loop.Run();
 
@@ -211,7 +211,7 @@ TEST_F(BackgroundFetchIconLoaderTest, EmptyPurpose) {
   LoadIcon(KURL(kBackgroundFetchImageLoaderIcon500x500FullPath), maximum_size,
            run_loop.QuitClosure(), "500X500", "");
 
-  WebURLLoaderMockFactory::GetSingletonInstance()->ServeAsynchronousRequests();
+  URLLoaderMockFactory::GetSingletonInstance()->ServeAsynchronousRequests();
 
   run_loop.Run();
 
diff --git a/third_party/blink/renderer/modules/image_downloader/multi_resolution_image_resource_fetcher.h b/third_party/blink/renderer/modules/image_downloader/multi_resolution_image_resource_fetcher.h
index ad85cc3819a5d..10f099e365fa9 100644
--- a/third_party/blink/renderer/modules/image_downloader/multi_resolution_image_resource_fetcher.h
+++ b/third_party/blink/renderer/modules/image_downloader/multi_resolution_image_resource_fetcher.h
@@ -71,7 +71,7 @@ class MultiResolutionImageResourceFetcher {
   void SetSkipServiceWorker(bool skip_service_worker);
   void SetCacheMode(mojom::FetchCacheMode mode);
 
-  // Associate the corresponding WebURLLoaderOptions to the loader. Must be
+  // Associate the corresponding URLLoaderOptions to the loader. Must be
   // called before Start. Used if the LoaderType is FRAME_ASSOCIATED_LOADER.
   void SetLoaderOptions(const WebAssociatedURLLoaderOptions& options);
 
diff --git a/third_party/blink/renderer/modules/indexeddb/idb_request_test.cc b/third_party/blink/renderer/modules/indexeddb/idb_request_test.cc
index 3a704c41b214a..e9c252f626e8b 100644
--- a/third_party/blink/renderer/modules/indexeddb/idb_request_test.cc
+++ b/third_party/blink/renderer/modules/indexeddb/idb_request_test.cc
@@ -62,7 +62,7 @@
 #include "third_party/blink/renderer/platform/bindings/script_state.h"
 #include "third_party/blink/renderer/platform/heap/garbage_collected.h"
 #include "third_party/blink/renderer/platform/testing/testing_platform_support.h"
-#include "third_party/blink/renderer/platform/testing/web_url_loader_mock_factory.h"
+#include "third_party/blink/renderer/platform/testing/url_loader_mock_factory.h"
 #include "third_party/blink/renderer/platform/wtf/functional.h"
 #include "third_party/blink/renderer/platform/wtf/shared_buffer.h"
 #include "third_party/blink/renderer/platform/wtf/vector.h"
@@ -171,7 +171,7 @@ class BackendDatabaseWithMockedClose
 class IDBRequestTest : public testing::Test {
  protected:
   void SetUp() override {
-    url_loader_mock_factory_ = WebURLLoaderMockFactory::GetSingletonInstance();
+    url_loader_mock_factory_ = URLLoaderMockFactory::GetSingletonInstance();
     WebURLResponse response;
     response.SetCurrentRequestUrl(KURL("blob:"));
     url_loader_mock_factory_->RegisterURLProtocol(WebString("blob"), response,
@@ -210,7 +210,7 @@ class IDBRequestTest : public testing::Test {
     store_ = MakeGarbageCollected<IDBObjectStore>(store_metadata, transaction_);
   }
 
-  WebURLLoaderMockFactory* url_loader_mock_factory_;
+  URLLoaderMockFactory* url_loader_mock_factory_;
   Persistent<IDBDatabase> db_;
   Persistent<IDBTransaction> transaction_;
   Persistent<IDBObjectStore> store_;
diff --git a/third_party/blink/renderer/modules/indexeddb/idb_transaction_test.cc b/third_party/blink/renderer/modules/indexeddb/idb_transaction_test.cc
index ffa23924919bb..d0b61191edb2a 100644
--- a/third_party/blink/renderer/modules/indexeddb/idb_transaction_test.cc
+++ b/third_party/blink/renderer/modules/indexeddb/idb_transaction_test.cc
@@ -57,7 +57,7 @@
 #include "third_party/blink/renderer/platform/bindings/v8_per_isolate_data.h"
 #include "third_party/blink/renderer/platform/heap/garbage_collected.h"
 #include "third_party/blink/renderer/platform/testing/testing_platform_support.h"
-#include "third_party/blink/renderer/platform/testing/web_url_loader_mock_factory.h"
+#include "third_party/blink/renderer/platform/testing/url_loader_mock_factory.h"
 #include "third_party/blink/renderer/platform/wtf/shared_buffer.h"
 #include "v8/include/v8.h"
 
@@ -68,7 +68,7 @@ class IDBTransactionTest : public testing::Test,
                            public ScopedMockOverlayScrollbars {
  protected:
   void SetUp() override {
-    url_loader_mock_factory_ = WebURLLoaderMockFactory::GetSingletonInstance();
+    url_loader_mock_factory_ = URLLoaderMockFactory::GetSingletonInstance();
     WebURLResponse response;
     response.SetCurrentRequestUrl(KURL("blob:"));
     url_loader_mock_factory_->RegisterURLProtocol(WebString("blob"), response,
@@ -107,7 +107,7 @@ class IDBTransactionTest : public testing::Test,
     store_ = MakeGarbageCollected<IDBObjectStore>(store_metadata, transaction_);
   }
 
-  WebURLLoaderMockFactory* url_loader_mock_factory_;
+  URLLoaderMockFactory* url_loader_mock_factory_;
   Persistent<IDBDatabase> db_;
   Persistent<IDBTransaction> transaction_;
   Persistent<IDBObjectStore> store_;
diff --git a/third_party/blink/renderer/modules/notifications/notification_resources_loader_test.cc b/third_party/blink/renderer/modules/notifications/notification_resources_loader_test.cc
index 1968159bcb76b..1471f5d27fd31 100644
--- a/third_party/blink/renderer/modules/notifications/notification_resources_loader_test.cc
+++ b/third_party/blink/renderer/modules/notifications/notification_resources_loader_test.cc
@@ -16,8 +16,8 @@
 #include "third_party/blink/renderer/platform/loader/fetch/memory_cache.h"
 #include "third_party/blink/renderer/platform/testing/testing_platform_support.h"
 #include "third_party/blink/renderer/platform/testing/unit_test_helpers.h"
+#include "third_party/blink/renderer/platform/testing/url_loader_mock_factory.h"
 #include "third_party/blink/renderer/platform/testing/url_test_helpers.h"
-#include "third_party/blink/renderer/platform/testing/web_url_loader_mock_factory.h"
 #include "third_party/blink/renderer/platform/weborigin/kurl.h"
 #include "third_party/blink/renderer/platform/wtf/functional.h"
 #include "third_party/blink/renderer/platform/wtf/text/wtf_string.h"
@@ -44,7 +44,7 @@ class NotificationResourcesLoaderTest : public PageTestBase {
 
   ~NotificationResourcesLoaderTest() override {
     loader_->Stop();
-    WebURLLoaderMockFactory::GetSingletonInstance()
+    URLLoaderMockFactory::GetSingletonInstance()
         ->UnregisterAllURLsAndClearMemoryCache();
   }
 
@@ -71,8 +71,7 @@ class NotificationResourcesLoaderTest : public PageTestBase {
     base::RunLoop run_loop;
     resources_loaded_closure_ = run_loop.QuitClosure();
     Loader()->Start(GetExecutionContext(), notification_data);
-    WebURLLoaderMockFactory::GetSingletonInstance()
-        ->ServeAsynchronousRequests();
+    URLLoaderMockFactory::GetSingletonInstance()->ServeAsynchronousRequests();
     run_loop.Run();
   }
 
@@ -281,7 +280,7 @@ TEST_F(NotificationResourcesLoaderTest, StopYieldsNoResources) {
   // The loader would stop e.g. when the execution context is destroyed or
   // when the loader is about to be destroyed, as a pre-finalizer.
   Loader()->Stop();
-  WebURLLoaderMockFactory::GetSingletonInstance()->ServeAsynchronousRequests();
+  URLLoaderMockFactory::GetSingletonInstance()->ServeAsynchronousRequests();
 
   // Loading should have been cancelled when |stop| was called so no resources
   // should have been received by the test even though
diff --git a/third_party/blink/renderer/modules/service_worker/web_embedded_worker_impl_test.cc b/third_party/blink/renderer/modules/service_worker/web_embedded_worker_impl_test.cc
index 0dfc79e43357a..58c3eb9e0a651 100644
--- a/third_party/blink/renderer/modules/service_worker/web_embedded_worker_impl_test.cc
+++ b/third_party/blink/renderer/modules/service_worker/web_embedded_worker_impl_test.cc
@@ -36,25 +36,25 @@
 #include "third_party/blink/public/web/modules/service_worker/web_service_worker_context_proxy.h"
 #include "third_party/blink/public/web/web_embedded_worker_start_data.h"
 #include "third_party/blink/renderer/platform/loader/fetch/resource_error.h"
-#include "third_party/blink/renderer/platform/loader/fetch/url_loader/web_url_loader_client.h"
-#include "third_party/blink/renderer/platform/loader/fetch/url_loader/web_url_loader_factory.h"
+#include "third_party/blink/renderer/platform/loader/fetch/url_loader/url_loader_client.h"
+#include "third_party/blink/renderer/platform/loader/fetch/url_loader/url_loader_factory.h"
 #include "third_party/blink/renderer/platform/scheduler/public/thread.h"
 #include "third_party/blink/renderer/platform/scheduler/test/fake_task_runner.h"
 #include "third_party/blink/renderer/platform/testing/testing_platform_support.h"
 #include "third_party/blink/renderer/platform/testing/unit_test_helpers.h"
+#include "third_party/blink/renderer/platform/testing/url_loader_mock_factory.h"
 #include "third_party/blink/renderer/platform/testing/url_test_helpers.h"
-#include "third_party/blink/renderer/platform/testing/web_url_loader_mock_factory.h"
 
 namespace blink {
 namespace {
 
 const char* kNotFoundScriptURL = "https://www.example.com/sw-404.js";
 
-// A fake WebURLLoader which is used for off-main-thread script fetch tests.
-class FakeWebURLLoader final : public WebURLLoader {
+// A fake URLLoader which is used for off-main-thread script fetch tests.
+class FakeURLLoader final : public URLLoader {
  public:
-  FakeWebURLLoader() = default;
-  ~FakeWebURLLoader() override = default;
+  FakeURLLoader() = default;
+  ~FakeURLLoader() override = default;
 
   void LoadSynchronously(
       std::unique_ptr<network::ResourceRequest> request,
@@ -62,7 +62,7 @@ class FakeWebURLLoader final : public WebURLLoader {
       bool pass_response_pipe_to_client,
       bool no_mime_sniffing,
       base::TimeDelta timeout_interval,
-      WebURLLoaderClient*,
+      URLLoaderClient*,
       WebURLResponse&,
       absl::optional<WebURLError>&,
       WebData&,
@@ -80,7 +80,7 @@ class FakeWebURLLoader final : public WebURLLoader {
       bool no_mime_sniffing,
       std::unique_ptr<blink::ResourceLoadInfoNotifierWrapper>
           resource_load_info_notifier_wrapper,
-      WebURLLoaderClient* client) override {
+      URLLoaderClient* client) override {
     if (request->url.spec() == kNotFoundScriptURL) {
       WebURLResponse response;
       response.SetMimeType("text/javascript");
@@ -100,17 +100,16 @@ class FakeWebURLLoader final : public WebURLLoader {
   }
 };
 
-// A fake WebURLLoaderFactory which is used for off-main-thread script fetch
-// tests.
-class FakeWebURLLoaderFactory final : public WebURLLoaderFactory {
+// A fake URLLoaderFactory which is used for off-main-thread script fetch tests.
+class FakeURLLoaderFactory final : public URLLoaderFactory {
  public:
-  std::unique_ptr<WebURLLoader> CreateURLLoader(
+  std::unique_ptr<URLLoader> CreateURLLoader(
       const WebURLRequest&,
       scoped_refptr<base::SingleThreadTaskRunner>,
       scoped_refptr<base::SingleThreadTaskRunner>,
       mojo::PendingRemote<mojom::blink::KeepAliveHandle>,
       BackForwardCacheLoaderHelper*) override {
-    return std::make_unique<FakeWebURLLoader>();
+    return std::make_unique<FakeURLLoader>();
   }
 };
 
@@ -121,10 +120,10 @@ class FakeWebServiceWorkerFetchContext final
  public:
   void SetTerminateSyncLoadEvent(base::WaitableEvent*) override {}
   void InitializeOnWorkerThread(AcceptLanguagesWatcher*) override {}
-  WebURLLoaderFactory* GetURLLoaderFactory() override {
-    return &fake_web_url_loader_factory_;
+  URLLoaderFactory* GetURLLoaderFactory() override {
+    return &fake_url_loader_factory_;
   }
-  std::unique_ptr<WebURLLoaderFactory> WrapURLLoaderFactory(
+  std::unique_ptr<URLLoaderFactory> WrapURLLoaderFactory(
       CrossVariantMojoRemote<network::mojom::URLLoaderFactoryInterfaceBase>
           url_loader_factory) override {
     return nullptr;
@@ -144,7 +143,7 @@ class FakeWebServiceWorkerFetchContext final
   void SetIsOfflineMode(bool is_offline_mode) override {}
 
  private:
-  FakeWebURLLoaderFactory fake_web_url_loader_factory_;
+  FakeURLLoaderFactory fake_url_loader_factory_;
 };
 
 class FakeBrowserInterfaceBroker final
diff --git a/third_party/blink/renderer/modules/service_worker/web_service_worker_fetch_context_impl.cc b/third_party/blink/renderer/modules/service_worker/web_service_worker_fetch_context_impl.cc
index 948f3f7f4f6fd..72fc7ff5c9e82 100644
--- a/third_party/blink/renderer/modules/service_worker/web_service_worker_fetch_context_impl.cc
+++ b/third_party/blink/renderer/modules/service_worker/web_service_worker_fetch_context_impl.cc
@@ -13,8 +13,8 @@
 #include "third_party/blink/public/platform/url_loader_throttle_provider.h"
 #include "third_party/blink/public/platform/web_url_request_extra_data.h"
 #include "third_party/blink/public/platform/websocket_handshake_throttle_provider.h"
-#include "third_party/blink/renderer/platform/loader/fetch/url_loader/web_url_loader_factory.h"
-#include "third_party/blink/renderer/platform/loader/internet_disconnected_web_url_loader.h"
+#include "third_party/blink/renderer/platform/loader/fetch/url_loader/url_loader_factory.h"
+#include "third_party/blink/renderer/platform/loader/internet_disconnected_url_loader.h"
 
 namespace blink {
 
@@ -101,16 +101,16 @@ void WebServiceWorkerFetchContextImpl::InitializeOnWorkerThread(
   subresource_loader_updater_.Bind(
       std::move(pending_subresource_loader_updater_));
 
-  web_url_loader_factory_ = std::make_unique<WebURLLoaderFactory>(
+  url_loader_factory_ = std::make_unique<URLLoaderFactory>(
       network::SharedURLLoaderFactory::Create(
           std::move(pending_url_loader_factory_)),
       cors_exempt_header_list_, terminate_sync_load_event_);
 
-  internet_disconnected_web_url_loader_factory_ =
-      std::make_unique<InternetDisconnectedWebURLLoaderFactory>();
+  internet_disconnected_url_loader_factory_ =
+      std::make_unique<InternetDisconnectedURLLoaderFactory>();
 
   if (pending_script_loader_factory_) {
-    web_script_loader_factory_ = std::make_unique<WebURLLoaderFactory>(
+    web_script_loader_factory_ = std::make_unique<URLLoaderFactory>(
         network::SharedURLLoaderFactory::Create(
             std::move(pending_script_loader_factory_)),
         cors_exempt_header_list_, terminate_sync_load_event_);
@@ -119,24 +119,23 @@ void WebServiceWorkerFetchContextImpl::InitializeOnWorkerThread(
   accept_languages_watcher_ = watcher;
 }
 
-WebURLLoaderFactory* WebServiceWorkerFetchContextImpl::GetURLLoaderFactory() {
+URLLoaderFactory* WebServiceWorkerFetchContextImpl::GetURLLoaderFactory() {
   if (is_offline_mode_)
-    return internet_disconnected_web_url_loader_factory_.get();
-  return web_url_loader_factory_.get();
+    return internet_disconnected_url_loader_factory_.get();
+  return url_loader_factory_.get();
 }
 
-std::unique_ptr<WebURLLoaderFactory>
+std::unique_ptr<URLLoaderFactory>
 WebServiceWorkerFetchContextImpl::WrapURLLoaderFactory(
     CrossVariantMojoRemote<network::mojom::URLLoaderFactoryInterfaceBase>
         url_loader_factory) {
-  return std::make_unique<WebURLLoaderFactory>(
+  return std::make_unique<URLLoaderFactory>(
       base::MakeRefCounted<network::WrapperSharedURLLoaderFactory>(
           std::move(url_loader_factory)),
       cors_exempt_header_list_, terminate_sync_load_event_);
 }
 
-WebURLLoaderFactory*
-WebServiceWorkerFetchContextImpl::GetScriptLoaderFactory() {
+URLLoaderFactory* WebServiceWorkerFetchContextImpl::GetScriptLoaderFactory() {
   return web_script_loader_factory_.get();
 }
 
@@ -205,7 +204,7 @@ WebServiceWorkerFetchContextImpl::CreateWebSocketHandshakeThrottle(
 void WebServiceWorkerFetchContextImpl::UpdateSubresourceLoaderFactories(
     std::unique_ptr<PendingURLLoaderFactoryBundle>
         subresource_loader_factories) {
-  web_url_loader_factory_ = std::make_unique<WebURLLoaderFactory>(
+  url_loader_factory_ = std::make_unique<URLLoaderFactory>(
       network::SharedURLLoaderFactory::Create(
           std::move(subresource_loader_factories)),
       cors_exempt_header_list_, terminate_sync_load_event_);
diff --git a/third_party/blink/renderer/modules/service_worker/web_service_worker_fetch_context_impl.h b/third_party/blink/renderer/modules/service_worker/web_service_worker_fetch_context_impl.h
index e169449b5cdf2..3a07f35114c60 100644
--- a/third_party/blink/renderer/modules/service_worker/web_service_worker_fetch_context_impl.h
+++ b/third_party/blink/renderer/modules/service_worker/web_service_worker_fetch_context_impl.h
@@ -25,7 +25,7 @@ class WaitableEvent;
 
 namespace blink {
 
-class InternetDisconnectedWebURLLoaderFactory;
+class InternetDisconnectedURLLoaderFactory;
 
 class BLINK_EXPORT WebServiceWorkerFetchContextImpl final
     : public WebServiceWorkerFetchContext,
@@ -62,11 +62,11 @@ class BLINK_EXPORT WebServiceWorkerFetchContextImpl final
   // WebServiceWorkerFetchContext implementation:
   void SetTerminateSyncLoadEvent(base::WaitableEvent*) override;
   void InitializeOnWorkerThread(AcceptLanguagesWatcher*) override;
-  WebURLLoaderFactory* GetURLLoaderFactory() override;
-  std::unique_ptr<WebURLLoaderFactory> WrapURLLoaderFactory(
+  URLLoaderFactory* GetURLLoaderFactory() override;
+  std::unique_ptr<URLLoaderFactory> WrapURLLoaderFactory(
       CrossVariantMojoRemote<network::mojom::URLLoaderFactoryInterfaceBase>
           url_loader_factory) override;
-  WebURLLoaderFactory* GetScriptLoaderFactory() override;
+  URLLoaderFactory* GetScriptLoaderFactory() override;
   void WillSendRequest(WebURLRequest&) override;
   mojom::ControllerServiceWorkerMode GetControllerServiceWorkerMode()
       const override;
@@ -90,7 +90,7 @@ class BLINK_EXPORT WebServiceWorkerFetchContextImpl final
 
   RendererPreferences renderer_preferences_;
   const KURL worker_script_url_;
-  // Consumed on the worker thread to create |web_url_loader_factory_|.
+  // Consumed on the worker thread to create |url_loader_factory_|.
   std::unique_ptr<network::PendingSharedURLLoaderFactory>
       pending_url_loader_factory_;
   // Consumed on the worker thread to create |web_script_loader_factory_|.
@@ -103,14 +103,14 @@ class BLINK_EXPORT WebServiceWorkerFetchContextImpl final
   KURL script_url_to_skip_throttling_;
 
   // Responsible for regular loads from the service worker (i.e., Fetch API).
-  std::unique_ptr<WebURLLoaderFactory> web_url_loader_factory_;
+  std::unique_ptr<URLLoaderFactory> url_loader_factory_;
   // Responsible for loads which always fail as INTERNET_DISCONNECTED
   // error, which is used in offline mode.
-  std::unique_ptr<InternetDisconnectedWebURLLoaderFactory>
-      internet_disconnected_web_url_loader_factory_;
+  std::unique_ptr<InternetDisconnectedURLLoaderFactory>
+      internet_disconnected_url_loader_factory_;
   // Responsible for script loads from the service worker (i.e., the
   // classic/module main script, module imported scripts, or importScripts()).
-  std::unique_ptr<WebURLLoaderFactory> web_script_loader_factory_;
+  std::unique_ptr<URLLoaderFactory> web_script_loader_factory_;
 
   std::unique_ptr<URLLoaderThrottleProvider> throttle_provider_;
   std::unique_ptr<WebSocketHandshakeThrottleProvider>
diff --git a/third_party/blink/renderer/platform/BUILD.gn b/third_party/blink/renderer/platform/BUILD.gn
index 7706c06a88941..9fef3d0007cb9 100644
--- a/third_party/blink/renderer/platform/BUILD.gn
+++ b/third_party/blink/renderer/platform/BUILD.gn
@@ -1895,8 +1895,8 @@ static_library("test_support") {
     "testing/layer_tree_host_embedder.h",
     "testing/message_loop_for_mojo.h",
     "testing/mock_context_lifecycle_notifier.h",
-    "testing/noop_web_url_loader.cc",
-    "testing/noop_web_url_loader.h",
+    "testing/noop_url_loader.cc",
+    "testing/noop_url_loader.h",
     "testing/paint_property_test_helpers.h",
     "testing/paint_test_configurations.h",
     "testing/picture_matchers.cc",
@@ -1917,17 +1917,17 @@ static_library("test_support") {
     "testing/testing_platform_support_with_mock_scheduler.h",
     "testing/unit_test_helpers.cc",
     "testing/unit_test_helpers.h",
+    "testing/url_loader_mock.cc",
+    "testing/url_loader_mock.h",
+    "testing/url_loader_mock_factory.h",
+    "testing/url_loader_mock_factory_impl.cc",
+    "testing/url_loader_mock_factory_impl.h",
+    "testing/url_loader_test_delegate.cc",
+    "testing/url_loader_test_delegate.h",
     "testing/url_test_helpers.cc",
     "testing/url_test_helpers.h",
     "testing/video_frame_utils.cc",
     "testing/video_frame_utils.h",
-    "testing/web_url_loader_mock_factory.h",
-    "testing/web_url_loader_test_delegate.cc",
-    "testing/web_url_loader_test_delegate.h",
-    "testing/weburl_loader_mock.cc",
-    "testing/weburl_loader_mock.h",
-    "testing/weburl_loader_mock_factory_impl.cc",
-    "testing/weburl_loader_mock_factory_impl.h",
     "webrtc/testing/mock_webrtc_video_frame_adapter_shared_resources.h",
   ]
 
diff --git a/third_party/blink/renderer/platform/exported/platform.cc b/third_party/blink/renderer/platform/exported/platform.cc
index 9c7246b9006c5..62c782ac54a79 100644
--- a/third_party/blink/renderer/platform/exported/platform.cc
+++ b/third_party/blink/renderer/platform/exported/platform.cc
@@ -60,7 +60,7 @@
 #include "third_party/blink/renderer/platform/instrumentation/partition_alloc_memory_dump_provider.h"
 #include "third_party/blink/renderer/platform/instrumentation/tracing/memory_cache_dump_provider.h"
 #include "third_party/blink/renderer/platform/language.h"
-#include "third_party/blink/renderer/platform/loader/fetch/url_loader/web_url_loader_factory.h"
+#include "third_party/blink/renderer/platform/loader/fetch/url_loader/url_loader_factory.h"
 #include "third_party/blink/renderer/platform/scheduler/common/simple_main_thread_scheduler.h"
 #include "third_party/blink/renderer/platform/scheduler/public/main_thread.h"
 #include "third_party/blink/renderer/platform/scheduler/public/non_main_thread.h"
diff --git a/third_party/blink/renderer/platform/loader/BUILD.gn b/third_party/blink/renderer/platform/loader/BUILD.gn
index 5b10bd5f3ebc8..caf1dead6e127 100644
--- a/third_party/blink/renderer/platform/loader/BUILD.gn
+++ b/third_party/blink/renderer/platform/loader/BUILD.gn
@@ -139,22 +139,22 @@ blink_platform_sources("loader") {
     "fetch/url_loader/sync_load_context.h",
     "fetch/url_loader/sync_load_response.cc",
     "fetch/url_loader/sync_load_response.h",
+    "fetch/url_loader/url_loader.cc",
+    "fetch/url_loader/url_loader.h",
+    "fetch/url_loader/url_loader_client.cc",
+    "fetch/url_loader/url_loader_client.h",
+    "fetch/url_loader/url_loader_factory.cc",
+    "fetch/url_loader/url_loader_factory.h",
     "fetch/url_loader/web_resource_request_sender.cc",
     "fetch/url_loader/web_resource_request_sender.h",
-    "fetch/url_loader/web_url_loader.cc",
-    "fetch/url_loader/web_url_loader.h",
-    "fetch/url_loader/web_url_loader_client.cc",
-    "fetch/url_loader/web_url_loader_client.h",
-    "fetch/url_loader/web_url_loader_factory.cc",
-    "fetch/url_loader/web_url_loader_factory.h",
     "fetch/url_loader/worker_main_script_loader.cc",
     "fetch/url_loader/worker_main_script_loader.h",
     "fetch/url_loader/worker_main_script_loader_client.h",
     "fetch/worker_resource_timing_notifier.h",
     "frame_request_blocker.cc",
     "frame_request_blocker.h",
-    "internet_disconnected_web_url_loader.cc",
-    "internet_disconnected_web_url_loader.h",
+    "internet_disconnected_url_loader.cc",
+    "internet_disconnected_url_loader.h",
     "link_header.cc",
     "link_header.h",
     "mixed_content.cc",
@@ -233,8 +233,8 @@ source_set("unit_tests") {
     "fetch/url_loader/mojo_url_loader_client_unittest.cc",
     "fetch/url_loader/navigation_body_loader_unittest.cc",
     "fetch/url_loader/sync_load_context_unittest.cc",
+    "fetch/url_loader/url_loader_unittest.cc",
     "fetch/url_loader/web_resource_request_sender_unittest.cc",
-    "fetch/url_loader/web_url_loader_unittest.cc",
     "fetch/url_loader/worker_main_script_loader_unittest.cc",
     "link_header_test.cc",
     "static_data_navigation_body_loader_test.cc",
diff --git a/third_party/blink/renderer/platform/loader/fetch/resource_fetcher.cc b/third_party/blink/renderer/platform/loader/fetch/resource_fetcher.cc
index 3a4a60a4165e4..fa93f547bc0f0 100644
--- a/third_party/blink/renderer/platform/loader/fetch/resource_fetcher.cc
+++ b/third_party/blink/renderer/platform/loader/fetch/resource_fetcher.cc
@@ -1361,7 +1361,7 @@ void ResourceFetcher::InitializeRevalidation(
   resource->SetRevalidatingRequest(revalidating_request);
 }
 
-std::unique_ptr<WebURLLoader> ResourceFetcher::CreateURLLoader(
+std::unique_ptr<URLLoader> ResourceFetcher::CreateURLLoader(
     const ResourceRequestHead& request,
     const ResourceLoaderOptions& options) {
   DCHECK(!GetProperties().IsDetached());
diff --git a/third_party/blink/renderer/platform/loader/fetch/resource_fetcher.h b/third_party/blink/renderer/platform/loader/fetch/resource_fetcher.h
index 5157b5fa6a663..fa984e2f73676 100644
--- a/third_party/blink/renderer/platform/loader/fetch/resource_fetcher.h
+++ b/third_party/blink/renderer/platform/loader/fetch/resource_fetcher.h
@@ -49,7 +49,7 @@
 #include "third_party/blink/renderer/platform/loader/fetch/preload_key.h"
 #include "third_party/blink/renderer/platform/loader/fetch/resource_load_priority.h"
 #include "third_party/blink/renderer/platform/loader/fetch/resource_load_scheduler.h"
-#include "third_party/blink/renderer/platform/loader/fetch/url_loader/web_url_loader.h"
+#include "third_party/blink/renderer/platform/loader/fetch/url_loader/url_loader.h"
 #include "third_party/blink/renderer/platform/mojo/heap_mojo_remote.h"
 #include "third_party/blink/renderer/platform/mojo/heap_mojo_wrapper_mode.h"
 #include "third_party/blink/renderer/platform/mojo/mojo_binding_context.h"
@@ -102,10 +102,10 @@ class PLATFORM_EXPORT ResourceFetcher
 
     virtual void Trace(Visitor*) const {}
 
-    // Create a WebURLLoader for given the request information and task runners.
+    // Create a URLLoader for given the request information and task runners.
     // TODO(yuzus): Take only unfreezable task runner once both
     // URLLoaderClientImpl and ResponseBodyLoader use unfreezable task runner.
-    virtual std::unique_ptr<WebURLLoader> CreateURLLoader(
+    virtual std::unique_ptr<URLLoader> CreateURLLoader(
         const ResourceRequest&,
         const ResourceLoaderOptions&,
         scoped_refptr<base::SingleThreadTaskRunner> freezable_task_runner,
@@ -167,8 +167,8 @@ class PLATFORM_EXPORT ResourceFetcher
   }
 
   // Create a loader. This cannot be called after ClearContext is called.
-  std::unique_ptr<WebURLLoader> CreateURLLoader(const ResourceRequestHead&,
-                                                const ResourceLoaderOptions&);
+  std::unique_ptr<URLLoader> CreateURLLoader(const ResourceRequestHead&,
+                                             const ResourceLoaderOptions&);
   // Create a code cache loader. This cannot be called after ClearContext is
   // called.
   std::unique_ptr<WebCodeCacheLoader> CreateCodeCacheLoader();
diff --git a/third_party/blink/renderer/platform/loader/fetch/resource_fetcher_properties.h b/third_party/blink/renderer/platform/loader/fetch/resource_fetcher_properties.h
index cd3832206eebc..0ac887568f915 100644
--- a/third_party/blink/renderer/platform/loader/fetch/resource_fetcher_properties.h
+++ b/third_party/blink/renderer/platform/loader/fetch/resource_fetcher_properties.h
@@ -9,7 +9,7 @@
 #include "third_party/blink/renderer/platform/heap/garbage_collected.h"
 #include "third_party/blink/renderer/platform/heap/member.h"
 #include "third_party/blink/renderer/platform/loader/fetch/loader_freeze_mode.h"
-#include "third_party/blink/renderer/platform/loader/fetch/url_loader/web_url_loader.h"
+#include "third_party/blink/renderer/platform/loader/fetch/url_loader/url_loader.h"
 #include "third_party/blink/renderer/platform/platform_export.h"
 #include "third_party/blink/renderer/platform/scheduler/public/frame_status.h"
 #include "third_party/blink/renderer/platform/weborigin/kurl.h"
diff --git a/third_party/blink/renderer/platform/loader/fetch/resource_fetcher_test.cc b/third_party/blink/renderer/platform/loader/fetch/resource_fetcher_test.cc
index 10066cf137ff7..19b564ff54ddf 100644
--- a/third_party/blink/renderer/platform/loader/fetch/resource_fetcher_test.cc
+++ b/third_party/blink/renderer/platform/loader/fetch/resource_fetcher_test.cc
@@ -60,7 +60,7 @@
 #include "third_party/blink/renderer/platform/loader/fetch/resource_request.h"
 #include "third_party/blink/renderer/platform/loader/fetch/resource_timing_utils.h"
 #include "third_party/blink/renderer/platform/loader/fetch/unique_identifier.h"
-#include "third_party/blink/renderer/platform/loader/fetch/url_loader/web_url_loader.h"
+#include "third_party/blink/renderer/platform/loader/fetch/url_loader/url_loader.h"
 #include "third_party/blink/renderer/platform/loader/testing/fetch_testing_platform_support.h"
 #include "third_party/blink/renderer/platform/loader/testing/mock_fetch_context.h"
 #include "third_party/blink/renderer/platform/loader/testing/mock_resource.h"
@@ -73,10 +73,10 @@
 #include "third_party/blink/renderer/platform/testing/scoped_mocked_url.h"
 #include "third_party/blink/renderer/platform/testing/testing_platform_support.h"
 #include "third_party/blink/renderer/platform/testing/unit_test_helpers.h"
+#include "third_party/blink/renderer/platform/testing/url_loader_mock.h"
+#include "third_party/blink/renderer/platform/testing/url_loader_mock_factory.h"
+#include "third_party/blink/renderer/platform/testing/url_loader_mock_factory_impl.h"
 #include "third_party/blink/renderer/platform/testing/url_test_helpers.h"
-#include "third_party/blink/renderer/platform/testing/web_url_loader_mock_factory.h"
-#include "third_party/blink/renderer/platform/testing/weburl_loader_mock.h"
-#include "third_party/blink/renderer/platform/testing/weburl_loader_mock_factory_impl.h"
 #include "third_party/blink/renderer/platform/weborigin/kurl.h"
 #include "third_party/blink/renderer/platform/wtf/allocator/allocator.h"
 
@@ -629,11 +629,10 @@ class RequestSameResourceOnComplete
     : public GarbageCollected<RequestSameResourceOnComplete>,
       public RawResourceClient {
  public:
-  RequestSameResourceOnComplete(WebURLLoaderMockFactory* mock_factory,
+  RequestSameResourceOnComplete(URLLoaderMockFactory* mock_factory,
                                 FetchParameters& params,
                                 ResourceFetcher* fetcher)
       : mock_factory_(mock_factory),
-        notify_finished_called_(false),
         source_origin_(fetcher->GetProperties()
                            .GetFetchClientSettingsObject()
                            .GetSecurityOrigin()) {
@@ -670,8 +669,8 @@ class RequestSameResourceOnComplete
   String DebugName() const override { return "RequestSameResourceOnComplete"; }
 
  private:
-  WebURLLoaderMockFactory* mock_factory_;
-  bool notify_finished_called_;
+  URLLoaderMockFactory* mock_factory_;
+  bool notify_finished_called_ = false;
   scoped_refptr<const SecurityOrigin> source_origin_;
 };
 
@@ -724,7 +723,7 @@ class ServeRequestsOnCompleteClient final
     : public GarbageCollected<ServeRequestsOnCompleteClient>,
       public RawResourceClient {
  public:
-  explicit ServeRequestsOnCompleteClient(WebURLLoaderMockFactory* mock_factory)
+  explicit ServeRequestsOnCompleteClient(URLLoaderMockFactory* mock_factory)
       : mock_factory_(mock_factory) {}
 
   void NotifyFinished(Resource*) override {
@@ -759,14 +758,14 @@ class ServeRequestsOnCompleteClient final
   String DebugName() const override { return "ServeRequestsOnCompleteClient"; }
 
  private:
-  WebURLLoaderMockFactory* mock_factory_;
+  URLLoaderMockFactory* mock_factory_;
 };
 
 // Regression test for http://crbug.com/594072.
 // This emulates a modal dialog triggering a nested run loop inside
 // ResourceLoader::Cancel(). If the ResourceLoader doesn't promptly cancel its
-// WebURLLoader before notifying its clients, a nested run loop  may send a
-// network response, leading to an invalid state transition in ResourceLoader.
+// URLLoader before notifying its clients, a nested run loop  may send a network
+// response, leading to an invalid state transition in ResourceLoader.
 TEST_F(ResourceFetcherTest, ResponseOnCancel) {
   KURL url("http://127.0.0.1:8000/foo.png");
   RegisterMockedURLLoad(url);
@@ -789,7 +788,7 @@ class ScopedMockRedirectRequester {
 
  public:
   ScopedMockRedirectRequester(
-      WebURLLoaderMockFactory* mock_factory,
+      URLLoaderMockFactory* mock_factory,
       MockFetchContext* context,
       scoped_refptr<base::SingleThreadTaskRunner> task_runner)
       : mock_factory_(mock_factory),
@@ -834,7 +833,7 @@ class ScopedMockRedirectRequester {
   }
 
  private:
-  WebURLLoaderMockFactory* mock_factory_;
+  URLLoaderMockFactory* mock_factory_;
   MockFetchContext* context_;
   const scoped_refptr<base::SingleThreadTaskRunner> task_runner_;
 };
diff --git a/third_party/blink/renderer/platform/loader/fetch/resource_loader.cc b/third_party/blink/renderer/platform/loader/fetch/resource_loader.cc
index c72711e426063..48f4262efc6d1 100644
--- a/third_party/blink/renderer/platform/loader/fetch/resource_loader.cc
+++ b/third_party/blink/renderer/platform/loader/fetch/resource_loader.cc
@@ -245,7 +245,7 @@ class ResourceLoader::CodeCacheRequest {
   ~CodeCacheRequest() = default;
 
   // Request data from code cache.
-  bool FetchFromCodeCache(WebURLLoader* url_loader,
+  bool FetchFromCodeCache(URLLoader* url_loader,
                           ResourceLoader* resource_loader);
 
   // Notifies about the response from webURLLoader. Stores the
@@ -280,7 +280,7 @@ class ResourceLoader::CodeCacheRequest {
                                 ResourceLoader* resource_loader);
 
   // Send |cache_code| if we got a response from code_cache_loader and the
-  // web_url_loader.
+  // url_loader.
   void MaybeSendCachedCode(mojo_base::BigBuffer data,
                            ResourceLoader* resource_loader);
 
@@ -304,7 +304,7 @@ class ResourceLoader::CodeCacheRequest {
 };
 
 bool ResourceLoader::CodeCacheRequest::FetchFromCodeCache(
-    WebURLLoader* url_loader,
+    URLLoader* url_loader,
     ResourceLoader* resource_loader) {
   if (!code_cache_loader_)
     return false;
@@ -313,8 +313,8 @@ bool ResourceLoader::CodeCacheRequest::FetchFromCodeCache(
 
   // Set defers loading before fetching data from code cache. This is to
   // ensure that the resource receives cached code before the response data.
-  // This directly calls the WebURLLoader's SetDefersLoading without going
-  // through ResourceLoader.
+  // This directly calls the URLLoader's SetDefersLoading without going through
+  // ResourceLoader.
   url_loader->Freeze(LoaderFreezeMode::kStrict);
 
   WebCodeCacheLoader::FetchCodeCacheCallback callback =
@@ -326,8 +326,8 @@ bool ResourceLoader::CodeCacheRequest::FetchFromCodeCache(
   return true;
 }
 
-// This is called when a response is received from the WebURLLoader. We buffer
-// the response_time if the response from code cache is not available yet.
+// This is called when a response is received from the URLLoader. We buffer the
+// response_time if the response from code cache is not available yet.
 void ResourceLoader::CodeCacheRequest::DidReceiveResponse(
     const base::Time& resource_response_time,
     bool use_isolated_code_cache,
@@ -1390,7 +1390,7 @@ void ResourceLoader::RequestSynchronously(const ResourceRequestHead& request) {
   WebURLResponse response_out;
   absl::optional<WebURLError> error_out;
   WebData data_out;
-  int64_t encoded_data_length = WebURLLoaderClient::kUnknownEncodedDataLength;
+  int64_t encoded_data_length = URLLoaderClient::kUnknownEncodedDataLength;
   uint64_t encoded_body_length = 0;
   scoped_refptr<BlobDataHandle> downloaded_blob;
 
diff --git a/third_party/blink/renderer/platform/loader/fetch/resource_loader.h b/third_party/blink/renderer/platform/loader/fetch/resource_loader.h
index a1929fe817bbc..28fea5512aafe 100644
--- a/third_party/blink/renderer/platform/loader/fetch/resource_loader.h
+++ b/third_party/blink/renderer/platform/loader/fetch/resource_loader.h
@@ -48,8 +48,8 @@
 #include "third_party/blink/renderer/platform/loader/fetch/resource_loader_options.h"
 #include "third_party/blink/renderer/platform/loader/fetch/resource_request.h"
 #include "third_party/blink/renderer/platform/loader/fetch/response_body_loader_client.h"
-#include "third_party/blink/renderer/platform/loader/fetch/url_loader/web_url_loader.h"
-#include "third_party/blink/renderer/platform/loader/fetch/url_loader/web_url_loader_client.h"
+#include "third_party/blink/renderer/platform/loader/fetch/url_loader/url_loader.h"
+#include "third_party/blink/renderer/platform/loader/fetch/url_loader/url_loader_client.h"
 #include "third_party/blink/renderer/platform/platform_export.h"
 #include "third_party/blink/renderer/platform/scheduler/public/frame_or_worker_scheduler.h"
 #include "third_party/blink/renderer/platform/wtf/forward.h"
@@ -78,12 +78,12 @@ struct CnameAliasMetricInfo {
 
 // A ResourceLoader is created for each Resource by the ResourceFetcher when it
 // needs to load the specified resource. A ResourceLoader creates a
-// WebURLLoader and loads the resource using it. Any per-load logic should be
+// URLLoader and loads the resource using it. Any per-load logic should be
 // implemented in this class basically.
 class PLATFORM_EXPORT ResourceLoader final
     : public GarbageCollected<ResourceLoader>,
       public ResourceLoadSchedulerClient,
-      protected WebURLLoaderClient,
+      protected URLLoaderClient,
       protected mojom::blink::ProgressClient,
       private ResponseBodyLoaderClient {
   USING_PRE_FINALIZER(ResourceLoader, Dispose);
@@ -120,7 +120,7 @@ class PLATFORM_EXPORT ResourceLoader final
 
   void AbortResponseBodyLoading();
 
-  // WebURLLoaderClient
+  // URLLoaderClient
   //
   // A succesful load will consist of:
   // 0+  WillFollowRedirect()
@@ -207,7 +207,7 @@ class PLATFORM_EXPORT ResourceLoader final
   FetchContext& Context() const;
 
   // Returns true during resource load is happening. Methods as
-  // a WebURLLoaderClient should not be invoked if this returns false.
+  // a URLLoaderClient should not be invoked if this returns false.
   bool IsLoading() const;
 
   void CancelForRedirectAccessCheckError(const KURL&,
@@ -243,7 +243,7 @@ class PLATFORM_EXPORT ResourceLoader final
       const ResourceRequest::RedirectInfo redirect_info,
       CnameAliasMetricInfo* out_metric_info);
 
-  std::unique_ptr<WebURLLoader> loader_;
+  std::unique_ptr<URLLoader> loader_;
   ResourceLoadScheduler::ClientId scheduler_client_id_;
   Member<ResourceFetcher> fetcher_;
   Member<ResourceLoadScheduler> scheduler_;
diff --git a/third_party/blink/renderer/platform/loader/fetch/resource_loader_defer_loading_test.cc b/third_party/blink/renderer/platform/loader/fetch/resource_loader_defer_loading_test.cc
index e6053f0f15a13..a6f119ef4d32c 100644
--- a/third_party/blink/renderer/platform/loader/fetch/resource_loader_defer_loading_test.cc
+++ b/third_party/blink/renderer/platform/loader/fetch/resource_loader_defer_loading_test.cc
@@ -16,8 +16,8 @@
 #include "third_party/blink/renderer/platform/loader/fetch/raw_resource.h"
 #include "third_party/blink/renderer/platform/loader/fetch/resource_fetcher.h"
 #include "third_party/blink/renderer/platform/loader/fetch/unique_identifier.h"
-#include "third_party/blink/renderer/platform/loader/fetch/url_loader/web_url_loader.h"
-#include "third_party/blink/renderer/platform/loader/fetch/url_loader/web_url_loader_factory.h"
+#include "third_party/blink/renderer/platform/loader/fetch/url_loader/url_loader.h"
+#include "third_party/blink/renderer/platform/loader/fetch/url_loader/url_loader_factory.h"
 #include "third_party/blink/renderer/platform/loader/testing/mock_fetch_context.h"
 #include "third_party/blink/renderer/platform/loader/testing/test_loader_factory.h"
 #include "third_party/blink/renderer/platform/loader/testing/test_resource_fetcher_properties.h"
@@ -54,12 +54,12 @@ class TestCodeCacheLoader : public WebCodeCacheLoader {
   ProcessCodeCacheRequestCallback process_request_;
 };
 
-// A mock WebURLLoader to know the status of defers flag.
-class TestWebURLLoader final : public WebURLLoader {
+// A mock URLLoader to know the status of defers flag.
+class TestURLLoader final : public URLLoader {
  public:
-  explicit TestWebURLLoader(WebLoaderFreezeMode* const freeze_mode_ptr)
+  explicit TestURLLoader(WebLoaderFreezeMode* const freeze_mode_ptr)
       : freeze_mode_ptr_(freeze_mode_ptr) {}
-  ~TestWebURLLoader() override = default;
+  ~TestURLLoader() override = default;
 
   void LoadSynchronously(
       std::unique_ptr<network::ResourceRequest> request,
@@ -67,7 +67,7 @@ class TestWebURLLoader final : public WebURLLoader {
       bool pass_response_pipe_to_client,
       bool no_mime_sniffing,
       base::TimeDelta timeout_interval,
-      WebURLLoaderClient*,
+      URLLoaderClient*,
       WebURLResponse&,
       absl::optional<WebURLError>&,
       WebData&,
@@ -84,7 +84,7 @@ class TestWebURLLoader final : public WebURLLoader {
       bool no_mime_sniffing,
       std::unique_ptr<blink::ResourceLoadInfoNotifierWrapper>
           resource_load_info_notifier_wrapper,
-      WebURLLoaderClient*) override {}
+      URLLoaderClient*) override {}
 
   void Freeze(WebLoaderFreezeMode mode) override { *freeze_mode_ptr_ = mode; }
   void DidChangePriority(WebURLRequest::Priority, int) override {
@@ -110,13 +110,13 @@ class DeferTestLoaderFactory final : public ResourceFetcher::LoaderFactory {
             process_code_cache_request_callback) {}
 
   // LoaderFactory implementations
-  std::unique_ptr<WebURLLoader> CreateURLLoader(
+  std::unique_ptr<URLLoader> CreateURLLoader(
       const ResourceRequest& request,
       const ResourceLoaderOptions& options,
       scoped_refptr<base::SingleThreadTaskRunner> freezable_task_runner,
       scoped_refptr<base::SingleThreadTaskRunner> unfreezable_task_runner,
       BackForwardCacheLoaderHelper* back_forward_cache_loader_helper) override {
-    return std::make_unique<TestWebURLLoader>(freeze_mode_ptr_);
+    return std::make_unique<TestURLLoader>(freeze_mode_ptr_);
   }
 
   std::unique_ptr<WebCodeCacheLoader> CreateCodeCacheLoader() override {
@@ -165,8 +165,8 @@ class ResourceLoaderDefersLoadingTest : public testing::Test {
 
   ProcessCodeCacheRequestCallback process_code_cache_request_callback_;
   WebCodeCacheLoader::FetchCodeCacheCallback code_cache_response_callback_;
-  // Passed to TestWebURLLoader (via |platform_|) and updated when its
-  // Freeze method is called.
+  // Passed to TestURLLoader (via |platform_|) and updated when its Freeze
+  // method is called.
   WebLoaderFreezeMode freeze_mode_ = WebLoaderFreezeMode::kNone;
   const KURL test_url_ = KURL("http://example.com/");
 
@@ -188,7 +188,7 @@ TEST_F(ResourceLoaderDefersLoadingTest, CodeCacheFetchCheckDefers) {
 
   Resource* resource = RawResource::Fetch(fetch_parameters, fetcher, nullptr);
 
-  // After code cache fetch it should have deferred WebURLLoader.
+  // After code cache fetch it should have deferred URLLoader.
   DCHECK_EQ(freeze_mode_, LoaderFreezeMode::kStrict);
   DCHECK(resource);
   std::move(code_cache_response_callback_).Run(base::Time(), {});
@@ -228,8 +228,8 @@ TEST_F(ResourceLoaderDefersLoadingTest, ChangeDefersToFalse) {
   Resource* resource = RawResource::Fetch(fetch_parameters, fetcher, nullptr);
   DCHECK_EQ(freeze_mode_, LoaderFreezeMode::kStrict);
 
-  // Change Defers loading to false. This should not be sent to
-  // WebURLLoader since a code cache request is still pending.
+  // Change Defers loading to false. This should not be sent to URLLoader since
+  // a code cache request is still pending.
   ResourceLoader* loader = resource->Loader();
   loader->SetDefersLoading(LoaderFreezeMode::kNone);
   DCHECK_EQ(freeze_mode_, LoaderFreezeMode::kStrict);
diff --git a/third_party/blink/renderer/platform/loader/fetch/resource_loader_test.cc b/third_party/blink/renderer/platform/loader/fetch/resource_loader_test.cc
index 332ac2a6ec4c9..18eaad2374734 100644
--- a/third_party/blink/renderer/platform/loader/fetch/resource_loader_test.cc
+++ b/third_party/blink/renderer/platform/loader/fetch/resource_loader_test.cc
@@ -22,14 +22,14 @@
 #include "third_party/blink/renderer/platform/loader/fetch/resource_fetcher.h"
 #include "third_party/blink/renderer/platform/loader/fetch/resource_load_scheduler.h"
 #include "third_party/blink/renderer/platform/loader/fetch/resource_response.h"
-#include "third_party/blink/renderer/platform/loader/fetch/url_loader/web_url_loader.h"
-#include "third_party/blink/renderer/platform/loader/fetch/url_loader/web_url_loader_factory.h"
+#include "third_party/blink/renderer/platform/loader/fetch/url_loader/url_loader.h"
+#include "third_party/blink/renderer/platform/loader/fetch/url_loader/url_loader_factory.h"
 #include "third_party/blink/renderer/platform/loader/testing/bytes_consumer_test_reader.h"
 #include "third_party/blink/renderer/platform/loader/testing/mock_fetch_context.h"
 #include "third_party/blink/renderer/platform/loader/testing/test_resource_fetcher_properties.h"
 #include "third_party/blink/renderer/platform/testing/code_cache_loader_mock.h"
 #include "third_party/blink/renderer/platform/testing/mock_context_lifecycle_notifier.h"
-#include "third_party/blink/renderer/platform/testing/noop_web_url_loader.h"
+#include "third_party/blink/renderer/platform/testing/noop_url_loader.h"
 #include "third_party/blink/renderer/platform/testing/testing_platform_support_with_mock_scheduler.h"
 #include "third_party/blink/renderer/platform/wtf/text/string_builder.h"
 
@@ -79,15 +79,14 @@ class ResourceLoaderTest : public testing::Test {
   const KURL bar_url_;
 
   class NoopLoaderFactory final : public ResourceFetcher::LoaderFactory {
-    std::unique_ptr<WebURLLoader> CreateURLLoader(
+    std::unique_ptr<URLLoader> CreateURLLoader(
         const ResourceRequest& request,
         const ResourceLoaderOptions& options,
         scoped_refptr<base::SingleThreadTaskRunner> freezable_task_runner,
         scoped_refptr<base::SingleThreadTaskRunner> unfreezable_task_runner,
         BackForwardCacheLoaderHelper* back_forward_cache_loader_helper)
         override {
-      return std::make_unique<NoopWebURLLoader>(
-          std::move(freezable_task_runner));
+      return std::make_unique<NoopURLLoader>(std::move(freezable_task_runner));
     }
     std::unique_ptr<WebCodeCacheLoader> CreateCodeCacheLoader() override {
       return std::make_unique<CodeCacheLoaderMock>();
diff --git a/third_party/blink/renderer/platform/loader/fetch/resource_request.h b/third_party/blink/renderer/platform/loader/fetch/resource_request.h
index 479661a36e77c..6ea7afa79f7e2 100644
--- a/third_party/blink/renderer/platform/loader/fetch/resource_request.h
+++ b/third_party/blink/renderer/platform/loader/fetch/resource_request.h
@@ -711,7 +711,7 @@ class PLATFORM_EXPORT ResourceRequestBody {
 // A ResourceRequest is a "request" object for ResourceLoader. Conceptually
 // it is https://fetch.spec.whatwg.org/#concept-request, but it contains
 // a lot of blink specific fields. WebURLRequest is the "public version"
-// of this class and WebURLLoader needs it. See WebURLRequest and
+// of this class and URLLoader needs it. See WebURLRequest and
 // WrappedResourceRequest.
 //
 // This class is thread-bound. Do not copy/pass an instance across threads.
diff --git a/third_party/blink/renderer/platform/loader/fetch/url_loader/dedicated_or_shared_worker_fetch_context_impl.cc b/third_party/blink/renderer/platform/loader/fetch/url_loader/dedicated_or_shared_worker_fetch_context_impl.cc
index fb8d539a90c18..c01e78e9944bb 100644
--- a/third_party/blink/renderer/platform/loader/fetch/url_loader/dedicated_or_shared_worker_fetch_context_impl.cc
+++ b/third_party/blink/renderer/platform/loader/fetch/url_loader/dedicated_or_shared_worker_fetch_context_impl.cc
@@ -27,8 +27,8 @@
 #include "third_party/blink/public/platform/web_security_origin.h"
 #include "third_party/blink/public/platform/web_url_request_extra_data.h"
 #include "third_party/blink/public/platform/websocket_handshake_throttle_provider.h"
-#include "third_party/blink/renderer/platform/loader/fetch/url_loader/web_url_loader.h"
-#include "third_party/blink/renderer/platform/loader/fetch/url_loader/web_url_loader_factory.h"
+#include "third_party/blink/renderer/platform/loader/fetch/url_loader/url_loader.h"
+#include "third_party/blink/renderer/platform/loader/fetch/url_loader/url_loader_factory.h"
 #include "url/url_constants.h"
 
 namespace blink {
@@ -53,25 +53,25 @@ void CreateServiceWorkerSubresourceLoaderFactory(
 
 }  // namespace
 
-// An implementation of WebURLLoaderFactory that is aware of service workers. In
+// An implementation of URLLoaderFactory that is aware of service workers. In
 // the usual case, it creates a loader that uses |loader_factory_|. But if the
 // worker fetch context is controlled by a service worker, it creates a loader
 // that uses |service_worker_loader_factory_| for requests that should be
 // intercepted by the service worker.
 class DedicatedOrSharedWorkerFetchContextImpl::Factory
-    : public WebURLLoaderFactory {
+    : public URLLoaderFactory {
  public:
   Factory(scoped_refptr<network::SharedURLLoaderFactory> loader_factory,
           const Vector<String>& cors_exempt_header_list,
           base::WaitableEvent* terminate_sync_load_event)
-      : WebURLLoaderFactory(std::move(loader_factory),
-                            cors_exempt_header_list,
-                            terminate_sync_load_event) {}
+      : URLLoaderFactory(std::move(loader_factory),
+                         cors_exempt_header_list,
+                         terminate_sync_load_event) {}
   Factory(const Factory&) = delete;
   Factory& operator=(const Factory&) = delete;
   ~Factory() override = default;
 
-  std::unique_ptr<WebURLLoader> CreateURLLoader(
+  std::unique_ptr<URLLoader> CreateURLLoader(
       const WebURLRequest& request,
       scoped_refptr<base::SingleThreadTaskRunner> freezable_task_runner,
       scoped_refptr<base::SingleThreadTaskRunner> unfreezable_task_runner,
@@ -84,14 +84,14 @@ class DedicatedOrSharedWorkerFetchContextImpl::Factory
     if (CanCreateServiceWorkerURLLoader(request)) {
       // Create our own URLLoader to route the request to the controller service
       // worker.
-      return std::make_unique<WebURLLoader>(
+      return std::make_unique<URLLoader>(
           cors_exempt_header_list_, terminate_sync_load_event_,
           std::move(freezable_task_runner), std::move(unfreezable_task_runner),
           service_worker_loader_factory_, std::move(keep_alive_handle),
           back_forward_cache_loader_helper);
     }
 
-    return std::make_unique<WebURLLoader>(
+    return std::make_unique<URLLoader>(
         cors_exempt_header_list_, terminate_sync_load_event_,
         std::move(freezable_task_runner), std::move(unfreezable_task_runner),
         loader_factory_, std::move(keep_alive_handle),
@@ -361,16 +361,16 @@ void DedicatedOrSharedWorkerFetchContextImpl::InitializeOnWorkerThread(
   ResetServiceWorkerURLLoaderFactory();
 }
 
-WebURLLoaderFactory*
+URLLoaderFactory*
 DedicatedOrSharedWorkerFetchContextImpl::GetURLLoaderFactory() {
   return web_loader_factory_.get();
 }
 
-std::unique_ptr<WebURLLoaderFactory>
+std::unique_ptr<URLLoaderFactory>
 DedicatedOrSharedWorkerFetchContextImpl::WrapURLLoaderFactory(
     CrossVariantMojoRemote<network::mojom::URLLoaderFactoryInterfaceBase>
         url_loader_factory) {
-  return std::make_unique<WebURLLoaderFactory>(
+  return std::make_unique<URLLoaderFactory>(
       base::MakeRefCounted<network::WrapperSharedURLLoaderFactory>(
           std::move(url_loader_factory)),
       cors_exempt_header_list_, terminate_sync_load_event_);
diff --git a/third_party/blink/renderer/platform/loader/fetch/url_loader/dedicated_or_shared_worker_fetch_context_impl.h b/third_party/blink/renderer/platform/loader/fetch/url_loader/dedicated_or_shared_worker_fetch_context_impl.h
index 5ad8e8ed26185..e5eb69c5f1d0d 100644
--- a/third_party/blink/renderer/platform/loader/fetch/url_loader/dedicated_or_shared_worker_fetch_context_impl.h
+++ b/third_party/blink/renderer/platform/loader/fetch/url_loader/dedicated_or_shared_worker_fetch_context_impl.h
@@ -114,8 +114,8 @@ class BLINK_PLATFORM_EXPORT DedicatedOrSharedWorkerFetchContextImpl final
   // WebWorkerFetchContext implementation:
   void SetTerminateSyncLoadEvent(base::WaitableEvent*) override;
   void InitializeOnWorkerThread(AcceptLanguagesWatcher*) override;
-  WebURLLoaderFactory* GetURLLoaderFactory() override;
-  std::unique_ptr<WebURLLoaderFactory> WrapURLLoaderFactory(
+  URLLoaderFactory* GetURLLoaderFactory() override;
+  std::unique_ptr<URLLoaderFactory> WrapURLLoaderFactory(
       CrossVariantMojoRemote<network::mojom::URLLoaderFactoryInterfaceBase>
           url_loader_factory) override;
   std::unique_ptr<WebCodeCacheLoader> CreateCodeCacheLoader(
@@ -285,7 +285,7 @@ class BLINK_PLATFORM_EXPORT DedicatedOrSharedWorkerFetchContextImpl final
   // This is owned by ThreadedMessagingProxyBase on the main thread.
   base::WaitableEvent* terminate_sync_load_event_ = nullptr;
 
-  // The WebURLLoaderFactory which was created and passed to
+  // The URLLoaderFactory which was created and passed to
   // Blink by GetURLLoaderFactory().
   std::unique_ptr<Factory> web_loader_factory_;
 
diff --git a/third_party/blink/renderer/platform/loader/fetch/url_loader/request_conversion.cc b/third_party/blink/renderer/platform/loader/fetch/url_loader/request_conversion.cc
index c1c72fe55b0b4..338c01d5060a6 100644
--- a/third_party/blink/renderer/platform/loader/fetch/url_loader/request_conversion.cc
+++ b/third_party/blink/renderer/platform/loader/fetch/url_loader/request_conversion.cc
@@ -139,7 +139,7 @@ mojom::ResourceType RequestContextToResourceType(
     case mojom::blink::RequestContextType::XML_HTTP_REQUEST:
       return mojom::ResourceType::kXhr;
 
-    // Navigation requests should not go through WebURLLoader.
+    // Navigation requests should not go through URLLoader.
     case mojom::blink::RequestContextType::FORM:
     case mojom::blink::RequestContextType::HYPERLINK:
     case mojom::blink::RequestContextType::LOCATION:
diff --git a/third_party/blink/renderer/platform/loader/fetch/url_loader/web_url_loader.cc b/third_party/blink/renderer/platform/loader/fetch/url_loader/url_loader.cc
similarity index 87%
rename from third_party/blink/renderer/platform/loader/fetch/url_loader/web_url_loader.cc
rename to third_party/blink/renderer/platform/loader/fetch/url_loader/url_loader.cc
index d5814dc92ab21..2cb20667a6dc3 100644
--- a/third_party/blink/renderer/platform/loader/fetch/url_loader/web_url_loader.cc
+++ b/third_party/blink/renderer/platform/loader/fetch/url_loader/url_loader.cc
@@ -2,7 +2,7 @@
 // Use of this source code is governed by a BSD-style license that can be
 // found in the LICENSE file.
 
-#include "third_party/blink/renderer/platform/loader/fetch/url_loader/web_url_loader.h"
+#include "third_party/blink/renderer/platform/loader/fetch/url_loader/url_loader.h"
 
 #include <stdint.h>
 
@@ -80,8 +80,8 @@
 #include "third_party/blink/renderer/platform/blob/blob_data.h"
 #include "third_party/blink/renderer/platform/loader/fetch/back_forward_cache_loader_helper.h"
 #include "third_party/blink/renderer/platform/loader/fetch/url_loader/sync_load_response.h"
+#include "third_party/blink/renderer/platform/loader/fetch/url_loader/url_loader_client.h"
 #include "third_party/blink/renderer/platform/loader/fetch/url_loader/web_resource_request_sender.h"
-#include "third_party/blink/renderer/platform/loader/fetch/url_loader/web_url_loader_client.h"
 #include "third_party/blink/renderer/platform/weborigin/kurl.h"
 #include "third_party/boringssl/src/include/openssl/ssl.h"
 #include "url/origin.h"
@@ -93,12 +93,12 @@ namespace blink {
 
 // Utilities -------------------------------------------------------------------
 
-// This inner class exists since the WebURLLoader may be deleted while inside a
-// call to WebURLLoaderClient. Refcounting is to keep the context from
-// being deleted if it may have work to do after calling into the client.
-class WebURLLoader::Context : public WebRequestPeer {
+// This inner class exists since the URLLoader may be deleted while inside a
+// call to URLLoaderClient. Refcounting is to keep the context from being
+// deleted if it may have work to do after calling into the client.
+class URLLoader::Context : public WebRequestPeer {
  public:
-  Context(WebURLLoader* loader,
+  Context(URLLoader* loader,
           const Vector<String>& cors_exempt_header_list,
           base::WaitableEvent* terminate_sync_load_event,
           scoped_refptr<base::SingleThreadTaskRunner> freezable_task_runner,
@@ -108,8 +108,8 @@ class WebURLLoader::Context : public WebRequestPeer {
           BackForwardCacheLoaderHelper* back_forward_cache_loader_helper);
 
   int request_id() const { return request_id_; }
-  WebURLLoaderClient* client() const { return client_; }
-  void set_client(WebURLLoaderClient* client) { client_ = client; }
+  URLLoaderClient* client() const { return client_; }
+  void set_client(URLLoaderClient* client) { client_ = client; }
 
   // Returns a task runner that might be unfreezable.
   // TODO(https://crbug.com/1137682): Rename this to GetTaskRunner instead once
@@ -160,7 +160,7 @@ class WebURLLoader::Context : public WebRequestPeer {
   static net::NetworkTrafficAnnotationTag GetTrafficAnnotationTag(
       network::ResourceRequest* request);
 
-  WebURLLoader* loader_;
+  URLLoader* loader_;
 
   KURL url_;
   // This is set in Start() and is used by SetSecurityStyleAndDetails() to
@@ -171,7 +171,7 @@ class WebURLLoader::Context : public WebRequestPeer {
   // DevTools request id to that new request, and it will propagate here.
   bool has_devtools_request_id_;
 
-  WebURLLoaderClient* client_;
+  URLLoaderClient* client_;
   // TODO(https://crbug.com/1137682): Remove |freezable_task_runner_|, migrating
   // the current usage to use |unfreezable_task_runner_| instead. Also, rename
   // |unfreezable_task_runner_| to |maybe_unfreezable_task_runner_| here and
@@ -200,10 +200,10 @@ class WebURLLoader::Context : public WebRequestPeer {
       back_forward_cache_loader_helper_;
 };
 
-// WebURLLoader::Context -------------------------------------------------------
+// URLLoader::Context -------------------------------------------------------
 
-WebURLLoader::Context::Context(
-    WebURLLoader* loader,
+URLLoader::Context::Context(
+    URLLoader* loader,
     const Vector<String>& cors_exempt_header_list,
     base::WaitableEvent* terminate_sync_load_event,
     scoped_refptr<base::SingleThreadTaskRunner> freezable_task_runner,
@@ -227,12 +227,12 @@ WebURLLoader::Context::Context(
 }
 
 scoped_refptr<base::SingleThreadTaskRunner>
-WebURLLoader::Context::GetMaybeUnfreezableTaskRunner() {
+URLLoader::Context::GetMaybeUnfreezableTaskRunner() {
   return unfreezable_task_runner_;
 }
 
-void WebURLLoader::Context::Cancel() {
-  TRACE_EVENT_WITH_FLOW0("loading", "WebURLLoader::Context::Cancel", this,
+void URLLoader::Context::Cancel() {
+  TRACE_EVENT_WITH_FLOW0("loading", "URLLoader::Context::Cancel", this,
                          TRACE_EVENT_FLAG_FLOW_IN);
   if (request_id_ != -1) {
     // TODO(https://crbug.com/1137682): Change this to use
@@ -246,15 +246,15 @@ void WebURLLoader::Context::Cancel() {
   loader_ = nullptr;
 }
 
-void WebURLLoader::Context::Freeze(WebLoaderFreezeMode mode) {
-  if (request_id_ != -1)
+void URLLoader::Context::Freeze(WebLoaderFreezeMode mode) {
+  if (request_id_ != -1) {
     resource_request_sender_->Freeze(mode);
+  }
   freeze_mode_ = mode;
 }
 
-void WebURLLoader::Context::DidChangePriority(
-    WebURLRequest::Priority new_priority,
-    int intra_priority_value) {
+void URLLoader::Context::DidChangePriority(WebURLRequest::Priority new_priority,
+                                           int intra_priority_value) {
   if (request_id_ != -1) {
     net::RequestPriority net_priority =
         WebURLRequest::ConvertToNetPriority(new_priority);
@@ -263,7 +263,7 @@ void WebURLLoader::Context::DidChangePriority(
   }
 }
 
-void WebURLLoader::Context::Start(
+void URLLoader::Context::Start(
     std::unique_ptr<network::ResourceRequest> request,
     scoped_refptr<WebURLRequestExtraData> passed_url_request_extra_data,
     bool pass_response_pipe_to_client,
@@ -301,12 +301,13 @@ void WebURLLoader::Context::Start(
       !IsRequestDestinationFrame(request_destination)) {
     auto throttle = url_request_extra_data->frame_request_blocker()
                         ->GetThrottleIfRequestsBlocked();
-    if (throttle)
+    if (throttle) {
       throttles.push_back(std::move(throttle));
+    }
   }
 
-  // TODO(falken): WebURLLoader should be able to get the top frame origin via
-  // some plumbing such as through ResourceLoader -> FetchContext -> LocalFrame
+  // TODO(falken): URLLoader should be able to get the top frame origin via some
+  // plumbing such as through ResourceLoader -> FetchContext -> LocalFrame
   // -> RenderHostImpl instead of needing WebURLRequestExtraData.
   Platform::Current()->AppendVariationsThrottles(
       url_request_extra_data->top_frame_origin(), &throttles);
@@ -340,7 +341,7 @@ void WebURLLoader::Context::Start(
     return;
   }
 
-  TRACE_EVENT_WITH_FLOW0("loading", "WebURLLoader::Context::Start", this,
+  TRACE_EVENT_WITH_FLOW0("loading", "URLLoader::Context::Start", this,
                          TRACE_EVENT_FLAG_FLOW_OUT);
   net::NetworkTrafficAnnotationTag tag = GetTrafficAnnotationTag(request.get());
   request_id_ = resource_request_sender_->SendAsync(
@@ -354,19 +355,21 @@ void WebURLLoader::Context::Start(
   }
 }
 
-void WebURLLoader::Context::OnUploadProgress(uint64_t position, uint64_t size) {
-  if (client_)
+void URLLoader::Context::OnUploadProgress(uint64_t position, uint64_t size) {
+  if (client_) {
     client_->DidSendData(position, size);
+  }
 }
 
-bool WebURLLoader::Context::OnReceivedRedirect(
+bool URLLoader::Context::OnReceivedRedirect(
     const net::RedirectInfo& redirect_info,
     network::mojom::URLResponseHeadPtr head,
     std::vector<std::string>* removed_headers) {
-  if (!client_)
+  if (!client_) {
     return false;
+  }
 
-  TRACE_EVENT_WITH_FLOW0("loading", "WebURLLoader::Context::OnReceivedRedirect",
+  TRACE_EVENT_WITH_FLOW0("loading", "URLLoader::Context::OnReceivedRedirect",
                          this,
                          TRACE_EVENT_FLAG_FLOW_IN | TRACE_EVENT_FLAG_FLOW_OUT);
 
@@ -383,13 +386,14 @@ bool WebURLLoader::Context::OnReceivedRedirect(
       redirect_info.insecure_scheme_was_upgraded);
 }
 
-void WebURLLoader::Context::OnReceivedResponse(
+void URLLoader::Context::OnReceivedResponse(
     network::mojom::URLResponseHeadPtr head,
     base::TimeTicks response_arrival_at_renderer) {
-  if (!client_)
+  if (!client_) {
     return;
+  }
 
-  TRACE_EVENT_WITH_FLOW0("loading", "WebURLLoader::Context::OnReceivedResponse",
+  TRACE_EVENT_WITH_FLOW0("loading", "URLLoader::Context::OnReceivedResponse",
                          this,
                          TRACE_EVENT_FLAG_FLOW_IN | TRACE_EVENT_FLAG_FLOW_OUT);
 
@@ -407,44 +411,45 @@ void WebURLLoader::Context::OnReceivedResponse(
 
   // DidReceiveResponse() may have triggered a cancel, causing the |client_| to
   // go away.
-  if (!client_)
+  if (!client_) {
     return;
+  }
 }
 
-void WebURLLoader::Context::OnStartLoadingResponseBody(
+void URLLoader::Context::OnStartLoadingResponseBody(
     mojo::ScopedDataPipeConsumerHandle body) {
-  if (client_)
+  if (client_) {
     client_->DidStartLoadingResponseBody(std::move(body));
+  }
 
-  TRACE_EVENT_WITH_FLOW0(
-      "loading", "WebURLLoader::Context::OnStartLoadingResponseBody", this,
-      TRACE_EVENT_FLAG_FLOW_IN | TRACE_EVENT_FLAG_FLOW_OUT);
+  TRACE_EVENT_WITH_FLOW0("loading",
+                         "URLLoader::Context::OnStartLoadingResponseBody", this,
+                         TRACE_EVENT_FLAG_FLOW_IN | TRACE_EVENT_FLAG_FLOW_OUT);
 }
 
-void WebURLLoader::Context::OnTransferSizeUpdated(int transfer_size_diff) {
+void URLLoader::Context::OnTransferSizeUpdated(int transfer_size_diff) {
   client_->DidReceiveTransferSizeUpdate(transfer_size_diff);
 }
 
-void WebURLLoader::Context::OnReceivedCachedMetadata(
-    mojo_base::BigBuffer data) {
-  if (!client_)
+void URLLoader::Context::OnReceivedCachedMetadata(mojo_base::BigBuffer data) {
+  if (!client_) {
     return;
-  TRACE_EVENT_WITH_FLOW1(
-      "loading", "WebURLLoader::Context::OnReceivedCachedMetadata", this,
-      TRACE_EVENT_FLAG_FLOW_IN | TRACE_EVENT_FLAG_FLOW_OUT, "length",
-      data.size());
+  }
+  TRACE_EVENT_WITH_FLOW1("loading",
+                         "URLLoader::Context::OnReceivedCachedMetadata", this,
+                         TRACE_EVENT_FLAG_FLOW_IN | TRACE_EVENT_FLAG_FLOW_OUT,
+                         "length", data.size());
   client_->DidReceiveCachedMetadata(std::move(data));
 }
 
-void WebURLLoader::Context::OnCompletedRequest(
+void URLLoader::Context::OnCompletedRequest(
     const network::URLLoaderCompletionStatus& status) {
   int64_t total_transfer_size = status.encoded_data_length;
   int64_t encoded_body_size = status.encoded_body_length;
 
   if (client_) {
-    TRACE_EVENT_WITH_FLOW0("loading",
-                           "WebURLLoader::Context::OnCompletedRequest", this,
-                           TRACE_EVENT_FLAG_FLOW_IN);
+    TRACE_EVENT_WITH_FLOW0("loading", "URLLoader::Context::OnCompletedRequest",
+                           this, TRACE_EVENT_FLAG_FLOW_IN);
 
     if (status.error_code != net::OK) {
       client_->DidFail(WebURLError::Create(status, url_),
@@ -459,28 +464,28 @@ void WebURLLoader::Context::OnCompletedRequest(
   }
 }
 
-WebURLLoader::Context::~Context() {
+URLLoader::Context::~Context() {
   // We must be already cancelled at this point.
   DCHECK_LT(request_id_, 0);
 }
 
-void WebURLLoader::Context::CancelBodyStreaming() {
+void URLLoader::Context::CancelBodyStreaming() {
   scoped_refptr<Context> protect(this);
 
   if (client_) {
     // TODO(yhirano): Set |stale_copy_in_cache| appropriately if possible.
     client_->DidFail(WebURLError(net::ERR_ABORTED, url_),
                      base::TimeTicks::Now(),
-                     WebURLLoaderClient::kUnknownEncodedDataLength, 0, 0);
+                     URLLoaderClient::kUnknownEncodedDataLength, 0, 0);
   }
 
   // Notify the browser process that the request is canceled.
   Cancel();
 }
 
-// WebURLLoader ----------------------------------------------------------------
+// URLLoader ----------------------------------------------------------------
 
-WebURLLoader::WebURLLoader(
+URLLoader::URLLoader(
     const Vector<String>& cors_exempt_header_list,
     base::WaitableEvent* terminate_sync_load_event,
     scoped_refptr<base::SingleThreadTaskRunner> freezable_task_runner,
@@ -497,19 +502,19 @@ WebURLLoader::WebURLLoader(
                            std::move(keep_alive_handle),
                            back_forward_cache_loader_helper)) {}
 
-WebURLLoader::WebURLLoader() = default;
+URLLoader::URLLoader() = default;
 
-WebURLLoader::~WebURLLoader() {
+URLLoader::~URLLoader() {
   Cancel();
 }
 
-void WebURLLoader::LoadSynchronously(
+void URLLoader::LoadSynchronously(
     std::unique_ptr<network::ResourceRequest> request,
     scoped_refptr<WebURLRequestExtraData> url_request_extra_data,
     bool pass_response_pipe_to_client,
     bool no_mime_sniffing,
     base::TimeDelta timeout_interval,
-    WebURLLoaderClient* client,
+    URLLoaderClient* client,
     WebURLResponse& response,
     absl::optional<WebURLError>& error,
     WebData& data,
@@ -518,10 +523,11 @@ void WebURLLoader::LoadSynchronously(
     scoped_refptr<BlobDataHandle>& downloaded_blob,
     std::unique_ptr<ResourceLoadInfoNotifierWrapper>
         resource_load_info_notifier_wrapper) {
-  if (!context_)
+  if (!context_) {
     return;
+  }
 
-  TRACE_EVENT0("loading", "WebURLLoader::loadSynchronously");
+  TRACE_EVENT0("loading", "URLLoader::loadSynchronously");
   SyncLoadResponse sync_load_response;
 
   DCHECK(!context_->client());
@@ -575,17 +581,18 @@ void WebURLLoader::LoadSynchronously(
   data.Assign(sync_load_response.data);
 }
 
-void WebURLLoader::LoadAsynchronously(
+void URLLoader::LoadAsynchronously(
     std::unique_ptr<network::ResourceRequest> request,
     scoped_refptr<WebURLRequestExtraData> url_request_extra_data,
     bool no_mime_sniffing,
     std::unique_ptr<ResourceLoadInfoNotifierWrapper>
         resource_load_info_notifier_wrapper,
-    WebURLLoaderClient* client) {
-  if (!context_)
+    URLLoaderClient* client) {
+  if (!context_) {
     return;
+  }
 
-  TRACE_EVENT_WITH_FLOW0("loading", "WebURLLoader::loadAsynchronously", this,
+  TRACE_EVENT_WITH_FLOW0("loading", "URLLoader::loadAsynchronously", this,
                          TRACE_EVENT_FLAG_FLOW_OUT);
   DCHECK(!context_->client());
 
@@ -596,30 +603,34 @@ void WebURLLoader::LoadAsynchronously(
                   std::move(resource_load_info_notifier_wrapper));
 }
 
-void WebURLLoader::Cancel() {
-  if (context_)
+void URLLoader::Cancel() {
+  if (context_) {
     context_->Cancel();
+  }
 }
 
-void WebURLLoader::Freeze(WebLoaderFreezeMode mode) {
-  if (context_)
+void URLLoader::Freeze(WebLoaderFreezeMode mode) {
+  if (context_) {
     context_->Freeze(mode);
+  }
 }
 
-void WebURLLoader::DidChangePriority(WebURLRequest::Priority new_priority,
-                                     int intra_priority_value) {
-  if (context_)
+void URLLoader::DidChangePriority(WebURLRequest::Priority new_priority,
+                                  int intra_priority_value) {
+  if (context_) {
     context_->DidChangePriority(new_priority, intra_priority_value);
+  }
 }
 
 scoped_refptr<base::SingleThreadTaskRunner>
-WebURLLoader::GetTaskRunnerForBodyLoader() {
-  if (!context_)
+URLLoader::GetTaskRunnerForBodyLoader() {
+  if (!context_) {
     return nullptr;
+  }
   return context_->GetMaybeUnfreezableTaskRunner();
 }
 
-void WebURLLoader::SetResourceRequestSenderForTesting(
+void URLLoader::SetResourceRequestSenderForTesting(
     std::unique_ptr<WebResourceRequestSender> resource_request_sender) {
   context_->SetResourceRequestSenderForTesting(  // IN-TEST
       std::move(resource_request_sender));
@@ -630,7 +641,7 @@ void WebURLLoader::SetResourceRequestSenderForTesting(
 // syntax highliting.
 // TODO(kinuko): Deprecate this, we basically need to know the destination
 // and if it's for favicon or not.
-net::NetworkTrafficAnnotationTag WebURLLoader::Context::GetTrafficAnnotationTag(
+net::NetworkTrafficAnnotationTag URLLoader::Context::GetTrafficAnnotationTag(
     network::ResourceRequest* request) {
   if (request->is_favicon) {
     return net::DefineNetworkTrafficAnnotation("favicon_loader", R"(
@@ -732,7 +743,7 @@ net::NetworkTrafficAnnotationTag WebURLLoader::Context::GetTrafficAnnotationTag(
   return net::NetworkTrafficAnnotationTag::NotReached();
 }
 
-void WebURLLoader::Context::SetResourceRequestSenderForTesting(
+void URLLoader::Context::SetResourceRequestSenderForTesting(
     std::unique_ptr<blink::WebResourceRequestSender> resource_request_sender) {
   resource_request_sender_ = std::move(resource_request_sender);
 }
diff --git a/third_party/blink/renderer/platform/loader/fetch/url_loader/web_url_loader.h b/third_party/blink/renderer/platform/loader/fetch/url_loader/url_loader.h
similarity index 93%
rename from third_party/blink/renderer/platform/loader/fetch/url_loader/web_url_loader.h
rename to third_party/blink/renderer/platform/loader/fetch/url_loader/url_loader.h
index 466a3c6bb0a7c..c2c3faa5f89eb 100644
--- a/third_party/blink/renderer/platform/loader/fetch/url_loader/web_url_loader.h
+++ b/third_party/blink/renderer/platform/loader/fetch/url_loader/url_loader.h
@@ -28,8 +28,8 @@
  * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
  */
 
-#ifndef THIRD_PARTY_BLINK_RENDERER_PLATFORM_LOADER_FETCH_URL_LOADER_WEB_URL_LOADER_H_
-#define THIRD_PARTY_BLINK_RENDERER_PLATFORM_LOADER_FETCH_URL_LOADER_WEB_URL_LOADER_H_
+#ifndef THIRD_PARTY_BLINK_RENDERER_PLATFORM_LOADER_FETCH_URL_LOADER_URL_LOADER_H_
+#define THIRD_PARTY_BLINK_RENDERER_PLATFORM_LOADER_FETCH_URL_LOADER_URL_LOADER_H_
 
 #include <stdint.h>
 
@@ -66,15 +66,15 @@ class BlobDataHandle;
 class WebData;
 class WebResourceRequestSender;
 class WebURLRequestExtraData;
-class WebURLLoaderClient;
+class URLLoaderClient;
 class WebURLResponse;
 struct WebURLError;
 
-class BLINK_PLATFORM_EXPORT WebURLLoader {
+class BLINK_PLATFORM_EXPORT URLLoader {
  public:
   // When non-null |keep_alive_handle| is specified, this loader prolongs
   // this render process's lifetime.
-  WebURLLoader(
+  URLLoader(
       const Vector<String>& cors_exempt_header_list,
       base::WaitableEvent* terminate_sync_load_event,
       scoped_refptr<base::SingleThreadTaskRunner> freezable_task_runner,
@@ -82,12 +82,12 @@ class BLINK_PLATFORM_EXPORT WebURLLoader {
       scoped_refptr<network::SharedURLLoaderFactory> url_loader_factory,
       mojo::PendingRemote<mojom::blink::KeepAliveHandle> keep_alive_handle,
       BackForwardCacheLoaderHelper* back_forward_cache_loader_helper);
-  WebURLLoader(const WebURLLoader&) = delete;
-  WebURLLoader& operator=(const WebURLLoader&) = delete;
-  WebURLLoader();
+  URLLoader(const URLLoader&) = delete;
+  URLLoader& operator=(const URLLoader&) = delete;
+  URLLoader();
 
-  // The WebURLLoader may be deleted in a call to its client.
-  virtual ~WebURLLoader();
+  // The URLLoader may be deleted in a call to its client.
+  virtual ~URLLoader();
 
   // Load the request synchronously, returning results directly to the
   // caller upon completion.  There is no mechanism to interrupt a
@@ -101,7 +101,7 @@ class BLINK_PLATFORM_EXPORT WebURLLoader {
       bool pass_response_pipe_to_client,
       bool no_mime_sniffing,
       base::TimeDelta timeout_interval,
-      WebURLLoaderClient* client,
+      URLLoaderClient* client,
       WebURLResponse& response,
       absl::optional<WebURLError>& error,
       WebData& data,
@@ -120,7 +120,7 @@ class BLINK_PLATFORM_EXPORT WebURLLoader {
       bool no_mime_sniffing,
       std::unique_ptr<ResourceLoadInfoNotifierWrapper>
           resource_load_info_notifier_wrapper,
-      WebURLLoaderClient* client);
+      URLLoaderClient* client);
 
   // Freezes the loader. See blink/renderer/platform/loader/README.md for the
   // general concept of "freezing" in the loading module. See
@@ -151,4 +151,4 @@ class BLINK_PLATFORM_EXPORT WebURLLoader {
 
 }  // namespace blink
 
-#endif  // THIRD_PARTY_BLINK_RENDERER_PLATFORM_LOADER_FETCH_URL_LOADER_WEB_URL_LOADER_H_
+#endif  // THIRD_PARTY_BLINK_RENDERER_PLATFORM_LOADER_FETCH_URL_LOADER_URL_LOADER_H_
diff --git a/third_party/blink/renderer/platform/loader/fetch/url_loader/url_loader_client.cc b/third_party/blink/renderer/platform/loader/fetch/url_loader/url_loader_client.cc
new file mode 100644
index 0000000000000..c5dfe9704dbb1
--- /dev/null
+++ b/third_party/blink/renderer/platform/loader/fetch/url_loader/url_loader_client.cc
@@ -0,0 +1,10 @@
+// Copyright 2015 The Chromium Authors
+// Use of this source code is governed by a BSD-style license that can be
+// found in the LICENSE file.
+
+#include "third_party/blink/renderer/platform/loader/fetch/url_loader/url_loader_client.h"
+
+// This url_loader_client.cc, which includes only url_loader_client.h, because
+// URLLoaderClient is not compiled without this cc file.
+// So if we don't have this cc file, we will see unresolved symbol error when
+// constructor/destructor's address is required.
diff --git a/third_party/blink/renderer/platform/loader/fetch/url_loader/web_url_loader_client.h b/third_party/blink/renderer/platform/loader/fetch/url_loader/url_loader_client.h
similarity index 96%
rename from third_party/blink/renderer/platform/loader/fetch/url_loader/web_url_loader_client.h
rename to third_party/blink/renderer/platform/loader/fetch/url_loader/url_loader_client.h
index ed7107bd09b7b..fdc50ecdaa193 100644
--- a/third_party/blink/renderer/platform/loader/fetch/url_loader/web_url_loader_client.h
+++ b/third_party/blink/renderer/platform/loader/fetch/url_loader/url_loader_client.h
@@ -28,8 +28,8 @@
  * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
  */
 
-#ifndef THIRD_PARTY_BLINK_RENDERER_PLATFORM_LOADER_FETCH_URL_LOADER_WEB_URL_LOADER_CLIENT_H_
-#define THIRD_PARTY_BLINK_RENDERER_PLATFORM_LOADER_FETCH_URL_LOADER_WEB_URL_LOADER_CLIENT_H_
+#ifndef THIRD_PARTY_BLINK_RENDERER_PLATFORM_LOADER_FETCH_URL_LOADER_URL_LOADER_CLIENT_H_
+#define THIRD_PARTY_BLINK_RENDERER_PLATFORM_LOADER_FETCH_URL_LOADER_URL_LOADER_CLIENT_H_
 
 #include <memory>
 #include "base/functional/callback.h"
@@ -52,7 +52,7 @@ class WebURL;
 class WebURLResponse;
 struct WebURLError;
 
-class BLINK_PLATFORM_EXPORT WebURLLoaderClient {
+class BLINK_PLATFORM_EXPORT URLLoaderClient {
  public:
   // Called when following a redirect. |new_.*| arguments contain the
   // information about the received redirect. When |report_raw_headers| is
@@ -129,9 +129,9 @@ class BLINK_PLATFORM_EXPORT WebURLLoaderClient {
   static const int64_t kUnknownEncodedDataLength = -1;
 
  protected:
-  virtual ~WebURLLoaderClient() = default;
+  virtual ~URLLoaderClient() = default;
 };
 
 }  // namespace blink
 
-#endif  // THIRD_PARTY_BLINK_RENDERER_PLATFORM_LOADER_FETCH_URL_LOADER_WEB_URL_LOADER_CLIENT_H_
+#endif  // THIRD_PARTY_BLINK_RENDERER_PLATFORM_LOADER_FETCH_URL_LOADER_URL_LOADER_CLIENT_H_
diff --git a/third_party/blink/renderer/platform/loader/fetch/url_loader/web_url_loader_factory.cc b/third_party/blink/renderer/platform/loader/fetch/url_loader/url_loader_factory.cc
similarity index 82%
rename from third_party/blink/renderer/platform/loader/fetch/url_loader/web_url_loader_factory.cc
rename to third_party/blink/renderer/platform/loader/fetch/url_loader/url_loader_factory.cc
index 057d40da51572..cc2326129d6b9 100644
--- a/third_party/blink/renderer/platform/loader/fetch/url_loader/web_url_loader_factory.cc
+++ b/third_party/blink/renderer/platform/loader/fetch/url_loader/url_loader_factory.cc
@@ -2,17 +2,17 @@
 // Use of this source code is governed by a BSD-style license that can be
 // found in the LICENSE file.
 
-#include "third_party/blink/renderer/platform/loader/fetch/url_loader/web_url_loader_factory.h"
+#include "third_party/blink/renderer/platform/loader/fetch/url_loader/url_loader_factory.h"
 
 #include "base/check.h"
 #include "base/synchronization/waitable_event.h"
 #include "base/task/single_thread_task_runner.h"
 #include "services/network/public/cpp/shared_url_loader_factory.h"
-#include "third_party/blink/renderer/platform/loader/fetch/url_loader/web_url_loader.h"
+#include "third_party/blink/renderer/platform/loader/fetch/url_loader/url_loader.h"
 
 namespace blink {
 
-WebURLLoaderFactory::WebURLLoaderFactory(
+URLLoaderFactory::URLLoaderFactory(
     scoped_refptr<network::SharedURLLoaderFactory> loader_factory,
     const Vector<String>& cors_exempt_header_list,
     base::WaitableEvent* terminate_sync_load_event)
@@ -22,11 +22,11 @@ WebURLLoaderFactory::WebURLLoaderFactory(
   DCHECK(loader_factory_);
 }
 
-WebURLLoaderFactory::WebURLLoaderFactory() = default;
+URLLoaderFactory::URLLoaderFactory() = default;
 
-WebURLLoaderFactory::~WebURLLoaderFactory() = default;
+URLLoaderFactory::~URLLoaderFactory() = default;
 
-std::unique_ptr<WebURLLoader> WebURLLoaderFactory::CreateURLLoader(
+std::unique_ptr<URLLoader> URLLoaderFactory::CreateURLLoader(
     const WebURLRequest& request,
     scoped_refptr<base::SingleThreadTaskRunner> freezable_task_runner,
     scoped_refptr<base::SingleThreadTaskRunner> unfreezable_task_runner,
@@ -34,7 +34,7 @@ std::unique_ptr<WebURLLoader> WebURLLoaderFactory::CreateURLLoader(
     BackForwardCacheLoaderHelper* back_forward_cache_loader_helper) {
   DCHECK(freezable_task_runner);
   DCHECK(unfreezable_task_runner);
-  return std::make_unique<WebURLLoader>(
+  return std::make_unique<URLLoader>(
       cors_exempt_header_list_, terminate_sync_load_event_,
       std::move(freezable_task_runner), std::move(unfreezable_task_runner),
       loader_factory_, std::move(keep_alive_handle),
diff --git a/third_party/blink/renderer/platform/loader/fetch/url_loader/web_url_loader_factory.h b/third_party/blink/renderer/platform/loader/fetch/url_loader/url_loader_factory.h
similarity index 76%
rename from third_party/blink/renderer/platform/loader/fetch/url_loader/web_url_loader_factory.h
rename to third_party/blink/renderer/platform/loader/fetch/url_loader/url_loader_factory.h
index c0288a79f38cf..6ae716fc05807 100644
--- a/third_party/blink/renderer/platform/loader/fetch/url_loader/web_url_loader_factory.h
+++ b/third_party/blink/renderer/platform/loader/fetch/url_loader/url_loader_factory.h
@@ -2,8 +2,8 @@
 // Use of this source code is governed by a BSD-style license that can be
 // found in the LICENSE file.
 
-#ifndef THIRD_PARTY_BLINK_RENDERER_PLATFORM_LOADER_FETCH_URL_LOADER_WEB_URL_LOADER_FACTORY_H_
-#define THIRD_PARTY_BLINK_RENDERER_PLATFORM_LOADER_FETCH_URL_LOADER_WEB_URL_LOADER_FACTORY_H_
+#ifndef THIRD_PARTY_BLINK_RENDERER_PLATFORM_LOADER_FETCH_URL_LOADER_URL_LOADER_FACTORY_H_
+#define THIRD_PARTY_BLINK_RENDERER_PLATFORM_LOADER_FETCH_URL_LOADER_URL_LOADER_FACTORY_H_
 
 #include <memory>
 #include <string>
@@ -29,28 +29,28 @@ class SharedURLLoaderFactory;
 namespace blink {
 
 class BackForwardCacheLoaderHelper;
-class WebURLLoader;
+class URLLoader;
 class WebURLRequest;
 
 // An abstract interface to create a URLLoader. It is expected that each
-// loading context holds its own per-context WebURLLoaderFactory.
-class BLINK_PLATFORM_EXPORT WebURLLoaderFactory {
+// loading context holds its own per-context URLLoaderFactory.
+class BLINK_PLATFORM_EXPORT URLLoaderFactory {
  public:
-  WebURLLoaderFactory(
+  URLLoaderFactory(
       scoped_refptr<network::SharedURLLoaderFactory> loader_factory,
       const Vector<String>& cors_exempt_header_list,
       base::WaitableEvent* terminate_sync_load_event);
-  WebURLLoaderFactory();
-  WebURLLoaderFactory(const WebURLLoaderFactory&) = delete;
-  WebURLLoaderFactory& operator=(const WebURLLoaderFactory&) = delete;
-  virtual ~WebURLLoaderFactory();
+  URLLoaderFactory();
+  URLLoaderFactory(const URLLoaderFactory&) = delete;
+  URLLoaderFactory& operator=(const URLLoaderFactory&) = delete;
+  virtual ~URLLoaderFactory();
 
-  // Returns a new WebURLLoader instance. This should internally choose
+  // Returns a new URLLoader instance. This should internally choose
   // the most appropriate URLLoaderFactory implementation.
   // TODO(yuzus): Only take unfreezable task runner once both
   // URLLoaderClientImpl and ResponseBodyLoader use unfreezable task runner.
   // This currently takes two task runners: freezable and unfreezable one.
-  virtual std::unique_ptr<WebURLLoader> CreateURLLoader(
+  virtual std::unique_ptr<URLLoader> CreateURLLoader(
       const WebURLRequest& webreq,
       scoped_refptr<base::SingleThreadTaskRunner> freezable_task_runner,
       scoped_refptr<base::SingleThreadTaskRunner> unfreezable_task_runner,
@@ -65,12 +65,12 @@ class BLINK_PLATFORM_EXPORT WebURLLoaderFactory {
 
 // A test version of the above factory interface, which supports cloning the
 // factory.
-class WebURLLoaderFactoryForTest : public WebURLLoaderFactory {
+class URLLoaderFactoryForTest : public URLLoaderFactory {
  public:
   // Clones this factory.
-  virtual std::unique_ptr<WebURLLoaderFactoryForTest> Clone() = 0;
+  virtual std::unique_ptr<URLLoaderFactoryForTest> Clone() = 0;
 };
 
 }  // namespace blink
 
-#endif  // THIRD_PARTY_BLINK_RENDERER_PLATFORM_LOADER_FETCH_URL_LOADER_WEB_URL_LOADER_FACTORY_H_
+#endif  // THIRD_PARTY_BLINK_RENDERER_PLATFORM_LOADER_FETCH_URL_LOADER_URL_LOADER_FACTORY_H_
diff --git a/third_party/blink/renderer/platform/loader/fetch/url_loader/web_url_loader_unittest.cc b/third_party/blink/renderer/platform/loader/fetch/url_loader/url_loader_unittest.cc
similarity index 92%
rename from third_party/blink/renderer/platform/loader/fetch/url_loader/web_url_loader_unittest.cc
rename to third_party/blink/renderer/platform/loader/fetch/url_loader/url_loader_unittest.cc
index f5d460e9c4064..535c3f830d64f 100644
--- a/third_party/blink/renderer/platform/loader/fetch/url_loader/web_url_loader_unittest.cc
+++ b/third_party/blink/renderer/platform/loader/fetch/url_loader/url_loader_unittest.cc
@@ -50,9 +50,9 @@
 #include "third_party/blink/public/platform/web_vector.h"
 #include "third_party/blink/renderer/platform/loader/fetch/resource_response.h"
 #include "third_party/blink/renderer/platform/loader/fetch/url_loader/sync_load_response.h"
+#include "third_party/blink/renderer/platform/loader/fetch/url_loader/url_loader.h"
+#include "third_party/blink/renderer/platform/loader/fetch/url_loader/url_loader_client.h"
 #include "third_party/blink/renderer/platform/loader/fetch/url_loader/web_resource_request_sender.h"
-#include "third_party/blink/renderer/platform/loader/fetch/url_loader/web_url_loader.h"
-#include "third_party/blink/renderer/platform/loader/fetch/url_loader/web_url_loader_client.h"
 #include "third_party/blink/renderer/platform/weborigin/kurl.h"
 #include "url/gurl.h"
 #include "url/origin.h"
@@ -159,10 +159,10 @@ class FakeURLLoaderFactory final : public network::mojom::URLLoaderFactory {
   }
 };
 
-class TestWebURLLoaderClient : public WebURLLoaderClient {
+class TestURLLoaderClient : public URLLoaderClient {
  public:
-  TestWebURLLoaderClient()
-      : loader_(new WebURLLoader(
+  TestURLLoaderClient()
+      : loader_(new URLLoader(
             /*cors_exempt_header_list=*/Vector<String>(),
             /*terminate_sync_load_event=*/nullptr,
             scheduler::GetSingleThreadTaskRunnerForTesting(),
@@ -180,22 +180,23 @@ class TestWebURLLoaderClient : public WebURLLoaderClient {
         did_receive_response_(false),
         did_finish_(false) {}
 
-  TestWebURLLoaderClient(const TestWebURLLoaderClient&) = delete;
-  TestWebURLLoaderClient& operator=(const TestWebURLLoaderClient&) = delete;
+  TestURLLoaderClient(const TestURLLoaderClient&) = delete;
+  TestURLLoaderClient& operator=(const TestURLLoaderClient&) = delete;
 
-  ~TestWebURLLoaderClient() override {
+  ~TestURLLoaderClient() override {
     // During the deconstruction of the `loader_`, the request context will be
     // released asynchronously and we must ensure that the request context has
     // been deleted practically before the test quits, thus, memory leak will
     // not be reported on the ASAN build. So, we call 'reset()' to trigger the
     // deconstruction, and then execute `RunUntilIdle()` to empty the task queue
     // to achieve that.
-    if (loader_)
+    if (loader_) {
       loader_.reset();
+    }
     base::RunLoop().RunUntilIdle();
   }
 
-  // WebURLLoaderClient implementation:
+  // URLLoaderClient implementation:
   bool WillFollowRedirect(const WebURL& new_url,
                           const net::SiteForCookies& new_site_for_cookies,
                           const WebString& new_referrer,
@@ -211,8 +212,9 @@ class TestWebURLLoaderClient : public WebURLLoaderClient {
     EXPECT_FALSE(did_receive_redirect_);
     did_receive_redirect_ = true;
 
-    if (delete_on_receive_redirect_)
+    if (delete_on_receive_redirect_) {
       loader_.reset();
+    }
 
     return true;
   }
@@ -227,8 +229,9 @@ class TestWebURLLoaderClient : public WebURLLoaderClient {
 
     did_receive_response_ = true;
     response_ = response;
-    if (delete_on_receive_response_)
+    if (delete_on_receive_response_) {
       loader_.reset();
+    }
   }
 
   void DidStartLoadingResponseBody(
@@ -254,8 +257,9 @@ class TestWebURLLoaderClient : public WebURLLoaderClient {
     EXPECT_FALSE(did_finish_);
     did_finish_ = true;
 
-    if (delete_on_finish_)
+    if (delete_on_finish_) {
       loader_.reset();
+    }
   }
 
   void DidFail(const WebURLError& error,
@@ -267,11 +271,12 @@ class TestWebURLLoaderClient : public WebURLLoaderClient {
     EXPECT_FALSE(did_finish_);
     error_ = error;
 
-    if (delete_on_fail_)
+    if (delete_on_fail_) {
       loader_.reset();
+    }
   }
 
-  WebURLLoader* loader() { return loader_.get(); }
+  URLLoader* loader() { return loader_.get(); }
   void DeleteLoader() { loader_.reset(); }
 
   void set_delete_on_receive_redirect() { delete_on_receive_redirect_ = true; }
@@ -289,7 +294,7 @@ class TestWebURLLoaderClient : public WebURLLoaderClient {
 
  private:
   FakeURLLoaderFactory fake_url_loader_factory_;
-  std::unique_ptr<WebURLLoader> loader_;
+  std::unique_ptr<URLLoader> loader_;
 
   bool delete_on_receive_redirect_;
   bool delete_on_receive_response_;
@@ -305,15 +310,15 @@ class TestWebURLLoaderClient : public WebURLLoaderClient {
   WebURLResponse response_;
 };
 
-class WebURLLoaderTest : public testing::Test {
+class URLLoaderTest : public testing::Test {
  public:
-  WebURLLoaderTest() : client_(std::make_unique<TestWebURLLoaderClient>()) {
+  URLLoaderTest() : client_(std::make_unique<TestURLLoaderClient>()) {
     auto sender = std::make_unique<MockResourceRequestSender>();
     sender_ = sender.get();
     client_->loader()->SetResourceRequestSenderForTesting(std::move(sender));
   }
 
-  ~WebURLLoaderTest() override = default;
+  ~URLLoaderTest() override = default;
 
   void DoStartAsyncRequest() {
     auto request = std::make_unique<network::ResourceRequest>();
@@ -400,18 +405,18 @@ class WebURLLoaderTest : public testing::Test {
     EXPECT_EQ(net::ERR_FAILED, client()->error()->reason());
   }
 
-  TestWebURLLoaderClient* client() { return client_.get(); }
+  TestURLLoaderClient* client() { return client_.get(); }
   MockResourceRequestSender* sender() { return sender_; }
   WebRequestPeer* peer() { return sender_->peer(); }
 
  private:
   base::test::SingleThreadTaskEnvironment task_environment_;
   mojo::ScopedDataPipeProducerHandle body_handle_;
-  std::unique_ptr<TestWebURLLoaderClient> client_;
+  std::unique_ptr<TestURLLoaderClient> client_;
   MockResourceRequestSender* sender_ = nullptr;
 };
 
-TEST_F(WebURLLoaderTest, Success) {
+TEST_F(URLLoaderTest, Success) {
   DoStartAsyncRequest();
   DoReceiveResponse();
   DoStartLoadingResponseBody();
@@ -420,7 +425,7 @@ TEST_F(WebURLLoaderTest, Success) {
   EXPECT_TRUE(client()->did_receive_response_body());
 }
 
-TEST_F(WebURLLoaderTest, Redirect) {
+TEST_F(URLLoaderTest, Redirect) {
   DoStartAsyncRequest();
   DoReceiveRedirect();
   DoReceiveResponse();
@@ -430,7 +435,7 @@ TEST_F(WebURLLoaderTest, Redirect) {
   EXPECT_TRUE(client()->did_receive_response_body());
 }
 
-TEST_F(WebURLLoaderTest, Failure) {
+TEST_F(URLLoaderTest, Failure) {
   DoStartAsyncRequest();
   DoReceiveResponse();
   DoStartLoadingResponseBody();
@@ -438,21 +443,21 @@ TEST_F(WebURLLoaderTest, Failure) {
   EXPECT_FALSE(sender()->canceled());
 }
 
-// The client may delete the WebURLLoader during any callback from the loader.
+// The client may delete the URLLoader during any callback from the loader.
 // These tests make sure that doesn't result in a crash.
-TEST_F(WebURLLoaderTest, DeleteOnReceiveRedirect) {
+TEST_F(URLLoaderTest, DeleteOnReceiveRedirect) {
   client()->set_delete_on_receive_redirect();
   DoStartAsyncRequest();
   DoReceiveRedirect();
 }
 
-TEST_F(WebURLLoaderTest, DeleteOnReceiveResponse) {
+TEST_F(URLLoaderTest, DeleteOnReceiveResponse) {
   client()->set_delete_on_receive_response();
   DoStartAsyncRequest();
   DoReceiveResponse();
 }
 
-TEST_F(WebURLLoaderTest, DeleteOnFinish) {
+TEST_F(URLLoaderTest, DeleteOnFinish) {
   client()->set_delete_on_finish();
   DoStartAsyncRequest();
   DoReceiveResponse();
@@ -460,7 +465,7 @@ TEST_F(WebURLLoaderTest, DeleteOnFinish) {
   DoCompleteRequest();
 }
 
-TEST_F(WebURLLoaderTest, DeleteOnFail) {
+TEST_F(URLLoaderTest, DeleteOnFail) {
   client()->set_delete_on_fail();
   DoStartAsyncRequest();
   DoReceiveResponse();
@@ -468,14 +473,14 @@ TEST_F(WebURLLoaderTest, DeleteOnFail) {
   DoFailRequest();
 }
 
-TEST_F(WebURLLoaderTest, DefersLoadingBeforeStart) {
+TEST_F(URLLoaderTest, DefersLoadingBeforeStart) {
   client()->loader()->Freeze(WebLoaderFreezeMode::kStrict);
   EXPECT_EQ(sender()->freeze_mode(), WebLoaderFreezeMode::kNone);
   DoStartAsyncRequest();
   EXPECT_EQ(sender()->freeze_mode(), WebLoaderFreezeMode::kStrict);
 }
 
-TEST_F(WebURLLoaderTest, ResponseIPEndpoint) {
+TEST_F(URLLoaderTest, ResponseIPEndpoint) {
   KURL url("http://example.test/");
 
   struct TestCase {
@@ -505,7 +510,7 @@ TEST_F(WebURLLoaderTest, ResponseIPEndpoint) {
   };
 }
 
-TEST_F(WebURLLoaderTest, ResponseAddressSpace) {
+TEST_F(URLLoaderTest, ResponseAddressSpace) {
   KURL url("http://foo.example");
 
   network::mojom::URLResponseHead head;
@@ -516,7 +521,7 @@ TEST_F(WebURLLoaderTest, ResponseAddressSpace) {
   EXPECT_EQ(network::mojom::IPAddressSpace::kPrivate, response.AddressSpace());
 }
 
-TEST_F(WebURLLoaderTest, ClientAddressSpace) {
+TEST_F(URLLoaderTest, ClientAddressSpace) {
   KURL url("http://foo.example");
 
   network::mojom::URLResponseHead head;
@@ -528,7 +533,7 @@ TEST_F(WebURLLoaderTest, ClientAddressSpace) {
             response.ClientAddressSpace());
 }
 
-TEST_F(WebURLLoaderTest, SSLInfo) {
+TEST_F(URLLoaderTest, SSLInfo) {
   KURL url("https://test.example/");
 
   net::CertificateList certs;
@@ -560,7 +565,7 @@ TEST_F(WebURLLoaderTest, SSLInfo) {
 
 // Verifies that the lengths used by the PerformanceResourceTiming API are
 // correctly assigned for sync XHR.
-TEST_F(WebURLLoaderTest, SyncLengths) {
+TEST_F(URLLoaderTest, SyncLengths) {
   static const char kBodyData[] = "Today is Thursday";
   const uint64_t kEncodedBodyLength = 30;
   const int kEncodedDataLength = 130;
@@ -604,7 +609,7 @@ TEST_F(WebURLLoaderTest, SyncLengths) {
 
 // Verifies that WebURLResponse::Create() copies AuthChallengeInfo to the
 // response.
-TEST_F(WebURLLoaderTest, AuthChallengeInfo) {
+TEST_F(URLLoaderTest, AuthChallengeInfo) {
   network::mojom::URLResponseHead head;
   net::AuthChallengeInfo auth_challenge_info;
   auth_challenge_info.is_proxy = true;
diff --git a/third_party/blink/renderer/platform/loader/fetch/url_loader/web_resource_request_sender.h b/third_party/blink/renderer/platform/loader/fetch/url_loader/web_resource_request_sender.h
index 0501d3dc609e1..231efa297d7f5 100644
--- a/third_party/blink/renderer/platform/loader/fetch/url_loader/web_resource_request_sender.h
+++ b/third_party/blink/renderer/platform/loader/fetch/url_loader/web_resource_request_sender.h
@@ -58,7 +58,7 @@ struct SyncLoadResponse;
 
 // This class creates a PendingRequestInfo object and handles sending a resource
 // request asynchronously or synchronously, and it's owned by
-// WebURLLoaderImpl::Context or SyncLoadContext.
+// URLLoader::Context or SyncLoadContext.
 class BLINK_PLATFORM_EXPORT WebResourceRequestSender {
  public:
   WebResourceRequestSender();
diff --git a/third_party/blink/renderer/platform/loader/fetch/url_loader/web_url_loader_client.cc b/third_party/blink/renderer/platform/loader/fetch/url_loader/web_url_loader_client.cc
deleted file mode 100644
index 7bba818091e07..0000000000000
--- a/third_party/blink/renderer/platform/loader/fetch/url_loader/web_url_loader_client.cc
+++ /dev/null
@@ -1,11 +0,0 @@
-// Copyright 2015 The Chromium Authors
-// Use of this source code is governed by a BSD-style license that can be
-// found in the LICENSE file.
-
-#include "third_party/blink/renderer/platform/loader/fetch/url_loader/web_url_loader_client.h"
-
-// This WebURLLoaderClient.cpp, which includes only
-// WebURLLoaderClient.h, should be in Source/platform/exported,
-// because WebURLLoaderClient is not compiled without this cpp.
-// So if we don't have this cpp, we will see unresolved symbol error
-// when constructor/destructor's address is required.
diff --git a/third_party/blink/renderer/platform/loader/internet_disconnected_web_url_loader.cc b/third_party/blink/renderer/platform/loader/internet_disconnected_url_loader.cc
similarity index 73%
rename from third_party/blink/renderer/platform/loader/internet_disconnected_web_url_loader.cc
rename to third_party/blink/renderer/platform/loader/internet_disconnected_url_loader.cc
index 6dd5328032f99..a719ea84f417b 100644
--- a/third_party/blink/renderer/platform/loader/internet_disconnected_web_url_loader.cc
+++ b/third_party/blink/renderer/platform/loader/internet_disconnected_url_loader.cc
@@ -2,7 +2,7 @@
 // Use of this source code is governed by a BSD-style license that can be
 // found in the LICENSE file.
 
-#include "third_party/blink/renderer/platform/loader/internet_disconnected_web_url_loader.h"
+#include "third_party/blink/renderer/platform/loader/internet_disconnected_url_loader.h"
 
 #include "base/functional/bind.h"
 #include "base/task/single_thread_task_runner.h"
@@ -13,36 +13,36 @@
 #include "third_party/blink/public/platform/web_url_error.h"
 #include "third_party/blink/public/platform/web_url_request.h"
 #include "third_party/blink/public/platform/web_url_request_extra_data.h"
-#include "third_party/blink/renderer/platform/loader/fetch/url_loader/web_url_loader_client.h"
+#include "third_party/blink/renderer/platform/loader/fetch/url_loader/url_loader_client.h"
 #include "third_party/blink/renderer/platform/weborigin/kurl.h"
 
 namespace blink {
 
-std::unique_ptr<WebURLLoader>
-InternetDisconnectedWebURLLoaderFactory::CreateURLLoader(
+std::unique_ptr<URLLoader>
+InternetDisconnectedURLLoaderFactory::CreateURLLoader(
     const WebURLRequest&,
     scoped_refptr<base::SingleThreadTaskRunner> freezable_task_runner,
     scoped_refptr<base::SingleThreadTaskRunner> unfreezable_task_runner,
     mojo::PendingRemote<mojom::blink::KeepAliveHandle> keep_alive_handle,
     BackForwardCacheLoaderHelper* back_forward_cache_loader_helper) {
   DCHECK(freezable_task_runner);
-  return std::make_unique<InternetDisconnectedWebURLLoader>(
+  return std::make_unique<InternetDisconnectedURLLoader>(
       std::move(freezable_task_runner));
 }
 
-InternetDisconnectedWebURLLoader::InternetDisconnectedWebURLLoader(
+InternetDisconnectedURLLoader::InternetDisconnectedURLLoader(
     scoped_refptr<base::SingleThreadTaskRunner> freezable_task_runner)
     : task_runner_(std::move(freezable_task_runner)) {}
 
-InternetDisconnectedWebURLLoader::~InternetDisconnectedWebURLLoader() = default;
+InternetDisconnectedURLLoader::~InternetDisconnectedURLLoader() = default;
 
-void InternetDisconnectedWebURLLoader::LoadSynchronously(
+void InternetDisconnectedURLLoader::LoadSynchronously(
     std::unique_ptr<network::ResourceRequest> request,
     scoped_refptr<WebURLRequestExtraData> url_request_extra_data,
     bool pass_response_pipe_to_client,
     bool no_mime_sniffing,
     base::TimeDelta timeout_interval,
-    WebURLLoaderClient*,
+    URLLoaderClient*,
     WebURLResponse&,
     absl::optional<WebURLError>&,
     WebData&,
@@ -54,19 +54,18 @@ void InternetDisconnectedWebURLLoader::LoadSynchronously(
   NOTREACHED();
 }
 
-void InternetDisconnectedWebURLLoader::LoadAsynchronously(
+void InternetDisconnectedURLLoader::LoadAsynchronously(
     std::unique_ptr<network::ResourceRequest> request,
     scoped_refptr<WebURLRequestExtraData> url_request_extra_data,
     bool no_mime_sniffing,
     std::unique_ptr<blink::ResourceLoadInfoNotifierWrapper>
         resource_load_info_notifier_wrapper,
-    WebURLLoaderClient* client) {
+    URLLoaderClient* client) {
   DCHECK(task_runner_);
   task_runner_->PostTask(
       FROM_HERE,
       base::BindOnce(
-          &InternetDisconnectedWebURLLoader::DidFail,
-          weak_factory_.GetWeakPtr(),
+          &InternetDisconnectedURLLoader::DidFail, weak_factory_.GetWeakPtr(),
           // It is safe to use Unretained(client), because |client| is a
           // ResourceLoader which owns |this|, and we are binding with weak ptr
           // of |this| here.
@@ -74,14 +73,13 @@ void InternetDisconnectedWebURLLoader::LoadAsynchronously(
           WebURLError(net::ERR_INTERNET_DISCONNECTED, KURL(request->url))));
 }
 
-void InternetDisconnectedWebURLLoader::Freeze(WebLoaderFreezeMode) {}
+void InternetDisconnectedURLLoader::Freeze(WebLoaderFreezeMode) {}
 
-void InternetDisconnectedWebURLLoader::DidChangePriority(
-    WebURLRequest::Priority,
-    int) {}
+void InternetDisconnectedURLLoader::DidChangePriority(WebURLRequest::Priority,
+                                                      int) {}
 
-void InternetDisconnectedWebURLLoader::DidFail(WebURLLoaderClient* client,
-                                               const WebURLError& error) {
+void InternetDisconnectedURLLoader::DidFail(URLLoaderClient* client,
+                                            const WebURLError& error) {
   DCHECK(client);
   client->DidFail(
       error, base::TimeTicks::Now(), /*total_encoded_data_length=*/0,
@@ -89,7 +87,7 @@ void InternetDisconnectedWebURLLoader::DidFail(WebURLLoaderClient* client,
 }
 
 scoped_refptr<base::SingleThreadTaskRunner>
-InternetDisconnectedWebURLLoader::GetTaskRunnerForBodyLoader() {
+InternetDisconnectedURLLoader::GetTaskRunnerForBodyLoader() {
   return task_runner_;
 }
 
diff --git a/third_party/blink/renderer/platform/loader/internet_disconnected_web_url_loader.h b/third_party/blink/renderer/platform/loader/internet_disconnected_url_loader.h
similarity index 73%
rename from third_party/blink/renderer/platform/loader/internet_disconnected_web_url_loader.h
rename to third_party/blink/renderer/platform/loader/internet_disconnected_url_loader.h
index 9554f764e81aa..1d4eed07faade 100644
--- a/third_party/blink/renderer/platform/loader/internet_disconnected_web_url_loader.h
+++ b/third_party/blink/renderer/platform/loader/internet_disconnected_url_loader.h
@@ -2,26 +2,26 @@
 // Use of this source code is governed by a BSD-style license that can be
 // found in the LICENSE file.
 
-#ifndef THIRD_PARTY_BLINK_RENDERER_PLATFORM_LOADER_INTERNET_DISCONNECTED_WEB_URL_LOADER_H_
-#define THIRD_PARTY_BLINK_RENDERER_PLATFORM_LOADER_INTERNET_DISCONNECTED_WEB_URL_LOADER_H_
+#ifndef THIRD_PARTY_BLINK_RENDERER_PLATFORM_LOADER_INTERNET_DISCONNECTED_URL_LOADER_H_
+#define THIRD_PARTY_BLINK_RENDERER_PLATFORM_LOADER_INTERNET_DISCONNECTED_URL_LOADER_H_
 
 #include <memory>
 
 #include "base/memory/weak_ptr.h"
 #include "base/task/single_thread_task_runner.h"
 #include "third_party/blink/public/platform/web_common.h"
-#include "third_party/blink/renderer/platform/loader/fetch/url_loader/web_url_loader.h"
-#include "third_party/blink/renderer/platform/loader/fetch/url_loader/web_url_loader_factory.h"
+#include "third_party/blink/renderer/platform/loader/fetch/url_loader/url_loader.h"
+#include "third_party/blink/renderer/platform/loader/fetch/url_loader/url_loader_factory.h"
 
 namespace blink {
 
 class WebURLRequestExtraData;
 
-// WebURLLoaderFactory for InternetDisconnectedWebURLLoader.
-class BLINK_PLATFORM_EXPORT InternetDisconnectedWebURLLoaderFactory final
-    : public WebURLLoaderFactory {
+// URLLoaderFactory for InternetDisconnectedURLLoader.
+class BLINK_PLATFORM_EXPORT InternetDisconnectedURLLoaderFactory final
+    : public URLLoaderFactory {
  public:
-  std::unique_ptr<WebURLLoader> CreateURLLoader(
+  std::unique_ptr<URLLoader> CreateURLLoader(
       const WebURLRequest&,
       scoped_refptr<base::SingleThreadTaskRunner> freezable_task_runner,
       scoped_refptr<base::SingleThreadTaskRunner> unfreezable_task_runner,
@@ -29,22 +29,22 @@ class BLINK_PLATFORM_EXPORT InternetDisconnectedWebURLLoaderFactory final
       BackForwardCacheLoaderHelper* back_forward_cache_loader_helper) override;
 };
 
-// WebURLLoader which always returns an internet disconnected error. At present,
+// URLLoader which always returns an internet disconnected error. At present,
 // this is used for ServiceWorker's offline-capability-check fetch event.
-class InternetDisconnectedWebURLLoader final : public WebURLLoader {
+class InternetDisconnectedURLLoader final : public URLLoader {
  public:
-  explicit InternetDisconnectedWebURLLoader(
+  explicit InternetDisconnectedURLLoader(
       scoped_refptr<base::SingleThreadTaskRunner> task_runner_handle);
-  ~InternetDisconnectedWebURLLoader() override;
+  ~InternetDisconnectedURLLoader() override;
 
-  // WebURLLoader implementation:
+  // URLLoader implementation:
   void LoadSynchronously(
       std::unique_ptr<network::ResourceRequest> request,
       scoped_refptr<WebURLRequestExtraData> url_request_extra_data,
       bool pass_response_pipe_to_client,
       bool no_mime_sniffing,
       base::TimeDelta timeout_interval,
-      WebURLLoaderClient*,
+      URLLoaderClient*,
       WebURLResponse&,
       absl::optional<WebURLError>&,
       WebData&,
@@ -59,19 +59,19 @@ class InternetDisconnectedWebURLLoader final : public WebURLLoader {
       bool no_mime_sniffing,
       std::unique_ptr<blink::ResourceLoadInfoNotifierWrapper>
           resource_load_info_notifier_wrapper,
-      WebURLLoaderClient* client) override;
+      URLLoaderClient* client) override;
   void Freeze(WebLoaderFreezeMode mode) override;
   void DidChangePriority(WebURLRequest::Priority, int) override;
   scoped_refptr<base::SingleThreadTaskRunner> GetTaskRunnerForBodyLoader()
       override;
 
  private:
-  void DidFail(WebURLLoaderClient* client, const WebURLError& error);
+  void DidFail(URLLoaderClient* client, const WebURLError& error);
 
   scoped_refptr<base::SingleThreadTaskRunner> task_runner_;
-  base::WeakPtrFactory<InternetDisconnectedWebURLLoader> weak_factory_{this};
+  base::WeakPtrFactory<InternetDisconnectedURLLoader> weak_factory_{this};
 };
 
 }  // namespace blink
 
-#endif  // THIRD_PARTY_BLINK_RENDERER_PLATFORM_LOADER_INTERNET_DISCONNECTED_WEB_URL_LOADER_H_
+#endif  // THIRD_PARTY_BLINK_RENDERER_PLATFORM_LOADER_INTERNET_DISCONNECTED_URL_LOADER_H_
diff --git a/third_party/blink/renderer/platform/loader/testing/fetch_testing_platform_support.cc b/third_party/blink/renderer/platform/loader/testing/fetch_testing_platform_support.cc
index 8a625a3de5e39..c0346a3584b5f 100644
--- a/third_party/blink/renderer/platform/loader/testing/fetch_testing_platform_support.cc
+++ b/third_party/blink/renderer/platform/loader/testing/fetch_testing_platform_support.cc
@@ -8,25 +8,24 @@
 #include "third_party/blink/public/platform/platform.h"
 #include "third_party/blink/public/platform/web_url.h"
 #include "third_party/blink/renderer/platform/loader/fetch/resource_error.h"
-#include "third_party/blink/renderer/platform/loader/fetch/url_loader/web_url_loader.h"
+#include "third_party/blink/renderer/platform/loader/fetch/url_loader/url_loader.h"
 #include "third_party/blink/renderer/platform/scheduler/main_thread/main_thread_scheduler_impl.h"
-#include "third_party/blink/renderer/platform/testing/web_url_loader_mock_factory.h"
-#include "third_party/blink/renderer/platform/testing/weburl_loader_mock_factory_impl.h"
+#include "third_party/blink/renderer/platform/testing/url_loader_mock_factory.h"
+#include "third_party/blink/renderer/platform/testing/url_loader_mock_factory_impl.h"
 
 namespace blink {
 
 FetchTestingPlatformSupport::FetchTestingPlatformSupport()
-    : url_loader_mock_factory_(new WebURLLoaderMockFactoryImpl(this)) {}
+    : url_loader_mock_factory_(new URLLoaderMockFactoryImpl(this)) {}
 
 FetchTestingPlatformSupport::~FetchTestingPlatformSupport() {
-  // Shutdowns WebURLLoaderMockFactory gracefully, serving all pending requests
+  // Shutdowns URLLoaderMockFactory gracefully, serving all pending requests
   // first, then flushing all registered URLs.
   url_loader_mock_factory_->ServeAsynchronousRequests();
   url_loader_mock_factory_->UnregisterAllURLsAndClearMemoryCache();
 }
 
-WebURLLoaderMockFactory*
-FetchTestingPlatformSupport::GetURLLoaderMockFactory() {
+URLLoaderMockFactory* FetchTestingPlatformSupport::GetURLLoaderMockFactory() {
   return url_loader_mock_factory_.get();
 }
 
diff --git a/third_party/blink/renderer/platform/loader/testing/fetch_testing_platform_support.h b/third_party/blink/renderer/platform/loader/testing/fetch_testing_platform_support.h
index 680f84094f995..bc7fec350e501 100644
--- a/third_party/blink/renderer/platform/loader/testing/fetch_testing_platform_support.h
+++ b/third_party/blink/renderer/platform/loader/testing/fetch_testing_platform_support.h
@@ -12,7 +12,7 @@
 
 namespace blink {
 
-class WebURLLoaderMockFactory;
+class URLLoaderMockFactory;
 
 class FetchTestingPlatformSupport
     : public TestingPlatformSupportWithMockScheduler {
@@ -23,12 +23,12 @@ class FetchTestingPlatformSupport
       delete;
   ~FetchTestingPlatformSupport() override;
 
-  WebURLLoaderMockFactory* GetURLLoaderMockFactory();
+  URLLoaderMockFactory* GetURLLoaderMockFactory();
 
  private:
-  class FetchTestingWebURLLoaderMockFactory;
+  class FetchTestingURLLoaderMockFactory;
 
-  std::unique_ptr<WebURLLoaderMockFactory> url_loader_mock_factory_;
+  std::unique_ptr<URLLoaderMockFactory> url_loader_mock_factory_;
 };
 
 }  // namespace blink
diff --git a/third_party/blink/renderer/platform/loader/testing/test_loader_factory.h b/third_party/blink/renderer/platform/loader/testing/test_loader_factory.h
index b322ddfa16cd1..963e5953bee56 100644
--- a/third_party/blink/renderer/platform/loader/testing/test_loader_factory.h
+++ b/third_party/blink/renderer/platform/loader/testing/test_loader_factory.h
@@ -12,7 +12,7 @@
 #include "third_party/blink/renderer/platform/exported/wrapped_resource_request.h"
 #include "third_party/blink/renderer/platform/loader/fetch/resource_fetcher.h"
 #include "third_party/blink/renderer/platform/testing/code_cache_loader_mock.h"
-#include "third_party/blink/renderer/platform/testing/web_url_loader_mock_factory.h"
+#include "third_party/blink/renderer/platform/testing/url_loader_mock_factory.h"
 
 namespace blink {
 
@@ -20,13 +20,13 @@ namespace blink {
 class TestLoaderFactory : public ResourceFetcher::LoaderFactory {
  public:
   TestLoaderFactory()
-      : TestLoaderFactory(WebURLLoaderMockFactory::GetSingletonInstance()) {}
+      : TestLoaderFactory(URLLoaderMockFactory::GetSingletonInstance()) {}
 
-  explicit TestLoaderFactory(WebURLLoaderMockFactory* mock_factory)
+  explicit TestLoaderFactory(URLLoaderMockFactory* mock_factory)
       : mock_factory_(mock_factory) {}
 
   // LoaderFactory implementations
-  std::unique_ptr<WebURLLoader> CreateURLLoader(
+  std::unique_ptr<URLLoader> CreateURLLoader(
       const ResourceRequest& request,
       const ResourceLoaderOptions& options,
       scoped_refptr<base::SingleThreadTaskRunner> freezable_task_runner,
@@ -40,7 +40,7 @@ class TestLoaderFactory : public ResourceFetcher::LoaderFactory {
   }
 
  private:
-  WebURLLoaderMockFactory* mock_factory_;
+  URLLoaderMockFactory* mock_factory_;
 };
 
 }  // namespace blink
diff --git a/third_party/blink/renderer/platform/testing/noop_web_url_loader.cc b/third_party/blink/renderer/platform/testing/noop_url_loader.cc
similarity index 84%
rename from third_party/blink/renderer/platform/testing/noop_web_url_loader.cc
rename to third_party/blink/renderer/platform/testing/noop_url_loader.cc
index a18c597a79bf1..6fba64b545750 100644
--- a/third_party/blink/renderer/platform/testing/noop_web_url_loader.cc
+++ b/third_party/blink/renderer/platform/testing/noop_url_loader.cc
@@ -2,7 +2,7 @@
 // Use of this source code is governed by a BSD-style license that can be
 // found in the LICENSE file.
 
-#include "third_party/blink/renderer/platform/testing/noop_web_url_loader.h"
+#include "third_party/blink/renderer/platform/testing/noop_url_loader.h"
 
 #include "services/network/public/cpp/resource_request.h"
 #include "third_party/blink/public/platform/resource_load_info_notifier_wrapper.h"
@@ -10,13 +10,13 @@
 
 namespace blink {
 
-void NoopWebURLLoader::LoadSynchronously(
+void NoopURLLoader::LoadSynchronously(
     std::unique_ptr<network::ResourceRequest> request,
     scoped_refptr<WebURLRequestExtraData> url_request_extra_data,
     bool pass_response_pipe_to_client,
     bool no_mime_sniffing,
     base::TimeDelta timeout_interval,
-    WebURLLoaderClient*,
+    URLLoaderClient*,
     WebURLResponse&,
     absl::optional<WebURLError>&,
     WebData&,
@@ -28,12 +28,12 @@ void NoopWebURLLoader::LoadSynchronously(
   NOTREACHED();
 }
 
-void NoopWebURLLoader::LoadAsynchronously(
+void NoopURLLoader::LoadAsynchronously(
     std::unique_ptr<network::ResourceRequest> request,
     scoped_refptr<WebURLRequestExtraData> url_request_extra_data,
     bool no_mime_sniffing,
     std::unique_ptr<blink::ResourceLoadInfoNotifierWrapper>
         resource_load_info_notifier_wrapper,
-    WebURLLoaderClient*) {}
+    URLLoaderClient*) {}
 
 }  // namespace blink
diff --git a/third_party/blink/renderer/platform/testing/noop_web_url_loader.h b/third_party/blink/renderer/platform/testing/noop_url_loader.h
similarity index 78%
rename from third_party/blink/renderer/platform/testing/noop_web_url_loader.h
rename to third_party/blink/renderer/platform/testing/noop_url_loader.h
index 98ed2e53014da..617292aa696b6 100644
--- a/third_party/blink/renderer/platform/testing/noop_web_url_loader.h
+++ b/third_party/blink/renderer/platform/testing/noop_url_loader.h
@@ -2,27 +2,27 @@
 // Use of this source code is governed by a BSD-style license that can be
 // found in the LICENSE file.
 
-#ifndef THIRD_PARTY_BLINK_RENDERER_PLATFORM_TESTING_NOOP_WEB_URL_LOADER_H_
-#define THIRD_PARTY_BLINK_RENDERER_PLATFORM_TESTING_NOOP_WEB_URL_LOADER_H_
+#ifndef THIRD_PARTY_BLINK_RENDERER_PLATFORM_TESTING_NOOP_URL_LOADER_H_
+#define THIRD_PARTY_BLINK_RENDERER_PLATFORM_TESTING_NOOP_URL_LOADER_H_
 
 #include "base/task/single_thread_task_runner.h"
-#include "third_party/blink/renderer/platform/loader/fetch/url_loader/web_url_loader.h"
+#include "third_party/blink/renderer/platform/loader/fetch/url_loader/url_loader.h"
 
 namespace blink {
 
-class NoopWebURLLoader final : public WebURLLoader {
+class NoopURLLoader final : public URLLoader {
  public:
-  explicit NoopWebURLLoader(
+  explicit NoopURLLoader(
       scoped_refptr<base::SingleThreadTaskRunner> task_runner)
       : task_runner_(task_runner) {}
-  ~NoopWebURLLoader() override = default;
+  ~NoopURLLoader() override = default;
   void LoadSynchronously(
       std::unique_ptr<network::ResourceRequest> request,
       scoped_refptr<WebURLRequestExtraData> url_request_extra_data,
       bool pass_response_pipe_to_client,
       bool no_mime_sniffing,
       base::TimeDelta timeout_interval,
-      WebURLLoaderClient*,
+      URLLoaderClient*,
       WebURLResponse&,
       absl::optional<WebURLError>&,
       WebData&,
@@ -37,7 +37,7 @@ class NoopWebURLLoader final : public WebURLLoader {
       bool no_mime_sniffing,
       std::unique_ptr<blink::ResourceLoadInfoNotifierWrapper>
           resource_load_info_notifier_wrapper,
-      WebURLLoaderClient*) override;
+      URLLoaderClient*) override;
 
   void Freeze(WebLoaderFreezeMode) override {}
   void DidChangePriority(WebURLRequest::Priority, int) override {
@@ -54,4 +54,4 @@ class NoopWebURLLoader final : public WebURLLoader {
 
 }  // namespace blink
 
-#endif  // THIRD_PARTY_BLINK_RENDERER_PLATFORM_TESTING_NOOP_WEB_URL_LOADER_H_
+#endif  // THIRD_PARTY_BLINK_RENDERER_PLATFORM_TESTING_NOOP_URL_LOADER_H_
diff --git a/third_party/blink/renderer/platform/testing/scoped_mocked_url.cc b/third_party/blink/renderer/platform/testing/scoped_mocked_url.cc
index be28537ab502c..d7d1a3412bfd5 100644
--- a/third_party/blink/renderer/platform/testing/scoped_mocked_url.cc
+++ b/third_party/blink/renderer/platform/testing/scoped_mocked_url.cc
@@ -5,8 +5,8 @@
 #include "third_party/blink/renderer/platform/testing/scoped_mocked_url.h"
 
 #include "third_party/blink/public/platform/platform.h"
+#include "third_party/blink/renderer/platform/testing/url_loader_mock_factory.h"
 #include "third_party/blink/renderer/platform/testing/url_test_helpers.h"
-#include "third_party/blink/renderer/platform/testing/web_url_loader_mock_factory.h"
 
 namespace blink {
 namespace test {
diff --git a/third_party/blink/renderer/platform/testing/unit_test_helpers.h b/third_party/blink/renderer/platform/testing/unit_test_helpers.h
index 2b84422301459..97d3859363403 100644
--- a/third_party/blink/renderer/platform/testing/unit_test_helpers.h
+++ b/third_party/blink/renderer/platform/testing/unit_test_helpers.h
@@ -40,7 +40,7 @@ namespace blink {
 namespace test {
 
 // Note: You may want to use TestingPlatformSupportWithMockScheduler to
-// provides runUntilIdle() method that can work with WebURLLoaderMockFactory.
+// provides runUntilIdle() method that can work with URLLoaderMockFactory.
 void RunPendingTasks();
 
 // Waits for delayed task to complete or timers to fire for |delay|.
diff --git a/third_party/blink/renderer/platform/testing/weburl_loader_mock.cc b/third_party/blink/renderer/platform/testing/url_loader_mock.cc
similarity index 75%
rename from third_party/blink/renderer/platform/testing/weburl_loader_mock.cc
rename to third_party/blink/renderer/platform/testing/url_loader_mock.cc
index e67a8487a88d0..427bc7324334b 100644
--- a/third_party/blink/renderer/platform/testing/weburl_loader_mock.cc
+++ b/third_party/blink/renderer/platform/testing/url_loader_mock.cc
@@ -2,7 +2,7 @@
 // Use of this source code is governed by a BSD-style license that can be
 // found in the LICENSE file.
 
-#include "third_party/blink/renderer/platform/testing/weburl_loader_mock.h"
+#include "third_party/blink/renderer/platform/testing/url_loader_mock.h"
 
 #include <utility>
 
@@ -15,33 +15,34 @@
 #include "third_party/blink/public/platform/web_security_origin.h"
 #include "third_party/blink/public/platform/web_url_error.h"
 #include "third_party/blink/public/platform/web_url_request_extra_data.h"
-#include "third_party/blink/renderer/platform/loader/fetch/url_loader/web_url_loader_client.h"
+#include "third_party/blink/renderer/platform/loader/fetch/url_loader/url_loader_client.h"
 #include "third_party/blink/renderer/platform/scheduler/test/fake_task_runner.h"
-#include "third_party/blink/renderer/platform/testing/weburl_loader_mock_factory_impl.h"
+#include "third_party/blink/renderer/platform/testing/url_loader_mock_factory_impl.h"
 #include "third_party/blink/renderer/platform/wtf/shared_buffer.h"
 
 namespace blink {
 
-WebURLLoaderMock::WebURLLoaderMock(WebURLLoaderMockFactoryImpl* factory)
+URLLoaderMock::URLLoaderMock(URLLoaderMockFactoryImpl* factory)
     : factory_(factory) {}
 
-WebURLLoaderMock::~WebURLLoaderMock() {
+URLLoaderMock::~URLLoaderMock() {
   Cancel();
 }
 
-void WebURLLoaderMock::ServeAsynchronousRequest(
-    WebURLLoaderTestDelegate* delegate,
+void URLLoaderMock::ServeAsynchronousRequest(
+    URLLoaderTestDelegate* delegate,
     const WebURLResponse& response,
     const WebData& data,
     const absl::optional<WebURLError>& error) {
-  if (!client_)
+  if (!client_) {
     return;
+  }
 
   // If no delegate is provided then create an empty one. The default behavior
   // will just proxy to the client.
-  std::unique_ptr<WebURLLoaderTestDelegate> default_delegate;
+  std::unique_ptr<URLLoaderTestDelegate> default_delegate;
   if (!delegate) {
-    default_delegate = std::make_unique<WebURLLoaderTestDelegate>();
+    default_delegate = std::make_unique<URLLoaderTestDelegate>();
     delegate = default_delegate.get();
   }
 
@@ -52,11 +53,12 @@ void WebURLLoaderMock::ServeAsynchronousRequest(
 
   // didReceiveResponse() and didReceiveData() might end up getting ::cancel()
   // to be called which will make the ResourceLoader to delete |this|.
-  base::WeakPtr<WebURLLoaderMock> self = weak_factory_.GetWeakPtr();
+  base::WeakPtr<URLLoaderMock> self = weak_factory_.GetWeakPtr();
 
   delegate->DidReceiveResponse(client_, response);
-  if (!self)
+  if (!self) {
     return;
+  }
 
   data.ForEachSegment([this, &delegate, &self](const char* segment,
                                                size_t segment_size,
@@ -68,19 +70,19 @@ void WebURLLoaderMock::ServeAsynchronousRequest(
     return self;
   });
 
-  if (!self)
+  if (!self) {
     return;
+  }
 
   delegate->DidFinishLoading(client_, base::TimeTicks(), data.size(),
                              data.size(), data.size());
 }
 
-WebURL WebURLLoaderMock::ServeRedirect(
-    const WebString& method,
-    const WebURLResponse& redirect_response) {
+WebURL URLLoaderMock::ServeRedirect(const WebString& method,
+                                    const WebURLResponse& redirect_response) {
   KURL redirect_url(redirect_response.HttpHeaderField("Location"));
 
-  base::WeakPtr<WebURLLoaderMock> self = weak_factory_.GetWeakPtr();
+  base::WeakPtr<URLLoaderMock> self = weak_factory_.GetWeakPtr();
 
   bool report_raw_headers = false;
   bool follow = client_->WillFollowRedirect(
@@ -89,22 +91,24 @@ WebURL WebURLLoaderMock::ServeRedirect(
       redirect_response, report_raw_headers, nullptr /* removed_headers */,
       false /* insecure_scheme_was_upgraded */);
   // |this| might be deleted in willFollowRedirect().
-  if (!self)
+  if (!self) {
     return redirect_url;
+  }
 
-  if (!follow)
+  if (!follow) {
     Cancel();
+  }
 
   return redirect_url;
 }
 
-void WebURLLoaderMock::LoadSynchronously(
+void URLLoaderMock::LoadSynchronously(
     std::unique_ptr<network::ResourceRequest> request,
     scoped_refptr<WebURLRequestExtraData> url_request_extra_data,
     bool pass_response_pipe_to_client,
     bool no_mime_sniffing,
     base::TimeDelta timeout_interval,
-    WebURLLoaderClient* client,
+    URLLoaderClient* client,
     WebURLResponse& response,
     absl::optional<WebURLError>& error,
     WebData& data,
@@ -118,44 +122,45 @@ void WebURLLoaderMock::LoadSynchronously(
                               &encoded_data_length);
 }
 
-void WebURLLoaderMock::LoadAsynchronously(
+void URLLoaderMock::LoadAsynchronously(
     std::unique_ptr<network::ResourceRequest> request,
     scoped_refptr<WebURLRequestExtraData> url_request_extra_data,
     bool no_mime_sniffing,
     std::unique_ptr<blink::ResourceLoadInfoNotifierWrapper>
         resource_load_info_notifier_wrapper,
-    WebURLLoaderClient* client) {
+    URLLoaderClient* client) {
   DCHECK(client);
   DCHECK(factory_->IsMockedURL(WebURL(KURL(request->url)))) << request->url;
   client_ = client;
   factory_->LoadAsynchronouly(std::move(request), this);
 }
 
-void WebURLLoaderMock::Cancel() {
+void URLLoaderMock::Cancel() {
   client_ = nullptr;
   factory_->CancelLoad(this);
 }
 
-void WebURLLoaderMock::Freeze(WebLoaderFreezeMode mode) {
+void URLLoaderMock::Freeze(WebLoaderFreezeMode mode) {
   is_deferred_ = (mode != WebLoaderFreezeMode::kNone);
   // Ignores setDefersLoading(false) safely.
-  if (!is_deferred_)
+  if (!is_deferred_) {
     return;
+  }
 
   // setDefersLoading(true) is not implemented.
   NOTIMPLEMENTED();
 }
 
-void WebURLLoaderMock::DidChangePriority(WebURLRequest::Priority new_priority,
-                                         int intra_priority_value) {}
+void URLLoaderMock::DidChangePriority(WebURLRequest::Priority new_priority,
+                                      int intra_priority_value) {}
 
 scoped_refptr<base::SingleThreadTaskRunner>
-WebURLLoaderMock::GetTaskRunnerForBodyLoader() {
+URLLoaderMock::GetTaskRunnerForBodyLoader() {
   return base::MakeRefCounted<scheduler::FakeTaskRunner>();
 }
 
-base::WeakPtr<WebURLLoaderMock> WebURLLoaderMock::GetWeakPtr() {
+base::WeakPtr<URLLoaderMock> URLLoaderMock::GetWeakPtr() {
   return weak_factory_.GetWeakPtr();
 }
 
-} // namespace blink
+}  // namespace blink
diff --git a/third_party/blink/renderer/platform/testing/weburl_loader_mock.h b/third_party/blink/renderer/platform/testing/url_loader_mock.h
similarity index 69%
rename from third_party/blink/renderer/platform/testing/weburl_loader_mock.h
rename to third_party/blink/renderer/platform/testing/url_loader_mock.h
index 317e11c866918..a80b58dc35d81 100644
--- a/third_party/blink/renderer/platform/testing/weburl_loader_mock.h
+++ b/third_party/blink/renderer/platform/testing/url_loader_mock.h
@@ -2,41 +2,41 @@
 // Use of this source code is governed by a BSD-style license that can be
 // found in the LICENSE file.
 
-#ifndef THIRD_PARTY_BLINK_RENDERER_PLATFORM_TESTING_WEBURL_LOADER_MOCK_H_
-#define THIRD_PARTY_BLINK_RENDERER_PLATFORM_TESTING_WEBURL_LOADER_MOCK_H_
+#ifndef THIRD_PARTY_BLINK_RENDERER_PLATFORM_TESTING_URL_LOADER_MOCK_H_
+#define THIRD_PARTY_BLINK_RENDERER_PLATFORM_TESTING_URL_LOADER_MOCK_H_
 
 #include <memory>
 #include "base/memory/weak_ptr.h"
 #include "base/task/single_thread_task_runner.h"
 #include "third_party/abseil-cpp/absl/types/optional.h"
 #include "third_party/blink/public/platform/web_url_error.h"
-#include "third_party/blink/renderer/platform/loader/fetch/url_loader/web_url_loader.h"
+#include "third_party/blink/renderer/platform/loader/fetch/url_loader/url_loader.h"
 
 namespace blink {
 
 class WebData;
 class WebURLRequestExtraData;
-class WebURLLoaderClient;
-class WebURLLoaderMockFactoryImpl;
-class WebURLLoaderTestDelegate;
+class URLLoaderClient;
+class URLLoaderMockFactoryImpl;
+class URLLoaderTestDelegate;
 class WebURLRequest;
 class WebURLResponse;
 
 const uint32_t kRedirectResponseOverheadBytes = 300;
 
-// A simple class for mocking WebURLLoader.
-// If the WebURLLoaderMockFactory it is associated with has been configured to
+// A simple class for mocking URLLoader.
+// If the URLLoaderMockFactory it is associated with has been configured to
 // mock the request it gets, it serves the mocked resource.  Otherwise it just
 // forwards it to the default loader.
-class WebURLLoaderMock : public WebURLLoader {
+class URLLoaderMock : public URLLoader {
  public:
-  explicit WebURLLoaderMock(WebURLLoaderMockFactoryImpl* factory);
-  WebURLLoaderMock(const WebURLLoaderMock&) = delete;
-  WebURLLoaderMock& operator=(const WebURLLoaderMock&) = delete;
-  ~WebURLLoaderMock() override;
+  explicit URLLoaderMock(URLLoaderMockFactoryImpl* factory);
+  URLLoaderMock(const URLLoaderMock&) = delete;
+  URLLoaderMock& operator=(const URLLoaderMock&) = delete;
+  ~URLLoaderMock() override;
 
   // Simulates the asynchronous request being served.
-  void ServeAsynchronousRequest(WebURLLoaderTestDelegate* delegate,
+  void ServeAsynchronousRequest(URLLoaderTestDelegate* delegate,
                                 const WebURLResponse& response,
                                 const WebData& data,
                                 const absl::optional<WebURLError>& error);
@@ -45,14 +45,14 @@ class WebURLLoaderMock : public WebURLLoader {
   WebURL ServeRedirect(const WebString& method,
                        const WebURLResponse& redirect_response);
 
-  // WebURLLoader methods:
+  // URLLoader methods:
   void LoadSynchronously(
       std::unique_ptr<network::ResourceRequest> request,
       scoped_refptr<WebURLRequestExtraData> url_request_extra_data,
       bool pass_response_pipe_to_client,
       bool no_mime_sniffing,
       base::TimeDelta timeout_interval,
-      WebURLLoaderClient* client,
+      URLLoaderClient* client,
       WebURLResponse&,
       absl::optional<WebURLError>&,
       WebData&,
@@ -67,7 +67,7 @@ class WebURLLoaderMock : public WebURLLoader {
       bool no_mime_sniffing,
       std::unique_ptr<blink::ResourceLoadInfoNotifierWrapper>
           resource_load_info_notifier_wrapper,
-      WebURLLoaderClient* client) override;
+      URLLoaderClient* client) override;
   void Freeze(WebLoaderFreezeMode mode) override;
   void DidChangePriority(WebURLRequest::Priority new_priority,
                          int intra_priority_value) override;
@@ -77,18 +77,18 @@ class WebURLLoaderMock : public WebURLLoader {
   bool is_deferred() { return is_deferred_; }
   bool is_cancelled() { return !client_; }
 
-  base::WeakPtr<WebURLLoaderMock> GetWeakPtr();
+  base::WeakPtr<URLLoaderMock> GetWeakPtr();
 
  private:
   void Cancel();
 
-  WebURLLoaderMockFactoryImpl* factory_ = nullptr;
-  WebURLLoaderClient* client_ = nullptr;
+  URLLoaderMockFactoryImpl* factory_ = nullptr;
+  URLLoaderClient* client_ = nullptr;
   bool is_deferred_ = false;
 
-  base::WeakPtrFactory<WebURLLoaderMock> weak_factory_{this};
+  base::WeakPtrFactory<URLLoaderMock> weak_factory_{this};
 };
 
 }  // namespace blink
 
-#endif  // THIRD_PARTY_BLINK_RENDERER_PLATFORM_TESTING_WEBURL_LOADER_MOCK_H_
+#endif  // THIRD_PARTY_BLINK_RENDERER_PLATFORM_TESTING_URL_LOADER_MOCK_H_
diff --git a/third_party/blink/renderer/platform/testing/web_url_loader_mock_factory.h b/third_party/blink/renderer/platform/testing/url_loader_mock_factory.h
similarity index 78%
rename from third_party/blink/renderer/platform/testing/web_url_loader_mock_factory.h
rename to third_party/blink/renderer/platform/testing/url_loader_mock_factory.h
index 5a59a89ef9ff7..bbab37757e95e 100644
--- a/third_party/blink/renderer/platform/testing/web_url_loader_mock_factory.h
+++ b/third_party/blink/renderer/platform/testing/url_loader_mock_factory.h
@@ -2,13 +2,13 @@
 // Use of this source code is governed by a BSD-style license that can be
 // found in the LICENSE file.
 
-#ifndef THIRD_PARTY_BLINK_RENDERER_PLATFORM_TESTING_WEB_URL_LOADER_MOCK_FACTORY_H_
-#define THIRD_PARTY_BLINK_RENDERER_PLATFORM_TESTING_WEB_URL_LOADER_MOCK_FACTORY_H_
+#ifndef THIRD_PARTY_BLINK_RENDERER_PLATFORM_TESTING_URL_LOADER_MOCK_FACTORY_H_
+#define THIRD_PARTY_BLINK_RENDERER_PLATFORM_TESTING_URL_LOADER_MOCK_FACTORY_H_
 
 #include "third_party/blink/public/platform/web_common.h"
 #include "third_party/blink/public/platform/web_data.h"
 #include "third_party/blink/public/platform/web_string.h"
-#include "third_party/blink/renderer/platform/testing/web_url_loader_test_delegate.h"
+#include "third_party/blink/renderer/platform/testing/url_loader_test_delegate.h"
 
 #include <memory>
 
@@ -16,18 +16,18 @@ namespace blink {
 
 struct WebNavigationParams;
 class WebURL;
-class WebURLLoader;
+class URLLoader;
 class WebURLResponse;
 struct WebURLError;
 
-class WebURLLoaderMockFactory {
+class URLLoaderMockFactory {
  public:
-  static WebURLLoaderMockFactory* GetSingletonInstance();
+  static URLLoaderMockFactory* GetSingletonInstance();
 
-  virtual ~WebURLLoaderMockFactory() = default;
+  virtual ~URLLoaderMockFactory() = default;
 
-  // Create a WebURLLoader that takes care of mocked requests.
-  virtual std::unique_ptr<WebURLLoader> CreateURLLoader() = 0;
+  // Create a URLLoader that takes care of mocked requests.
+  virtual std::unique_ptr<URLLoader> CreateURLLoader() = 0;
 
   // Registers a response and the file to be served when the specified URL
   // is loaded. If no file is specified then the response content will be empty.
@@ -70,9 +70,9 @@ class WebURLLoaderMockFactory {
   // frame_test_helpers instead.
   virtual void ServeAsynchronousRequests() = 0;
 
-  // Set a delegate that allows callbacks for all WebURLLoaderClients to be
+  // Set a delegate that allows callbacks for all URLLoaderClients to be
   // intercepted.
-  virtual void SetLoaderDelegate(WebURLLoaderTestDelegate*) = 0;
+  virtual void SetLoaderDelegate(URLLoaderTestDelegate*) = 0;
 
   // Fills navigation params by loading a mocked response.
   virtual void FillNavigationParamsResponse(WebNavigationParams*) = 0;
@@ -80,4 +80,4 @@ class WebURLLoaderMockFactory {
 
 }  // namespace blink
 
-#endif  // THIRD_PARTY_BLINK_RENDERER_PLATFORM_TESTING_WEB_URL_LOADER_MOCK_FACTORY_H_
+#endif  // THIRD_PARTY_BLINK_RENDERER_PLATFORM_TESTING_URL_LOADER_MOCK_FACTORY_H_
diff --git a/third_party/blink/renderer/platform/testing/weburl_loader_mock_factory_impl.cc b/third_party/blink/renderer/platform/testing/url_loader_mock_factory_impl.cc
similarity index 76%
rename from third_party/blink/renderer/platform/testing/weburl_loader_mock_factory_impl.cc
rename to third_party/blink/renderer/platform/testing/url_loader_mock_factory_impl.cc
index 40e7b9c4c46a3..631f4835cade6 100644
--- a/third_party/blink/renderer/platform/testing/weburl_loader_mock_factory_impl.cc
+++ b/third_party/blink/renderer/platform/testing/url_loader_mock_factory_impl.cc
@@ -2,7 +2,7 @@
 // Use of this source code is governed by a BSD-style license that can be
 // found in the LICENSE file.
 
-#include "third_party/blink/renderer/platform/testing/weburl_loader_mock_factory_impl.h"
+#include "third_party/blink/renderer/platform/testing/url_loader_mock_factory_impl.h"
 
 #include <stdint.h>
 #include <memory>
@@ -26,30 +26,30 @@
 #include "third_party/blink/renderer/platform/network/network_utils.h"
 #include "third_party/blink/renderer/platform/testing/testing_platform_support.h"
 #include "third_party/blink/renderer/platform/testing/unit_test_helpers.h"
-#include "third_party/blink/renderer/platform/testing/weburl_loader_mock.h"
+#include "third_party/blink/renderer/platform/testing/url_loader_mock.h"
 #include "third_party/blink/renderer/platform/wtf/std_lib_extras.h"
 
 namespace blink {
 
 // static
-WebURLLoaderMockFactory* WebURLLoaderMockFactory::GetSingletonInstance() {
-  DEFINE_STATIC_LOCAL(WebURLLoaderMockFactoryImpl, s_singleton, (nullptr));
+URLLoaderMockFactory* URLLoaderMockFactory::GetSingletonInstance() {
+  DEFINE_STATIC_LOCAL(URLLoaderMockFactoryImpl, s_singleton, (nullptr));
   return &s_singleton;
 }
 
-WebURLLoaderMockFactoryImpl::WebURLLoaderMockFactoryImpl(
+URLLoaderMockFactoryImpl::URLLoaderMockFactoryImpl(
     TestingPlatformSupport* platform)
     : platform_(platform) {}
 
-WebURLLoaderMockFactoryImpl::~WebURLLoaderMockFactoryImpl() = default;
+URLLoaderMockFactoryImpl::~URLLoaderMockFactoryImpl() = default;
 
-std::unique_ptr<WebURLLoader> WebURLLoaderMockFactoryImpl::CreateURLLoader() {
-  return std::make_unique<WebURLLoaderMock>(this);
+std::unique_ptr<URLLoader> URLLoaderMockFactoryImpl::CreateURLLoader() {
+  return std::make_unique<URLLoaderMock>(this);
 }
 
-void WebURLLoaderMockFactoryImpl::RegisterURL(const WebURL& url,
-                                              const WebURLResponse& response,
-                                              const WebString& file_path) {
+void URLLoaderMockFactoryImpl::RegisterURL(const WebURL& url,
+                                           const WebURLResponse& response,
+                                           const WebString& file_path) {
   ResponseInfo response_info;
   response_info.response = response;
   if (!file_path.IsNull() && !file_path.IsEmpty()) {
@@ -62,26 +62,26 @@ void WebURLLoaderMockFactoryImpl::RegisterURL(const WebURL& url,
   url_to_response_info_.Set(url, response_info);
 }
 
-void WebURLLoaderMockFactoryImpl::RegisterErrorURL(
-    const WebURL& url,
-    const WebURLResponse& response,
-    const WebURLError& error) {
+void URLLoaderMockFactoryImpl::RegisterErrorURL(const WebURL& url,
+                                                const WebURLResponse& response,
+                                                const WebURLError& error) {
   DCHECK(url_to_response_info_.find(url) == url_to_response_info_.end());
   RegisterURL(url, response, WebString());
   url_to_error_info_.Set(url, error);
 }
 
-void WebURLLoaderMockFactoryImpl::UnregisterURL(const blink::WebURL& url) {
+void URLLoaderMockFactoryImpl::UnregisterURL(const blink::WebURL& url) {
   URLToResponseMap::iterator iter = url_to_response_info_.find(url);
   DCHECK(iter != url_to_response_info_.end());
   url_to_response_info_.erase(iter);
 
   URLToErrorMap::iterator error_iter = url_to_error_info_.find(url);
-  if (error_iter != url_to_error_info_.end())
+  if (error_iter != url_to_error_info_.end()) {
     url_to_error_info_.erase(error_iter);
+  }
 }
 
-void WebURLLoaderMockFactoryImpl::RegisterURLProtocol(
+void URLLoaderMockFactoryImpl::RegisterURLProtocol(
     const WebString& protocol,
     const WebURLResponse& response,
     const WebString& file_path) {
@@ -100,7 +100,7 @@ void WebURLLoaderMockFactoryImpl::RegisterURLProtocol(
   protocol_to_response_info_.Set(protocol, response_info);
 }
 
-void WebURLLoaderMockFactoryImpl::UnregisterURLProtocol(
+void URLLoaderMockFactoryImpl::UnregisterURLProtocol(
     const WebString& protocol) {
   ProtocolToResponseMap::iterator iter =
       protocol_to_response_info_.find(protocol);
@@ -108,20 +108,21 @@ void WebURLLoaderMockFactoryImpl::UnregisterURLProtocol(
   protocol_to_response_info_.erase(iter);
 }
 
-void WebURLLoaderMockFactoryImpl::UnregisterAllURLsAndClearMemoryCache() {
+void URLLoaderMockFactoryImpl::UnregisterAllURLsAndClearMemoryCache() {
   url_to_response_info_.clear();
   url_to_error_info_.clear();
   protocol_to_response_info_.clear();
-  if (IsMainThread())
+  if (IsMainThread()) {
     MemoryCache::Get()->EvictResources();
+  }
 }
 
-void WebURLLoaderMockFactoryImpl::ServeAsynchronousRequests() {
+void URLLoaderMockFactoryImpl::ServeAsynchronousRequests() {
   // Serving a request might trigger more requests, so we cannot iterate on
   // pending_loaders_ as it might get modified.
   while (!pending_loaders_.empty()) {
     LoaderToRequestMap::iterator iter = pending_loaders_.begin();
-    base::WeakPtr<WebURLLoaderMock> loader(iter->key->GetWeakPtr());
+    base::WeakPtr<URLLoaderMock> loader(iter->key->GetWeakPtr());
     std::unique_ptr<network::ResourceRequest> request = std::move(iter->value);
     pending_loaders_.erase(loader.get());
 
@@ -135,8 +136,9 @@ void WebURLLoaderMockFactoryImpl::ServeAsynchronousRequests() {
       WebURL new_url = loader->ServeRedirect(
           WebString::FromLatin1(request->method), response);
       RunUntilIdle();
-      if (!loader || loader->is_cancelled() || loader->is_deferred())
+      if (!loader || loader->is_cancelled() || loader->is_deferred()) {
         break;
+      }
       LoadRequest(new_url, &response, &error, &data);
     }
     // Serve the request if the loader is still active.
@@ -148,7 +150,7 @@ void WebURLLoaderMockFactoryImpl::ServeAsynchronousRequests() {
   RunUntilIdle();
 }
 
-void WebURLLoaderMockFactoryImpl::FillNavigationParamsResponse(
+void URLLoaderMockFactoryImpl::FillNavigationParamsResponse(
     WebNavigationParams* params) {
   KURL kurl = params->url;
   if (kurl.ProtocolIsData()) {
@@ -168,8 +170,9 @@ void WebURLLoaderMockFactoryImpl::FillNavigationParamsResponse(
     return;
   }
 
-  if (delegate_ && delegate_->FillNavigationParamsResponse(params))
+  if (delegate_ && delegate_->FillNavigationParamsResponse(params)) {
     return;
+  }
 
   absl::optional<WebURLError> error;
   WebData data;
@@ -200,17 +203,17 @@ void WebURLLoaderMockFactoryImpl::FillNavigationParamsResponse(
   params->body_loader = std::move(body_loader);
 }
 
-bool WebURLLoaderMockFactoryImpl::IsMockedURL(const blink::WebURL& url) {
+bool URLLoaderMockFactoryImpl::IsMockedURL(const blink::WebURL& url) {
   absl::optional<WebURLError> error;
   ResponseInfo response_info;
   return LookupURL(url, &error, &response_info);
 }
 
-void WebURLLoaderMockFactoryImpl::CancelLoad(WebURLLoaderMock* loader) {
+void URLLoaderMockFactoryImpl::CancelLoad(URLLoaderMock* loader) {
   pending_loaders_.erase(loader);
 }
 
-void WebURLLoaderMockFactoryImpl::LoadSynchronously(
+void URLLoaderMockFactoryImpl::LoadSynchronously(
     std::unique_ptr<network::ResourceRequest> request,
     WebURLResponse* response,
     absl::optional<WebURLError>* error,
@@ -220,14 +223,14 @@ void WebURLLoaderMockFactoryImpl::LoadSynchronously(
   *encoded_data_length = data->size();
 }
 
-void WebURLLoaderMockFactoryImpl::LoadAsynchronouly(
+void URLLoaderMockFactoryImpl::LoadAsynchronouly(
     std::unique_ptr<network::ResourceRequest> request,
-    WebURLLoaderMock* loader) {
+    URLLoaderMock* loader) {
   DCHECK(!pending_loaders_.Contains(loader));
   pending_loaders_.Set(loader, std::move(request));
 }
 
-void WebURLLoaderMockFactoryImpl::RunUntilIdle() {
+void URLLoaderMockFactoryImpl::RunUntilIdle() {
   if (platform_) {
     platform_->RunUntilIdle();
   } else {
@@ -235,11 +238,10 @@ void WebURLLoaderMockFactoryImpl::RunUntilIdle() {
   }
 }
 
-void WebURLLoaderMockFactoryImpl::LoadRequest(
-    const WebURL& url,
-    WebURLResponse* response,
-    absl::optional<WebURLError>* error,
-    WebData* data) {
+void URLLoaderMockFactoryImpl::LoadRequest(const WebURL& url,
+                                           WebURLResponse* response,
+                                           absl::optional<WebURLError>* error,
+                                           WebData* data) {
   ResponseInfo response_info;
   if (!LookupURL(url, error, &response_info)) {
     // Non mocked URLs should not have been passed to the default URLLoader.
@@ -255,12 +257,13 @@ void WebURLLoaderMockFactoryImpl::LoadRequest(
   *response = response_info.response;
 }
 
-bool WebURLLoaderMockFactoryImpl::LookupURL(const WebURL& url,
-                                            absl::optional<WebURLError>* error,
-                                            ResponseInfo* response_info) {
+bool URLLoaderMockFactoryImpl::LookupURL(const WebURL& url,
+                                         absl::optional<WebURLError>* error,
+                                         ResponseInfo* response_info) {
   URLToErrorMap::const_iterator error_iter = url_to_error_info_.find(url);
-  if (error_iter != url_to_error_info_.end())
+  if (error_iter != url_to_error_info_.end()) {
     *error = error_iter->value;
+  }
 
   URLToResponseMap::const_iterator iter = url_to_response_info_.find(url);
   if (iter != url_to_response_info_.end()) {
@@ -280,19 +283,21 @@ bool WebURLLoaderMockFactoryImpl::LookupURL(const WebURL& url,
 }
 
 // static
-bool WebURLLoaderMockFactoryImpl::ReadFile(const base::FilePath& file_path,
-                                           WebData* data) {
+bool URLLoaderMockFactoryImpl::ReadFile(const base::FilePath& file_path,
+                                        WebData* data) {
   // If the path is empty then we return an empty file so tests can simulate
   // requests without needing to actually load files.
-  if (file_path.empty())
+  if (file_path.empty()) {
     return true;
+  }
 
   std::string buffer;
-  if (!base::ReadFileToString(file_path, &buffer))
+  if (!base::ReadFileToString(file_path, &buffer)) {
     return false;
+  }
 
   data->Assign(buffer.data(), buffer.size());
   return true;
 }
 
-} // namespace blink
+}  // namespace blink
diff --git a/third_party/blink/renderer/platform/testing/weburl_loader_mock_factory_impl.h b/third_party/blink/renderer/platform/testing/url_loader_mock_factory_impl.h
similarity index 73%
rename from third_party/blink/renderer/platform/testing/weburl_loader_mock_factory_impl.h
rename to third_party/blink/renderer/platform/testing/url_loader_mock_factory_impl.h
index 8946354ef5b2f..1427c97c56683 100644
--- a/third_party/blink/renderer/platform/testing/weburl_loader_mock_factory_impl.h
+++ b/third_party/blink/renderer/platform/testing/url_loader_mock_factory_impl.h
@@ -2,8 +2,8 @@
 // Use of this source code is governed by a BSD-style license that can be
 // found in the LICENSE file.
 
-#ifndef THIRD_PARTY_BLINK_RENDERER_PLATFORM_TESTING_WEBURL_LOADER_MOCK_FACTORY_IMPL_H_
-#define THIRD_PARTY_BLINK_RENDERER_PLATFORM_TESTING_WEBURL_LOADER_MOCK_FACTORY_IMPL_H_
+#ifndef THIRD_PARTY_BLINK_RENDERER_PLATFORM_TESTING_URL_LOADER_MOCK_FACTORY_IMPL_H_
+#define THIRD_PARTY_BLINK_RENDERER_PLATFORM_TESTING_URL_LOADER_MOCK_FACTORY_IMPL_H_
 
 #include "base/files/file_path.h"
 #include "base/memory/weak_ptr.h"
@@ -12,7 +12,7 @@
 #include "third_party/blink/public/platform/web_url_error.h"
 #include "third_party/blink/public/platform/web_url_request.h"
 #include "third_party/blink/public/platform/web_url_response.h"
-#include "third_party/blink/renderer/platform/testing/web_url_loader_mock_factory.h"
+#include "third_party/blink/renderer/platform/testing/url_loader_mock_factory.h"
 #include "third_party/blink/renderer/platform/weborigin/kurl.h"
 #include "third_party/blink/renderer/platform/weborigin/kurl_hash.h"
 #include "third_party/blink/renderer/platform/wtf/hash_map.h"
@@ -25,23 +25,22 @@ namespace blink {
 
 class TestingPlatformSupport;
 class WebData;
-class WebURLLoader;
-class WebURLLoaderMock;
-class WebURLLoaderTestDelegate;
-
-// A factory that creates WebURLLoaderMock to simulate resource loading in
-// tests. Since there are restriction and rules to follow, please read comments
-// in WebURLLoaderMockFactory carefully to use this class correctly.
-class WebURLLoaderMockFactoryImpl : public WebURLLoaderMockFactory {
+class URLLoader;
+class URLLoaderMock;
+class URLLoaderTestDelegate;
+
+// A factory that creates URLLoaderMock to simulate resource loading in tests.
+// Since there are restriction and rules to follow, please read comments in
+// URLLoaderMockFactory carefully to use this class correctly.
+class URLLoaderMockFactoryImpl : public URLLoaderMockFactory {
  public:
-  WebURLLoaderMockFactoryImpl(TestingPlatformSupport*);
-  WebURLLoaderMockFactoryImpl(const WebURLLoaderMockFactoryImpl&) = delete;
-  WebURLLoaderMockFactoryImpl& operator=(const WebURLLoaderMockFactoryImpl&) =
-      delete;
-  ~WebURLLoaderMockFactoryImpl() override;
-
-  // WebURLLoaderMockFactory:
-  std::unique_ptr<WebURLLoader> CreateURLLoader() override;
+  URLLoaderMockFactoryImpl(TestingPlatformSupport*);
+  URLLoaderMockFactoryImpl(const URLLoaderMockFactoryImpl&) = delete;
+  URLLoaderMockFactoryImpl& operator=(const URLLoaderMockFactoryImpl&) = delete;
+  ~URLLoaderMockFactoryImpl() override;
+
+  // URLLoaderMockFactory:
+  std::unique_ptr<URLLoader> CreateURLLoader() override;
   void RegisterURL(const WebURL& url,
                    const WebURLResponse& response,
                    const WebString& file_path = WebString()) override;
@@ -55,7 +54,7 @@ class WebURLLoaderMockFactoryImpl : public WebURLLoaderMockFactory {
   void UnregisterURLProtocol(const WebString& protocol) override;
   void UnregisterAllURLsAndClearMemoryCache() override;
   void ServeAsynchronousRequests() override;
-  void SetLoaderDelegate(WebURLLoaderTestDelegate* delegate) override {
+  void SetLoaderDelegate(URLLoaderTestDelegate* delegate) override {
     delegate_ = delegate;
   }
   void FillNavigationParamsResponse(WebNavigationParams*) override;
@@ -70,10 +69,10 @@ class WebURLLoaderMockFactoryImpl : public WebURLLoaderMockFactory {
                          WebData* data,
                          int64_t* encoded_data_length);
   void LoadAsynchronouly(std::unique_ptr<network::ResourceRequest> request,
-                         WebURLLoaderMock* loader);
+                         URLLoaderMock* loader);
 
   // Removes the loader from the list of pending loaders.
-  void CancelLoad(WebURLLoaderMock* loader);
+  void CancelLoad(URLLoaderMock* loader);
 
  private:
   struct ResponseInfo {
@@ -91,7 +90,7 @@ class WebURLLoaderMockFactoryImpl : public WebURLLoaderMockFactory {
                    WebData* data);
 
   // Checks if the loader is pending. Otherwise, it may have been deleted.
-  bool IsPending(base::WeakPtr<WebURLLoaderMock> loader);
+  bool IsPending(base::WeakPtr<URLLoaderMock> loader);
 
   // Looks up an URL in the mock URL table.
   //
@@ -104,11 +103,11 @@ class WebURLLoaderMockFactoryImpl : public WebURLLoaderMockFactory {
   // Returns true if it successfully read the file.
   static bool ReadFile(const base::FilePath& file_path, WebData* data);
 
-  WebURLLoaderTestDelegate* delegate_ = nullptr;
+  URLLoaderTestDelegate* delegate_ = nullptr;
 
   // The loaders that have not being served data yet.
   using LoaderToRequestMap =
-      HashMap<WebURLLoaderMock*, std::unique_ptr<network::ResourceRequest>>;
+      HashMap<URLLoaderMock*, std::unique_ptr<network::ResourceRequest>>;
   LoaderToRequestMap pending_loaders_;
 
   // All values must be valid, but we use Optional because HashMap requires
@@ -130,4 +129,4 @@ class WebURLLoaderMockFactoryImpl : public WebURLLoaderMockFactory {
 
 }  // namespace blink
 
-#endif  // THIRD_PARTY_BLINK_RENDERER_PLATFORM_TESTING_WEBURL_LOADER_MOCK_FACTORY_IMPL_H_
+#endif  // THIRD_PARTY_BLINK_RENDERER_PLATFORM_TESTING_URL_LOADER_MOCK_FACTORY_IMPL_H_
diff --git a/third_party/blink/renderer/platform/testing/web_url_loader_test_delegate.cc b/third_party/blink/renderer/platform/testing/url_loader_test_delegate.cc
similarity index 51%
rename from third_party/blink/renderer/platform/testing/web_url_loader_test_delegate.cc
rename to third_party/blink/renderer/platform/testing/url_loader_test_delegate.cc
index 4344e02600330..7632cfe91de61 100644
--- a/third_party/blink/renderer/platform/testing/web_url_loader_test_delegate.cc
+++ b/third_party/blink/renderer/platform/testing/url_loader_test_delegate.cc
@@ -2,44 +2,42 @@
 // Use of this source code is governed by a BSD-style license that can be
 // found in the LICENSE file.
 
-#include "third_party/blink/renderer/platform/testing/web_url_loader_test_delegate.h"
+#include "third_party/blink/renderer/platform/testing/url_loader_test_delegate.h"
 
 #include "third_party/blink/public/platform/web_url_error.h"
 #include "third_party/blink/public/platform/web_url_request.h"
-#include "third_party/blink/renderer/platform/loader/fetch/url_loader/web_url_loader.h"
-#include "third_party/blink/renderer/platform/loader/fetch/url_loader/web_url_loader_client.h"
+#include "third_party/blink/renderer/platform/loader/fetch/url_loader/url_loader.h"
+#include "third_party/blink/renderer/platform/loader/fetch/url_loader/url_loader_client.h"
 
 namespace blink {
 
-WebURLLoaderTestDelegate::WebURLLoaderTestDelegate() = default;
+URLLoaderTestDelegate::URLLoaderTestDelegate() = default;
 
-WebURLLoaderTestDelegate::~WebURLLoaderTestDelegate() = default;
+URLLoaderTestDelegate::~URLLoaderTestDelegate() = default;
 
-void WebURLLoaderTestDelegate::DidReceiveResponse(
-    WebURLLoaderClient* original_client,
-    const WebURLResponse& response) {
+void URLLoaderTestDelegate::DidReceiveResponse(URLLoaderClient* original_client,
+                                               const WebURLResponse& response) {
   original_client->DidReceiveResponse(response);
 }
 
-void WebURLLoaderTestDelegate::DidReceiveData(
-    WebURLLoaderClient* original_client,
-    const char* data,
-    size_t data_length) {
+void URLLoaderTestDelegate::DidReceiveData(URLLoaderClient* original_client,
+                                           const char* data,
+                                           size_t data_length) {
   original_client->DidReceiveData(data, data_length);
 }
 
-void WebURLLoaderTestDelegate::DidFail(WebURLLoaderClient* original_client,
-                                       const WebURLError& error,
-                                       int64_t total_encoded_data_length,
-                                       int64_t total_encoded_body_length,
-                                       int64_t total_decoded_body_length) {
+void URLLoaderTestDelegate::DidFail(URLLoaderClient* original_client,
+                                    const WebURLError& error,
+                                    int64_t total_encoded_data_length,
+                                    int64_t total_encoded_body_length,
+                                    int64_t total_decoded_body_length) {
   original_client->DidFail(error, base::TimeTicks::Now(),
                            total_encoded_data_length, total_encoded_body_length,
                            total_decoded_body_length);
 }
 
-void WebURLLoaderTestDelegate::DidFinishLoading(
-    WebURLLoaderClient* original_client,
+void URLLoaderTestDelegate::DidFinishLoading(
+    URLLoaderClient* original_client,
     base::TimeTicks finish_time,
     int64_t total_encoded_data_length,
     int64_t total_encoded_body_length,
diff --git a/third_party/blink/renderer/platform/testing/web_url_loader_test_delegate.h b/third_party/blink/renderer/platform/testing/url_loader_test_delegate.h
similarity index 63%
rename from third_party/blink/renderer/platform/testing/web_url_loader_test_delegate.h
rename to third_party/blink/renderer/platform/testing/url_loader_test_delegate.h
index 14ec3052554e6..a1c1f0b9ebe11 100644
--- a/third_party/blink/renderer/platform/testing/web_url_loader_test_delegate.h
+++ b/third_party/blink/renderer/platform/testing/url_loader_test_delegate.h
@@ -2,8 +2,8 @@
 // Use of this source code is governed by a BSD-style license that can be
 // found in the LICENSE file.
 
-#ifndef THIRD_PARTY_BLINK_RENDERER_PLATFORM_TESTING_WEB_URL_LOADER_TEST_DELEGATE_H_
-#define THIRD_PARTY_BLINK_RENDERER_PLATFORM_TESTING_WEB_URL_LOADER_TEST_DELEGATE_H_
+#ifndef THIRD_PARTY_BLINK_RENDERER_PLATFORM_TESTING_URL_LOADER_TEST_DELEGATE_H_
+#define THIRD_PARTY_BLINK_RENDERER_PLATFORM_TESTING_URL_LOADER_TEST_DELEGATE_H_
 
 #include "base/time/time.h"
 #include "third_party/blink/public/platform/web_common.h"
@@ -12,29 +12,29 @@ namespace blink {
 
 struct WebNavigationParams;
 class WebURLResponse;
-class WebURLLoaderClient;
+class URLLoaderClient;
 struct WebURLError;
 
-// Use with WebURLLoaderMockFactory::SetLoaderDelegate to intercept calls to a
-// WebURLLoaderClient for controlling network responses in a test. Default
+// Use with URLLoaderMockFactory::SetLoaderDelegate to intercept calls to a
+// URLLoaderClient for controlling network responses in a test. Default
 // implementations of all methods just call the original method on the
-// WebURLLoaderClient.
-class WebURLLoaderTestDelegate {
+// URLLoaderClient.
+class URLLoaderTestDelegate {
  public:
-  WebURLLoaderTestDelegate();
-  virtual ~WebURLLoaderTestDelegate();
+  URLLoaderTestDelegate();
+  virtual ~URLLoaderTestDelegate();
 
-  virtual void DidReceiveResponse(WebURLLoaderClient* original_client,
+  virtual void DidReceiveResponse(URLLoaderClient* original_client,
                                   const WebURLResponse&);
-  virtual void DidReceiveData(WebURLLoaderClient* original_client,
+  virtual void DidReceiveData(URLLoaderClient* original_client,
                               const char* data,
                               size_t data_length);
-  virtual void DidFail(WebURLLoaderClient* original_client,
+  virtual void DidFail(URLLoaderClient* original_client,
                        const WebURLError&,
                        int64_t total_encoded_data_length,
                        int64_t total_encoded_body_length,
                        int64_t total_decoded_body_length);
-  virtual void DidFinishLoading(WebURLLoaderClient* original_client,
+  virtual void DidFinishLoading(URLLoaderClient* original_client,
                                 base::TimeTicks finish_time,
                                 int64_t total_encoded_data_length,
                                 int64_t total_encoded_body_length,
@@ -51,4 +51,4 @@ class WebURLLoaderTestDelegate {
 
 }  // namespace blink
 
-#endif  // THIRD_PARTY_BLINK_RENDERER_PLATFORM_TESTING_WEB_URL_LOADER_TEST_DELEGATE_H_
+#endif  // THIRD_PARTY_BLINK_RENDERER_PLATFORM_TESTING_URL_LOADER_TEST_DELEGATE_H_
diff --git a/third_party/blink/renderer/platform/testing/url_test_helpers.cc b/third_party/blink/renderer/platform/testing/url_test_helpers.cc
index d5cb3d0974c94..573a0d07e13e7 100644
--- a/third_party/blink/renderer/platform/testing/url_test_helpers.cc
+++ b/third_party/blink/renderer/platform/testing/url_test_helpers.cc
@@ -40,7 +40,7 @@
 #include "third_party/blink/renderer/platform/loader/fetch/resource_loader.h"
 #include "third_party/blink/renderer/platform/network/http_names.h"
 #include "third_party/blink/renderer/platform/testing/unit_test_helpers.h"
-#include "third_party/blink/renderer/platform/testing/web_url_loader_mock_factory.h"
+#include "third_party/blink/renderer/platform/testing/url_loader_mock_factory.h"
 
 namespace blink {
 namespace url_test_helpers {
@@ -64,7 +64,7 @@ WebURL RegisterMockedURLLoadFromBase(const WebString& base_url,
 void RegisterMockedURLLoad(const WebURL& full_url,
                            const WebString& file_path,
                            const WebString& mime_type,
-                           WebURLLoaderMockFactory* mock_factory,
+                           URLLoaderMockFactory* mock_factory,
                            network::mojom::IPAddressSpace address_space) {
   network::mojom::LoadTimingInfoPtr timing =
       network::mojom::LoadTimingInfo::New();
@@ -80,7 +80,7 @@ void RegisterMockedURLLoad(const WebURL& full_url,
 }
 
 void RegisterMockedErrorURLLoad(const WebURL& full_url,
-                                WebURLLoaderMockFactory* mock_factory) {
+                                URLLoaderMockFactory* mock_factory) {
   network::mojom::LoadTimingInfoPtr timing =
       network::mojom::LoadTimingInfo::New();
 
@@ -97,25 +97,25 @@ void RegisterMockedErrorURLLoad(const WebURL& full_url,
 void RegisterMockedURLLoadWithCustomResponse(const WebURL& full_url,
                                              const WebString& file_path,
                                              WebURLResponse response) {
-  WebURLLoaderMockFactory::GetSingletonInstance()->RegisterURL(
-      full_url, response, file_path);
+  URLLoaderMockFactory::GetSingletonInstance()->RegisterURL(full_url, response,
+                                                            file_path);
 }
 
 void RegisterMockedURLUnregister(const WebURL& url) {
-  WebURLLoaderMockFactory::GetSingletonInstance()->UnregisterURL(url);
+  URLLoaderMockFactory::GetSingletonInstance()->UnregisterURL(url);
 }
 
 void UnregisterAllURLsAndClearMemoryCache() {
-  WebURLLoaderMockFactory::GetSingletonInstance()
+  URLLoaderMockFactory::GetSingletonInstance()
       ->UnregisterAllURLsAndClearMemoryCache();
 }
 
-void SetLoaderDelegate(WebURLLoaderTestDelegate* delegate) {
-  WebURLLoaderMockFactory::GetSingletonInstance()->SetLoaderDelegate(delegate);
+void SetLoaderDelegate(URLLoaderTestDelegate* delegate) {
+  URLLoaderMockFactory::GetSingletonInstance()->SetLoaderDelegate(delegate);
 }
 
 void ServeAsynchronousRequests() {
-  WebURLLoaderMockFactory::GetSingletonInstance()->ServeAsynchronousRequests();
+  URLLoaderMockFactory::GetSingletonInstance()->ServeAsynchronousRequests();
 }
 
 }  // namespace url_test_helpers
diff --git a/third_party/blink/renderer/platform/testing/url_test_helpers.h b/third_party/blink/renderer/platform/testing/url_test_helpers.h
index a021c33e3bae6..8d5ed32d38949 100644
--- a/third_party/blink/renderer/platform/testing/url_test_helpers.h
+++ b/third_party/blink/renderer/platform/testing/url_test_helpers.h
@@ -35,7 +35,7 @@
 #include "third_party/blink/public/platform/web_string.h"
 #include "third_party/blink/public/platform/web_url.h"
 #include "third_party/blink/public/platform/web_url_response.h"
-#include "third_party/blink/renderer/platform/testing/web_url_loader_mock_factory.h"
+#include "third_party/blink/renderer/platform/testing/url_loader_mock_factory.h"
 #include "third_party/blink/renderer/platform/weborigin/kurl.h"
 
 namespace blink {
@@ -74,8 +74,8 @@ void RegisterMockedURLLoad(
     const WebURL& full_url,
     const WebString& file_path,
     const WebString& mime_type = WebString::FromUTF8("text/html"),
-    WebURLLoaderMockFactory* mock_factory =
-        WebURLLoaderMockFactory::GetSingletonInstance(),
+    URLLoaderMockFactory* mock_factory =
+        URLLoaderMockFactory::GetSingletonInstance(),
     network::mojom::IPAddressSpace address_space =
         network::mojom::IPAddressSpace::kPublic);
 
@@ -91,12 +91,12 @@ void RegisterMockedURLLoadWithCustomResponse(const WebURL& full_url,
 // Registers a mock URL that returns a 404 error.
 void RegisterMockedErrorURLLoad(
     const WebURL& full_url,
-    WebURLLoaderMockFactory* mock_factory =
-        WebURLLoaderMockFactory::GetSingletonInstance());
+    URLLoaderMockFactory* mock_factory =
+        URLLoaderMockFactory::GetSingletonInstance());
 
 void UnregisterAllURLsAndClearMemoryCache();
 
-void SetLoaderDelegate(WebURLLoaderTestDelegate* delegate);
+void SetLoaderDelegate(URLLoaderTestDelegate* delegate);
 
 void ServeAsynchronousRequests();
 
diff --git a/tools/traffic_annotation/safe_list.txt b/tools/traffic_annotation/safe_list.txt
index 709155a0d9122..0b5816cd09c30 100644
--- a/tools/traffic_annotation/safe_list.txt
+++ b/tools/traffic_annotation/safe_list.txt
@@ -345,7 +345,7 @@ missing_new_fields,services/image_annotation/annotator.cc
 missing_new_fields,services/network/network_context.cc
 missing_new_fields,services/network/public/cpp/server/http_server.cc
 missing_new_fields,third_party/blink/renderer/modules/peerconnection/peer_connection_dependency_factory.cc
-missing_new_fields,third_party/blink/renderer/platform/loader/fetch/url_loader/web_url_loader.cc
+missing_new_fields,third_party/blink/renderer/platform/loader/fetch/url_loader/url_loader.cc
 missing_new_fields,third_party/libaddressinput/chromium/chrome_metadata_source.cc
 missing_new_fields,ash/quick_pair/repository/fast_pair/footprints_fetcher_impl.cc
 missing_new_fields,chrome/browser/ash/printing/oauth2/authorization_server_data.cc
diff --git a/tools/traffic_annotation/summary/annotations.xml b/tools/traffic_annotation/summary/annotations.xml
index 7802c70dc3f1b..a830b6b7ca3d0 100644
--- a/tools/traffic_annotation/summary/annotations.xml
+++ b/tools/traffic_annotation/summary/annotations.xml
@@ -25,8 +25,8 @@ Refer to README.md for content description and update process.
  <item id="backdrop_next_image_download" added_in_milestone="77" content_hash_code="05df91f2" os_list="linux,windows,chromeos" file_path="chrome/browser/search/background/ntp_background_service.cc" />
  <item id="background_fetch_context" added_in_milestone="62" content_hash_code="031d0caa" os_list="linux,windows,chromeos,android" file_path="content/browser/background_fetch/background_fetch_delegate_proxy.cc" />
  <item id="bidirectional_stream" added_in_milestone="67" content_hash_code="07c03a44" os_list="linux,windows,chromeos,android" file_path="net/http/bidirectional_stream.cc" />
- <item id="blink_extension_resource_loader" added_in_milestone="63" content_hash_code="03c97c39" os_list="linux,windows,chromeos,android" file_path="third_party/blink/renderer/platform/loader/fetch/url_loader/web_url_loader.cc" />
- <item id="blink_resource_loader" added_in_milestone="62" content_hash_code="047d7664" os_list="linux,windows,chromeos,android" file_path="third_party/blink/renderer/platform/loader/fetch/url_loader/web_url_loader.cc" />
+ <item id="blink_extension_resource_loader" added_in_milestone="63" content_hash_code="03c97c39" os_list="linux,windows,chromeos,android" file_path="third_party/blink/renderer/platform/loader/fetch/url_loader/url_loader.cc" />
+ <item id="blink_resource_loader" added_in_milestone="62" content_hash_code="047d7664" os_list="linux,windows,chromeos,android" file_path="third_party/blink/renderer/platform/loader/fetch/url_loader/url_loader.cc" />
  <item id="bluetooth_socket" added_in_milestone="65" content_hash_code="01d7fd7d" os_list="linux,windows,chromeos,android" file_path="device/bluetooth/bluetooth_socket_net.cc" />
  <item id="brandcode_config" added_in_milestone="62" content_hash_code="07ae0010" os_list="linux,windows,chromeos" file_path="chrome/browser/profile_resetter/brandcode_config_fetcher.cc" />
  <item id="browser_switcher_ieem_sitelist" added_in_milestone="72" content_hash_code="07b15836" os_list="linux,windows" file_path="chrome/browser/browser_switcher/browser_switcher_service.cc" />
@@ -83,7 +83,7 @@ Refer to README.md for content description and update process.
  <item id="extension_install_signer" added_in_milestone="62" content_hash_code="065c4bce" os_list="linux,windows,chromeos" file_path="chrome/browser/extensions/install_signer.cc" />
  <item id="extension_manifest_fetcher" added_in_milestone="62" content_hash_code="05983aa9" os_list="linux,windows,chromeos" file_path="extensions/browser/updater/extension_downloader.cc" />
  <item id="external_policy_fetcher" added_in_milestone="62" content_hash_code="03d48984" os_list="linux,windows,chromeos" file_path="components/policy/core/common/cloud/external_policy_data_fetcher.cc" />
- <item id="favicon_loader" added_in_milestone="63" content_hash_code="0437e97c" os_list="linux,windows,chromeos,android" file_path="third_party/blink/renderer/platform/loader/fetch/url_loader/web_url_loader.cc" />
+ <item id="favicon_loader" added_in_milestone="63" content_hash_code="0437e97c" os_list="linux,windows,chromeos,android" file_path="third_party/blink/renderer/platform/loader/fetch/url_loader/url_loader.cc" />
  <item id="ftl_messaging_client_ack_messages" added_in_milestone="86" content_hash_code="013f1ddb" os_list="linux,windows,chromeos,android" file_path="remoting/signaling/ftl_messaging_client.cc" />
  <item id="ftl_messaging_client_receive_messages" added_in_milestone="86" content_hash_code="022e9c77" os_list="linux,windows,chromeos,android" file_path="remoting/signaling/ftl_messaging_client.cc" />
  <item id="ftl_messaging_client_send_messages" added_in_milestone="86" content_hash_code="006864f3" os_list="linux,windows,chromeos,android" file_path="remoting/signaling/ftl_messaging_client.cc" />
-- 
2.37.2

