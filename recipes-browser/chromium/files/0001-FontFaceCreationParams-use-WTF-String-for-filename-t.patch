From 3940b8f940182123a0a2b9a75b9b894506cefc71 Mon Sep 17 00:00:00 2001
From: Jose Dapena Paz <jose.dapena@lge.com>
Date: Mon, 29 Jul 2019 23:38:06 +0200
Subject: FontFaceCreationParams: use WTF::String for filename to avoid using
 std::string in hash traits

FontFaceCreationParams is used for FontCacheKey, that is used for HashMap, but also for
LinkedHashSet. The problem is that libstdc++ std::string cannot be initialized with memset
directly. Once we assign anything to it it will crash as the _M_dataplus._M_p buffer will
be a null pointer, and it will try to index it to copy data.

One solution could be setting kEmptyValueIsZero to false in FontCacheKeyTraits. But that is
not enough, as FontCacheKey will also be indirectly set in LinkedHashSet, that sets
kEmptyValueIsZero.

So, to avoid these issues, this change replaces std::string in FontFaceCreationParams with
WTF::String. A memset of zeros will still be a valid value, so the required changes are
minimal, and the performance impact should be low.

Bug: 980025
Change-Id: If7dc51634813395cf09b4be40c6ded69fd3aaf62

diff --git a/third_party/blink/renderer/platform/fonts/font_face_creation_params.h b/third_party/blink/renderer/platform/fonts/font_face_creation_params.h
index 825dd56a3b9a..d5ad98225458 100644
--- a/third_party/blink/renderer/platform/fonts/font_face_creation_params.h
+++ b/third_party/blink/renderer/platform/fonts/font_face_creation_params.h
@@ -37,6 +37,7 @@
 #include "third_party/blink/renderer/platform/wtf/text/atomic_string.h"
 #include "third_party/blink/renderer/platform/wtf/text/string_hash.h"
 #include "third_party/blink/renderer/platform/wtf/text/string_hasher.h"
+#include "third_party/blink/renderer/platform/wtf/text/wtf_string.h"
 
 namespace blink {
 
@@ -52,14 +53,12 @@ class FontFaceCreationParams {
   FontFaceCreationParams()
       : creation_type_(kCreateFontByFamily),
         family_(AtomicString()),
-        filename_(std::string()),
         fontconfig_interface_id_(0),
         ttc_index_(0) {}
 
   explicit FontFaceCreationParams(AtomicString family)
       : creation_type_(kCreateFontByFamily),
         family_(family),
-        filename_(std::string()),
         fontconfig_interface_id_(0),
         ttc_index_(0) {
 #if defined(OS_WIN)
@@ -77,7 +76,7 @@ class FontFaceCreationParams {
                          int fontconfig_interface_id,
                          int ttc_index = 0)
       : creation_type_(kCreateFontByFciIdAndTtcIndex),
-        filename_(filename),
+        filename_(filename.data()),
         fontconfig_interface_id_(fontconfig_interface_id),
         ttc_index_(ttc_index) {}
 
@@ -86,7 +85,7 @@ class FontFaceCreationParams {
     DCHECK_EQ(creation_type_, kCreateFontByFamily);
     return family_;
   }
-  const std::string& Filename() const {
+  const WTF::String Filename() const {
     DCHECK_EQ(creation_type_, kCreateFontByFciIdAndTtcIndex);
     return filename_;
   }
@@ -106,8 +105,9 @@ class FontFaceCreationParams {
       // encoding and endianness. However, since the hash is not transferred
       // over a network or permanently stored and only used for the runtime of
       // Chromium, this is not a concern.
-      hasher.AddCharacters(reinterpret_cast<const LChar*>(filename_.data()),
-                           static_cast<unsigned>(filename_.length()));
+      hasher.AddCharacters(
+          reinterpret_cast<const LChar*>(filename_.Characters8()),
+          static_cast<unsigned>(filename_.length()));
       hasher.AddCharacters(reinterpret_cast<const LChar*>(&ttc_index_),
                            sizeof(ttc_index_));
       hasher.AddCharacters(
@@ -129,7 +129,7 @@ class FontFaceCreationParams {
  private:
   FontFaceCreationType creation_type_;
   AtomicString family_;
-  std::string filename_;
+  WTF::String filename_;
   int fontconfig_interface_id_;
   int ttc_index_;
 };
diff --git a/third_party/blink/renderer/platform/fonts/skia/font_cache_skia.cc b/third_party/blink/renderer/platform/fonts/skia/font_cache_skia.cc
index 51bdbb7510ce..36c339118974 100644
--- a/third_party/blink/renderer/platform/fonts/skia/font_cache_skia.cc
+++ b/third_party/blink/renderer/platform/fonts/skia/font_cache_skia.cc
@@ -49,6 +49,7 @@
 #include "third_party/blink/renderer/platform/runtime_enabled_features.h"
 #include "third_party/blink/renderer/platform/wtf/assertions.h"
 #include "third_party/blink/renderer/platform/wtf/text/atomic_string.h"
+#include "third_party/blink/renderer/platform/wtf/text/wtf_string.h"
 #include "third_party/skia/include/core/SkFontMgr.h"
 #include "third_party/skia/include/core/SkStream.h"
 #include "third_party/skia/include/core/SkTypeface.h"
@@ -202,7 +203,7 @@ sk_sp<SkTypeface> FontCache::CreateTypeface(
           creation_params.FontconfigInterfaceId(), creation_params.TtcIndex());
     }
     return SkTypeface_Factory::FromFilenameAndTtcIndex(
-        creation_params.Filename().data(), creation_params.TtcIndex());
+        creation_params.Filename().Characters8(), creation_params.TtcIndex());
   }
 #endif
 
diff --git a/third_party/blink/renderer/platform/fonts/skia/sktypeface_factory.cc b/third_party/blink/renderer/platform/fonts/skia/sktypeface_factory.cc
index c6a2daf8afc2..39c9020be6e8 100644
--- a/third_party/blink/renderer/platform/fonts/skia/sktypeface_factory.cc
+++ b/third_party/blink/renderer/platform/fonts/skia/sktypeface_factory.cc
@@ -6,6 +6,7 @@
 
 #include "base/logging.h"
 #include "build/build_config.h"
+#include "third_party/blink/renderer/platform/wtf/text/wtf_string.h"
 #include "third_party/skia/include/core/SkFontMgr.h"
 #include "third_party/skia/include/ports/SkFontConfigInterface.h"
 
@@ -30,11 +31,12 @@ sk_sp<SkTypeface> SkTypeface_Factory::FromFontConfigInterfaceIdAndTtcIndex(
 
 // static
 sk_sp<SkTypeface> SkTypeface_Factory::FromFilenameAndTtcIndex(
-    const std::string& filename,
+    const WTF::String& filename,
     int ttc_index) {
 #if !defined(OS_WIN) && !defined(OS_ANDROID) && !defined(OS_FUCHSIA) && \
     !defined(OS_MACOSX)
-  return SkTypeface::MakeFromFile(filename.c_str(), ttc_index);
+  return SkTypeface::MakeFromFile(
+      reinterpret_cast<const char*>(filename.Characters8()), ttc_index);
 #else
   NOTREACHED();
   return nullptr;
diff --git a/third_party/blink/renderer/platform/fonts/skia/sktypeface_factory.h b/third_party/blink/renderer/platform/fonts/skia/sktypeface_factory.h
index 65f9d4a750c5..b1869c00d22b 100644
--- a/third_party/blink/renderer/platform/fonts/skia/sktypeface_factory.h
+++ b/third_party/blink/renderer/platform/fonts/skia/sktypeface_factory.h
@@ -9,6 +9,10 @@
 #include "third_party/skia/include/core/SkRefCnt.h"
 #include "third_party/skia/include/core/SkTypeface.h"
 
+namespace WTF {
+class String;
+};
+
 namespace blink {
 
 // Class to bundle all typeface creation method and hopefully harmonize them in
@@ -21,7 +25,7 @@ class SkTypeface_Factory {
  public:
   static sk_sp<SkTypeface> FromFontConfigInterfaceIdAndTtcIndex(int config_id,
                                                                 int ttc_index);
-  static sk_sp<SkTypeface> FromFilenameAndTtcIndex(const std::string& filename,
+  static sk_sp<SkTypeface> FromFilenameAndTtcIndex(const WTF::String& filename,
                                                    int ttc_index);
   static sk_sp<SkTypeface> FromFamilyNameAndFontStyle(
       const std::string& family_name,
-- 
2.20.1

