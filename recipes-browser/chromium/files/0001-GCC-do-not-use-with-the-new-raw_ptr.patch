From 723749d86b93c3420cd09f72569fde3ca2eda467 Mon Sep 17 00:00:00 2001
From: Jose Dapena Paz <jdapena@igalia.com>
Date: Tue, 30 Nov 2021 22:02:08 +0100
Subject: GCC: do not use ->* with the new raw_ptr.

GCC fails with an internal compiler error when using pointer to member
operator with raw_ptr.

Bug reported to GCC: https://gcc.gnu.org/bugzilla/show_bug.cgi?id=103455

Change-Id: I3ddc9fde69254da32d5a7d1df0a58a09fb120ff4
---
 .../passwords/auto_signin_first_run_dialog_view.cc  |  2 +-
 gpu/command_buffer/client/gl_helper.h               | 13 +++++++++----
 ui/accessibility/ax_node.h                          | 12 +++++++-----
 ui/views/layout/flex_layout_types.cc                |  2 +-
 4 files changed, 18 insertions(+), 11 deletions(-)

diff --git a/chrome/browser/ui/views/passwords/auto_signin_first_run_dialog_view.cc b/chrome/browser/ui/views/passwords/auto_signin_first_run_dialog_view.cc
index f446c22ba3b18..160ebe5238923 100644
--- a/chrome/browser/ui/views/passwords/auto_signin_first_run_dialog_view.cc
+++ b/chrome/browser/ui/views/passwords/auto_signin_first_run_dialog_view.cc
@@ -37,7 +37,7 @@ AutoSigninFirstRunDialogView::AutoSigninFirstRunDialogView(
   auto call_controller = [](AutoSigninFirstRunDialogView* dialog,
                             ControllerCallbackFn func) {
     if (dialog->controller_) {
-      (dialog->controller_->*func)();
+      base::BindOnce(func, base::Unretained(dialog->controller_)).Run();
     }
   };
   SetAcceptCallback(
diff --git a/gpu/command_buffer/client/gl_helper.h b/gpu/command_buffer/client/gl_helper.h
index cb0b95a2a850e..d7d704afc9df6 100644
--- a/gpu/command_buffer/client/gl_helper.h
+++ b/gpu/command_buffer/client/gl_helper.h
@@ -34,7 +34,7 @@ class ScopedGLuint {
                GenFunc gen_func,
                DeleteFunc delete_func)
       : gl_(gl), id_(0u), delete_func_(delete_func) {
-    (gl_->*gen_func)(1, &id_);
+    base::BindOnce(gen_func, base::Unretained(gl_)).Run(1, &id_);
   }
 
   operator GLuint() const { return id_; }
@@ -46,7 +46,8 @@ class ScopedGLuint {
 
   ~ScopedGLuint() {
     if (id_ != 0) {
-      (gl_->*delete_func_)(1, &id_);
+      auto closure = base::BindOnce(delete_func_, base::Unretained(gl_));
+      std::move(closure).Run(1, &id_);
     }
   }
 
@@ -86,13 +87,17 @@ class ScopedBinder {
   typedef void (gles2::GLES2Interface::*BindFunc)(GLenum target, GLuint id);
   ScopedBinder(gles2::GLES2Interface* gl, GLuint id, BindFunc bind_func)
       : gl_(gl), bind_func_(bind_func) {
-    (gl_->*bind_func_)(Target, id);
+    auto closure = base::BindOnce(bind_func, base::Unretained(gl_));
+    std::move(closure).Run(Target, id);
   }
 
   ScopedBinder(const ScopedBinder&) = delete;
   ScopedBinder& operator=(const ScopedBinder&) = delete;
 
-  virtual ~ScopedBinder() { (gl_->*bind_func_)(Target, 0); }
+  virtual ~ScopedBinder() {
+    auto closure = base::BindOnce(bind_func_, base::Unretained(gl_));
+    std::move(closure).Run(Target, 0);
+  }
 
  private:
   raw_ptr<gles2::GLES2Interface> gl_;
diff --git a/ui/accessibility/ax_node.h b/ui/accessibility/ax_node.h
index e78fd04b93557..92be905f3be0a 100644
--- a/ui/accessibility/ax_node.h
+++ b/ui/accessibility/ax_node.h
@@ -14,6 +14,7 @@
 #include <utility>
 #include <vector>
 
+#include "base/bind.h"
 #include "base/containers/stack.h"
 #include "base/memory/raw_ptr.h"
 #include "base/strings/char_traits.h"
@@ -822,10 +823,10 @@ AXNode::ChildIteratorBase<NodeType,
   // increment the iterator past the end, we remain at the past-the-end iterator
   // condition.
   if (child_ && parent_) {
-    if (child_ == (parent_->*LastChild)())
+    if (child_ == base::BindOnce(LastChild, base::Unretained(parent_)).Run())
       child_ = nullptr;
     else
-      child_ = (child_->*NextSibling)();
+      child_ = base::BindOnce(NextSibling, base::Unretained(child_)).Run();
   }
 
   return *this;
@@ -850,12 +851,13 @@ AXNode::ChildIteratorBase<NodeType,
     // If the iterator is past the end, |child_=nullptr|, decrement the iterator
     // gives us the last iterator element.
     if (!child_)
-      child_ = (parent_->*LastChild)();
+      child_ = base::BindOnce(LastChild, base::Unretained(parent_)).Run();
     // Decrement the iterator gives us the previous element, except when the
     // iterator is at the beginning; in which case, decrementing the iterator
     // remains at the beginning.
-    else if (child_ != (parent_->*FirstChild)())
-      child_ = (child_->*PreviousSibling)();
+    else if (child_ !=
+             base::BindOnce(FirstChild, base::Unretained(parent_)).Run())
+      child_ = base::BindOnce(PreviousSibling, base::Unretained(child_)).Run();
   }
 
   return *this;
diff --git a/ui/views/layout/flex_layout_types.cc b/ui/views/layout/flex_layout_types.cc
index 7c4bd3f8413a5..c0831d1dad90c 100644
--- a/ui/views/layout/flex_layout_types.cc
+++ b/ui/views/layout/flex_layout_types.cc
@@ -59,7 +59,7 @@ class LazySize {
   const gfx::Size& operator*() const { return *get(); }
   const gfx::Size* get() const {
     if (!size_)
-      size_ = (view_->*size_func_)();
+      size_ = base::BindOnce(size_func_, base::Unretained(view_)).Run();
     return &size_.value();
   }
   LazyDimension width() const {
-- 
2.32.0

