From dd1b0228d93b79bb627f1f26091d9ab9ed0fd25e Mon Sep 17 00:00:00 2001
From: Raphael Kubo da Costa <raphael.kubo.da.costa@intel.com>
Date: Sat, 27 Jan 2018 14:52:56 +0000
Subject: [PATCH] wtf, oilpan: Remove GC checks from WTF::Optional<T>.

Architecturally, there is nothing really preventing garbage-collected types
from being used with Optional<T> other than avoiding misuse.

Relax the existing checks by removing the ones in place in Optional.h
itself, but keep OptionalGarbageCollected in //tools/clang/blink_gc_plugin.

In practice, this is a relaxation of the rules that:
* Allows Optional<HeapVector<T>> (and other Oilpan containers). These
  containers do not inherit from GarbageCollected or GarbageCollectedMixin,
  but do have the IS_GARBAGE_COLLECTED_TYPE() macro in their declarations.
  As we are moving to replace the binding layer's Nullable<T> with wtf's
  Optional<T>, doing so makes things uniform by letting Optional<> be used
  with both Vector and HeapVector types so that Web IDL's

      sequence<long>?

  and

      sequence<Document>?

  are both translated into C++ as Optional<T>.

* Types that do inherit from GarbageCollected or GarbageCollectedMixin are
  still disallowed by the checks in blink_gc_plugin since none of the
  changes to get rid of Nullable<T> require them to be turned off or
  relaxed. Web IDL's

      Document?

  is still represented as Document* in C++.

TraceTrait<T> had to be augmented with a specialization for Optional<T>, as
we may need to Trace() its inner type if it's a GC container type.

Bug: 798464
Change-Id: I12cad41976219654985f5a8d560e7db3f4cedf82
Reviewed-on: https://chromium-review.googlesource.com/888918
Reviewed-by: Yuki Shiino <yukishiino@chromium.org>
Reviewed-by: Keishi Hattori <keishi@chromium.org>
Reviewed-by: Kentaro Hara <haraken@chromium.org>
Reviewed-by: Jeremy Roman <jbroman@chromium.org>
Commit-Queue: Raphael Kubo da Costa <raphael.kubo.da.costa@intel.com>
Cr-Commit-Position: refs/heads/master@{#532217}
---
 third_party/WebKit/Source/platform/heap/TraceTraits.h | 18 ++++++++++++++++++
 third_party/WebKit/Source/platform/wtf/Optional.h     |  9 ++-------
 2 files changed, 20 insertions(+), 7 deletions(-)

diff --git a/third_party/WebKit/Source/platform/heap/TraceTraits.h b/third_party/WebKit/Source/platform/heap/TraceTraits.h
index 54875f4705b5..f77aac882779 100644
--- a/third_party/WebKit/Source/platform/heap/TraceTraits.h
+++ b/third_party/WebKit/Source/platform/heap/TraceTraits.h
@@ -18,6 +18,7 @@
 #include "platform/wtf/HashTable.h"
 #include "platform/wtf/LinkedHashSet.h"
 #include "platform/wtf/ListHashSet.h"
+#include "platform/wtf/Optional.h"
 #include "platform/wtf/TypeTraits.h"
 
 namespace blink {
@@ -324,6 +325,23 @@ class TraceTrait<std::pair<T, U>> {
   }
 };
 
+// While using Optional<T> with garbage-collected types is generally disallowed
+// by the OptionalGarbageCollected check in blink_gc_plugin, garbage-collected
+// containers such as HeapVector are allowed and need to be traced.
+template <typename T>
+class TraceTrait<WTF::Optional<T>> {
+  STATIC_ONLY(TraceTrait);
+
+ public:
+  template <typename VisitorDispatcher>
+  static void Trace(VisitorDispatcher visitor, WTF::Optional<T>* optional) {
+    if (*optional != WTF::nullopt) {
+      TraceIfEnabled<T, WTF::IsTraceable<T>::value>::Trace(visitor,
+                                                           optional->value());
+    }
+  }
+};
+
 // If eager tracing leads to excessively deep |trace()| call chains (and
 // the system stack usage that this brings), the marker implementation will
 // switch to using an explicit mark stack. Recursive and deep object graphs
diff --git a/third_party/WebKit/Source/platform/wtf/Optional.h b/third_party/WebKit/Source/platform/wtf/Optional.h
index 72d388785f05..c5a6b67fdb3c 100644
--- a/third_party/WebKit/Source/platform/wtf/Optional.h
+++ b/third_party/WebKit/Source/platform/wtf/Optional.h
@@ -6,20 +6,15 @@
 #define Optional_h
 
 #include "base/optional.h"
-#include "platform/wtf/TypeTraits.h"
 
 namespace WTF {
 
 // WTF::Optional is base::Optional. See base/optional.h for documentation.
 //
 // A clang plugin enforces that garbage collected types are not allocated
-// outside of the heap, similarly we enforce that one doesn't create garbage
-// collected types nested inside an Optional.
+// outside of the heap. GC containers such as HeapVector are allowed though.
 template <typename T>
-using Optional =
-    typename std::enable_if<!IsGarbageCollectedType<T>::value ||
-                                IsPersistentReferenceType<T>::value,
-                            base::Optional<T>>::type;
+using Optional = base::Optional<T>;
 
 constexpr base::nullopt_t nullopt = base::nullopt;
 constexpr base::in_place_t in_place = base::in_place;
-- 
2.14.1

