From 674607311bdf0b79b3435767de7068bc142dbc8e Mon Sep 17 00:00:00 2001
From: Jose Dapena Paz <jose.dapena@lge.com>
Date: Tue, 4 Jun 2019 11:42:14 +0200
Subject: zlib: fix ARMv8 CRC32 compilation in GCC

GCC compilation in ARM architectures with CRC32 extension was
broken, as the extension was guarded for clang.

For GCC we need to at least enforce armv8-a+crc architecture
so the extensions are available. We can also just include
arm_acle.h to get the required builtins.

Adapted from Vladislav Mukulov <vladislav.mukulov@lge.com>
original patch.

Bug: 819294
Change-Id: Ifa5cf64318f88220052c44126db90bef999b7113

diff --git a/third_party/zlib/BUILD.gn b/third_party/zlib/BUILD.gn
index 1a9cd3b827b3..aa5b1e748f73 100644
--- a/third_party/zlib/BUILD.gn
+++ b/third_party/zlib/BUILD.gn
@@ -89,7 +89,7 @@ if (use_arm_neon_optimizations) {
   source_set("zlib_arm_crc32") {
     visibility = [ ":*" ]
 
-    if (is_clang && !is_ios) {
+    if (!is_ios) {
       include_dirs = [ "." ]
 
       if (is_android) {
@@ -101,6 +101,8 @@ if (use_arm_neon_optimizations) {
         } else {
           assert(false, "CPU detection requires the Android NDK")
         }
+      } else if (!is_win && !is_clang) {
+        cflags_c = [ "-march=armv8-a+crc" ]
       }
 
       sources = [
diff --git a/third_party/zlib/crc32_simd.c b/third_party/zlib/crc32_simd.c
index 03698adf7523..2a793f39f8e3 100644
--- a/third_party/zlib/crc32_simd.c
+++ b/third_party/zlib/crc32_simd.c
@@ -161,6 +161,7 @@ uint32_t ZLIB_INTERNAL crc32_sse42_simd_(  /* SSE4.2+PCLMUL */
  * TODO: implement a version using the PMULL instruction.
  */
 
+#if defined(__clang__)
 /* CRC32 intrinsics are #ifdef'ed out of arm_acle.h unless we build with an
  * armv8 target, which is incompatible with ThinLTO optimizations on Android.
  * (Namely, mixing and matching different module-level targets makes ThinLTO
@@ -187,6 +188,11 @@ uint32_t ZLIB_INTERNAL crc32_sse42_simd_(  /* SSE4.2+PCLMUL */
 #define TARGET_ARMV8_WITH_CRC __attribute__((target("armv8-a,crc")))
 #endif
 
+#else
+#include <arm_acle.h>
+#define TARGET_ARMV8_WITH_CRC
+#endif
+
 TARGET_ARMV8_WITH_CRC
 uint32_t ZLIB_INTERNAL armv8_crc32_little(unsigned long crc,
                                           const unsigned char *buf,
@@ -248,5 +254,4 @@ Pos ZLIB_INTERNAL insert_string_arm(deflate_state *const s, const Pos str)
     return ret;
 }
 
-
 #endif
-- 
2.20.1

