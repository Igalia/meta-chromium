From 8f09b2e454f9446c91ffa39aa5fbc0fc50ddd9c8 Mon Sep 17 00:00:00 2001
From: Jose Dapena Paz <jdapena@igalia.com>
Date: Thu, 21 Dec 2023 15:24:52 +0100
Subject: GCC: explicitely cast NEON intrinsics type conversions

GCC NEON intrinsics are more strict not allowing casts among
different vector types (even if the register size is the same). This
fix explicitely casts the type conversions using vreinterpret*
family of intrinsics.

Bug: chromium:819294
Change-Id: If02dc5196f9651e541ca085d1f441b759a9919d4
---
 src/utils/utils.h | 6 +++---
 1 file changed, 3 insertions(+), 3 deletions(-)

diff --git a/src/utils/utils.h b/src/utils/utils.h
index a69f49f7d46..1fd0ed24389 100644
--- a/src/utils/utils.h
+++ b/src/utils/utils.h
@@ -365,21 +365,21 @@ V8_INLINE bool SimdMemEqual(const Char* lhs, const Char* rhs, size_t count) {
       const auto xored0 = veorq_u8(lhs0, rhs0);
       const auto xored1 = veorq_u8(lhs1, rhs1);
       const auto ored = vorrq_u8(xored0, xored1);
-      return !static_cast<bool>(vgetq_lane_u64(vpmaxq_u8(ored, ored), 0));
+      return !static_cast<bool>(vgetq_lane_u64(vreinterpretq_u64_u8(vpmaxq_u8(ored, ored)), 0));
     }
     default:  // count: [33, ...]
     {
       const auto lhs0 = vld1q_u8(lhs);
       const auto rhs0 = vld1q_u8(rhs);
       const auto xored = veorq_u8(lhs0, rhs0);
-      if (static_cast<bool>(vgetq_lane_u64(vpmaxq_u8(xored, xored), 0)))
+      if (static_cast<bool>(vgetq_lane_u64(vreinterpretq_u64_u8(vpmaxq_u8(xored, xored)), 0)))
         return false;
       for (size_t i = count % sizeof(uint8x16_t); i < count;
            i += sizeof(uint8x16_t)) {
         const auto lhs0 = vld1q_u8(lhs + i);
         const auto rhs0 = vld1q_u8(rhs + i);
         const auto xored = veorq_u8(lhs0, rhs0);
-        if (static_cast<bool>(vgetq_lane_u64(vpmaxq_u8(xored, xored), 0)))
+        if (static_cast<bool>(vgetq_lane_u64(vreinterpretq_u64_u8(vpmaxq_u8(xored, xored)), 0)))
           return false;
       }
       return true;
-- 
2.40.1

