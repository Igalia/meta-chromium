From 27b78b5a6d3f3aaf32ff1b7c4c611eba00bb2217 Mon Sep 17 00:00:00 2001
From: Jose Dapena Paz <jdapena@igalia.com>
Date: Tue, 31 Oct 2023 11:52:56 +0100
Subject: Enable lightweight libstdc++ assertions

Add the GN argument enable_safe_libstdcxx, that enables libstdc++
lightweight assertions, that protect against different bad conditions
as invalid array indexes.

Bug: 1497935
Change-Id: Icb8e85f47295d258bc5ec7bdd32fa58f06b4dcb2
---
 base/BUILD.gn                  | 2 +-
 base/libcpp_hardening_test.cc  | 6 +++++-
 build/config/c++/c++.gni       | 4 ++++
 build/config/compiler/BUILD.gn | 6 ++++++
 build_overrides/build.gni      | 6 ++++++
 5 files changed, 22 insertions(+), 2 deletions(-)

diff --git a/base/BUILD.gn b/base/BUILD.gn
index cbdc40178ecee..bc12e68773222 100644
--- a/base/BUILD.gn
+++ b/base/BUILD.gn
@@ -3530,7 +3530,7 @@ test("base_unittests") {
     ]
   }
 
-  if (use_safe_libcxx) {
+  if (use_safe_libcxx || use_safe_libstdcxx) {
     sources += [ "libcpp_hardening_test.cc" ]
   }
 
diff --git a/base/libcpp_hardening_test.cc b/base/libcpp_hardening_test.cc
index 4224447313a1c..b1f4d99190f70 100644
--- a/base/libcpp_hardening_test.cc
+++ b/base/libcpp_hardening_test.cc
@@ -12,7 +12,11 @@ namespace {
 
 // TODO(thakis): Remove _LIBCPP_ENABLE_ASSERTIONS here once
 // pnacl-saigo's libc++ is new enough.
-#if !_LIBCPP_ENABLE_ASSERTIONS && \
+#if defined(__GLIBCXX__)
+#if !defined(_GLIBCXX_ASSERTIONS)
+#error "libstdc++ assertions should be enabled"
+#endif
+#elif !_LIBCPP_ENABLE_ASSERTIONS && \
     _LIBCPP_HARDENING_MODE != _LIBCPP_HARDENING_MODE_EXTENSIVE
 #error "_LIBCPP_HARDENING_MODE not defined"
 #endif
diff --git a/build/config/c++/c++.gni b/build/config/c++/c++.gni
index 3c0b549b2528a..bd8e7118e3010 100644
--- a/build/config/c++/c++.gni
+++ b/build/config/c++/c++.gni
@@ -59,6 +59,10 @@ declare_args() {
 # enable libc++ hardening there as well.
 use_safe_libcxx = (use_custom_libcxx && enable_safe_libcxx) || is_nacl_saigo
 
+# libstdc++ has its own hardening assertions that we want to enable by default
+# in Chromium builds.
+use_safe_libstdcxx = is_linux && !use_custom_libcxx && enable_safe_libstdcxx
+
 # libc++abi needs to be exported from executables to be picked up by shared
 # libraries on certain instrumented builds.
 export_libcxxabi_from_executables =
diff --git a/build/config/compiler/BUILD.gn b/build/config/compiler/BUILD.gn
index 3c7b4d82d0b46..07ec400b6a6a6 100644
--- a/build/config/compiler/BUILD.gn
+++ b/build/config/compiler/BUILD.gn
@@ -1069,6 +1069,12 @@ config("compiler") {
   } else {
     defines += [ "_LIBCPP_HARDENING_MODE=_LIBCPP_HARDENING_MODE_NONE" ]
   }
+
+  # Enable libstdc++ hardening lightweight assertions. Those have a low
+  # performance penalty but are considered a bare minimum for security.
+  if (use_safe_libstdcxx) {
+    defines += [ "_GLIBCXX_ASSERTIONS=1" ]
+  }
 }
 
 # The BUILDCONFIG file sets this config on targets by default, which means when
diff --git a/build_overrides/build.gni b/build_overrides/build.gni
index 535cf2a6dc8da..81035e40244d1 100644
--- a/build_overrides/build.gni
+++ b/build_overrides/build.gni
@@ -30,6 +30,12 @@ build_with_v8_embedder = build_with_chromium
 # `use_custom_libcxx = true`.
 enable_safe_libcxx = true
 
+# Enable assertions on safety checks, also in libstdc++
+#
+# In case the C++ standard library implementation used is libstdc++, then
+# enable its own hardening checks.
+enable_safe_libstdcxx = true
+
 # Features used by //base/trace_event and //services/tracing.
 declare_args() {
   # Tracing support requires //third_party/perfetto, which is not available in
-- 
2.40.1

