From 8c5d1a0bc1cd5dcc26d7f5bb0c4c8741b031db77 Mon Sep 17 00:00:00 2001
From: Jose Dapena Paz <jdapena@igalia.com>
Date: Wed, 13 Mar 2024 15:54:34 +0100
Subject: Revert "streams: Support ReadableStream async iteration"

This reverts commit 97a15f171283b5f987cfeddfc3a500f1f07b47e5.

This version excludes web_tests as they are stripped in official
tarballs.
---
 .../renderer/bindings/generated_in_core.gni   |   7 +-
 .../blink/renderer/bindings/idl_in_core.gni   |   1 -
 .../renderer/core/streams/readable_stream.cc  | 138 ------------------
 .../renderer/core/streams/readable_stream.h   |  20 +--
 .../renderer/core/streams/readable_stream.idl |   2 -
 .../streams/readable_stream_byob_reader.cc    |   5 +-
 .../streams/readable_stream_default_reader.cc |   5 +-
 .../readable_stream_iterator_options.idl      |   9 --
 .../platform/runtime_enabled_features.json5   |   4 -
 9 files changed, 6 insertions(+), 185 deletions(-)
 delete mode 100644 third_party/blink/renderer/core/streams/readable_stream_iterator_options.idl

diff --git a/third_party/blink/renderer/bindings/generated_in_core.gni b/third_party/blink/renderer/bindings/generated_in_core.gni
index 16fc46c40e484..d164a47c68465 100644
--- a/third_party/blink/renderer/bindings/generated_in_core.gni
+++ b/third_party/blink/renderer/bindings/generated_in_core.gni
@@ -4,10 +4,7 @@
 
 # Generated sources for production
 
-generated_async_iterator_sources_in_core = [
-  "$root_gen_dir/third_party/blink/renderer/bindings/core/v8/v8_async_iterator_readable_stream.cc",
-  "$root_gen_dir/third_party/blink/renderer/bindings/core/v8/v8_async_iterator_readable_stream.h",
-]
+generated_async_iterator_sources_in_core = []
 
 generated_callback_function_sources_in_core = [
   "$root_gen_dir/third_party/blink/renderer/bindings/core/v8/v8_blob_callback.cc",
@@ -360,8 +357,6 @@ generated_dictionary_sources_in_core = [
   "$root_gen_dir/third_party/blink/renderer/bindings/core/v8/v8_readable_stream_byob_read_result.h",
   "$root_gen_dir/third_party/blink/renderer/bindings/core/v8/v8_readable_stream_get_reader_options.cc",
   "$root_gen_dir/third_party/blink/renderer/bindings/core/v8/v8_readable_stream_get_reader_options.h",
-  "$root_gen_dir/third_party/blink/renderer/bindings/core/v8/v8_readable_stream_iterator_options.cc",
-  "$root_gen_dir/third_party/blink/renderer/bindings/core/v8/v8_readable_stream_iterator_options.h",
   "$root_gen_dir/third_party/blink/renderer/bindings/core/v8/v8_readable_stream_read_result.cc",
   "$root_gen_dir/third_party/blink/renderer/bindings/core/v8/v8_readable_stream_read_result.h",
   "$root_gen_dir/third_party/blink/renderer/bindings/core/v8/v8_readable_writable_pair.cc",
diff --git a/third_party/blink/renderer/bindings/idl_in_core.gni b/third_party/blink/renderer/bindings/idl_in_core.gni
index 1369be27750e1..ddc7dae571245 100644
--- a/third_party/blink/renderer/bindings/idl_in_core.gni
+++ b/third_party/blink/renderer/bindings/idl_in_core.gni
@@ -559,7 +559,6 @@ static_idl_files_in_core = [
   "//third_party/blink/renderer/core/streams/readable_stream_default_reader.idl",
   "//third_party/blink/renderer/core/streams/readable_stream_generic_reader.idl",
   "//third_party/blink/renderer/core/streams/readable_stream_get_reader_options.idl",
-  "//third_party/blink/renderer/core/streams/readable_stream_iterator_options.idl",
   "//third_party/blink/renderer/core/streams/readable_stream_read_result.idl",
   "//third_party/blink/renderer/core/streams/readable_writable_pair.idl",
   "//third_party/blink/renderer/core/streams/stream_pipe_options.idl",
diff --git a/third_party/blink/renderer/core/streams/readable_stream.cc b/third_party/blink/renderer/core/streams/readable_stream.cc
index 2779dfe8a8749..7a94370edaea3 100644
--- a/third_party/blink/renderer/core/streams/readable_stream.cc
+++ b/third_party/blink/renderer/core/streams/readable_stream.cc
@@ -6,7 +6,6 @@
 
 #include "third_party/blink/renderer/bindings/core/v8/native_value_traits_impl.h"
 #include "third_party/blink/renderer/bindings/core/v8/script_function.h"
-#include "third_party/blink/renderer/bindings/core/v8/script_promise_resolver.h"
 #include "third_party/blink/renderer/bindings/core/v8/to_v8_traits.h"
 #include "third_party/blink/renderer/bindings/core/v8/v8_readable_stream.h"
 #include "third_party/blink/renderer/bindings/core/v8/v8_readable_stream_get_reader_options.h"
@@ -146,126 +145,6 @@ class ReadableStream::CancelAlgorithm final : public StreamAlgorithm {
   Member<UnderlyingByteSourceBase> underlying_byte_source_;
 };
 
-class ReadableStream::IterationSource final
-    : public ReadableStream::IterationSourceBase {
- public:
-  IterationSource(ScriptState* script_state,
-                  Kind kind,
-                  ReadableStreamDefaultReader* reader,
-                  bool prevent_cancel)
-      : ReadableStream::IterationSourceBase(script_state, kind),
-        reader_(reader),
-        prevent_cancel_(prevent_cancel) {}
-
-  void Trace(Visitor* visitor) const override {
-    visitor->Trace(reader_);
-    ReadableStream::IterationSourceBase::Trace(visitor);
-  }
-
- protected:
-  void GetNextIterationResult() override;
-  void AsyncIteratorReturn(ScriptValue arg) override;
-
- private:
-  friend class IterationReadRequest;
-
-  void TryResolvePromise();
-
-  Member<ReadableStreamDefaultReader> reader_;
-  bool prevent_cancel_;
-};
-
-class ReadableStream::IterationReadRequest final : public ReadRequest {
- public:
-  explicit IterationReadRequest(IterationSource* iteration_source)
-      : iteration_source_(iteration_source) {}
-
-  void ChunkSteps(ScriptState* script_state,
-                  v8::Local<v8::Value> chunk,
-                  ExceptionState& exception_state) const override {
-    // 1. Resolve promise with chunk.
-    iteration_source_->TakePendingPromiseResolver()->Resolve(
-        iteration_source_->MakeIterationResult(
-            ScriptValue(script_state->GetIsolate(), chunk)));
-  }
-
-  void CloseSteps(ScriptState* script_state) const override {
-    // 1. Perform ! ReadableStreamDefaultReaderRelease(reader).
-    ReadableStreamDefaultReader::Release(script_state,
-                                         iteration_source_->reader_);
-    // 2. Resolve promise with end of iteration.
-    iteration_source_->TakePendingPromiseResolver()->Resolve(
-        iteration_source_->MakeEndOfIteration());
-  }
-
-  void ErrorSteps(ScriptState* script_state,
-                  v8::Local<v8::Value> e) const override {
-    // 1. Perform ! ReadableStreamDefaultReaderRelease(reader).
-    ReadableStreamDefaultReader::Release(script_state,
-                                         iteration_source_->reader_);
-    // 2. Reject promise with e.
-    iteration_source_->TakePendingPromiseResolver()->Reject(e);
-  }
-
-  void Trace(Visitor* visitor) const override {
-    visitor->Trace(iteration_source_);
-    ReadRequest::Trace(visitor);
-  }
-
- private:
-  Member<IterationSource> iteration_source_;
-};
-
-void ReadableStream::IterationSource::GetNextIterationResult() {
-  DCHECK(HasPendingPromise());
-
-  // https://streams.spec.whatwg.org/#ref-for-dfn-get-the-next-iteration-result
-  // 2. Assert: reader.[[stream]] is not undefined.
-  DCHECK(reader_->owner_readable_stream_);
-
-  // 4. Let readRequest be a new read request.
-  auto* read_request = MakeGarbageCollected<IterationReadRequest>(this);
-
-  // 5. Perform ! ReadableStreamDefaultReaderRead(this, readRequest).
-  ScriptState* script_state = GetScriptState();
-  ExceptionState exception_state(script_state->GetIsolate(),
-                                 ExceptionContextType::kUnknown, "", "");
-  ReadableStreamDefaultReader::Read(script_state, reader_, read_request,
-                                    exception_state);
-}
-
-void ReadableStream::IterationSource::AsyncIteratorReturn(ScriptValue arg) {
-  DCHECK(HasPendingPromise());
-
-  // https://streams.spec.whatwg.org/#ref-for-asynchronous-iterator-return
-  // 2. Assert: reader.[[stream]] is not undefined.
-  DCHECK(reader_->owner_readable_stream_);
-  // 3. Assert: reader.[[readRequests]] is empty, as the async iterator
-  //    machinery guarantees that any previous calls to next() have settled
-  //    before this is called.
-  DCHECK(reader_->read_requests_.empty());
-
-  ScriptState* script_state = GetScriptState();
-  // 4. If iterator's prevent cancel is false:
-  if (!prevent_cancel_) {
-    // 4.1. Let result be ! ReadableStreamReaderGenericCancel(reader, arg).
-    v8::Local<v8::Promise> result = ReadableStreamGenericReader::GenericCancel(
-        script_state, reader_, arg.V8Value());
-    // 4.2. Perform ! ReadableStreamDefaultReaderRelease(reader).
-    ReadableStreamDefaultReader::Release(script_state, reader_);
-    // 4.3. Return result.
-    TakePendingPromiseResolver()->Resolve(result);
-    return;
-  }
-
-  // 5. Perform ! ReadableStreamDefaultReaderRelease(reader).
-  ReadableStreamDefaultReader::Release(script_state, reader_);
-
-  // 6. Return a promise resolved with undefined.
-  TakePendingPromiseResolver()->Resolve(
-      v8::Undefined(script_state->GetIsolate()));
-}
-
 ReadableStream* ReadableStream::Create(ScriptState* script_state,
                                        ExceptionState& exception_state) {
   return Create(script_state,
@@ -1332,21 +1211,4 @@ HeapVector<Member<ReadableStream>> ReadableStream::CallTeeAndReturnBranchArray(
   return HeapVector<Member<ReadableStream>>({branch1, branch2});
 }
 
-ReadableStream::IterationSourceBase* ReadableStream::CreateIterationSource(
-    ScriptState* script_state,
-    ReadableStream::IterationSourceBase::Kind kind,
-    ReadableStreamIteratorOptions* options,
-    ExceptionState& exception_state) {
-  // 1. Let reader be ? AcquireReadableStreamDefaultReader(stream).
-  ReadableStreamDefaultReader* reader =
-      AcquireDefaultReader(script_state, this, exception_state);
-  if (!reader) {
-    return nullptr;
-  }
-  // 3. Let preventCancel be args[0]["preventCancel"].
-  bool prevent_cancel = options->preventCancel();
-  return MakeGarbageCollected<IterationSource>(script_state, kind, reader,
-                                               prevent_cancel);
-}
-
 }  // namespace blink
diff --git a/third_party/blink/renderer/core/streams/readable_stream.h b/third_party/blink/renderer/core/streams/readable_stream.h
index d0944021a3d14..f9bf942bfa4ed 100644
--- a/third_party/blink/renderer/core/streams/readable_stream.h
+++ b/third_party/blink/renderer/core/streams/readable_stream.h
@@ -8,10 +8,7 @@
 #include <stdint.h>
 #include <memory>
 
-#include "third_party/blink/renderer/bindings/core/v8/async_iterable.h"
 #include "third_party/blink/renderer/bindings/core/v8/script_value.h"
-#include "third_party/blink/renderer/bindings/core/v8/v8_async_iterator_readable_stream.h"
-#include "third_party/blink/renderer/bindings/core/v8/v8_readable_stream_iterator_options.h"
 #include "third_party/blink/renderer/bindings/core/v8/v8_typedefs.h"
 #include "third_party/blink/renderer/core/core_export.h"
 #include "third_party/blink/renderer/core/streams/readable_stream_default_reader.h"
@@ -48,10 +45,7 @@ class WritableStream;
 
 // C++ implementation of ReadableStream.
 // See https://streams.spec.whatwg.org/#rs-model for background.
-class CORE_EXPORT ReadableStream
-    : public ScriptWrappable,
-      public ValueAsyncIterable<ReadableStream,
-                                ReadableStreamIteratorOptions*> {
+class CORE_EXPORT ReadableStream : public ScriptWrappable {
   DEFINE_WRAPPERTYPEINFO();
 
  public:
@@ -291,8 +285,6 @@ class CORE_EXPORT ReadableStream
   class PullAlgorithm;
   class CancelAlgorithm;
   class ReadHandleImpl;
-  class IterationSource;
-  class IterationReadRequest;
 
   // https://streams.spec.whatwg.org/#rs-constructor
   void InitInternal(ScriptState*,
@@ -365,16 +357,6 @@ class CORE_EXPORT ReadableStream
   Member<ReadableStreamGenericReader> reader_;
   TraceWrapperV8Reference<v8::Value> stored_error_;
   std::unique_ptr<ReadableStreamTransferringOptimizer> transferring_optimizer_;
-
-  // ValueAsyncIterable<ReadableStream> overrides:
-  using IterationSourceBase =
-      ValueAsyncIterable<ReadableStream,
-                         ReadableStreamIteratorOptions*>::IterationSource;
-  IterationSourceBase* CreateIterationSource(
-      ScriptState* script_state,
-      IterationSourceBase::Kind kind,
-      ReadableStreamIteratorOptions* options,
-      ExceptionState& exception_state) override;
 };
 
 }  // namespace blink
diff --git a/third_party/blink/renderer/core/streams/readable_stream.idl b/third_party/blink/renderer/core/streams/readable_stream.idl
index 43d6ac5422d3f..d18fa3eb5ec5b 100644
--- a/third_party/blink/renderer/core/streams/readable_stream.idl
+++ b/third_party/blink/renderer/core/streams/readable_stream.idl
@@ -12,8 +12,6 @@ enum ReadableStreamType { "bytes" };
 [
     Exposed=(Window,Worker,Worklet)
 ] interface ReadableStream {
-    [RuntimeEnabled=ReadableStreamAsyncIterable, HasAsyncIteratorReturnAlgorithm] async iterable<any>(optional ReadableStreamIteratorOptions options = {});
-
     [CallWith=ScriptState, RaisesException] constructor(optional any underlyingSource, optional any strategy);
     readonly attribute boolean locked;
 
diff --git a/third_party/blink/renderer/core/streams/readable_stream_byob_reader.cc b/third_party/blink/renderer/core/streams/readable_stream_byob_reader.cc
index e8b4c42f2ac8c..c24557d7e568b 100644
--- a/third_party/blink/renderer/core/streams/readable_stream_byob_reader.cc
+++ b/third_party/blink/renderer/core/streams/readable_stream_byob_reader.cc
@@ -183,13 +183,12 @@ void ReadableStreamBYOBReader::ErrorReadIntoRequests(
   // https://streams.spec.whatwg.org/#abstract-opdef-readablestreambyobreadererrorreadintorequests
   // 1. Let readIntoRequests be reader.[[readIntoRequests]].
   // 2. Set reader.[[readIntoRequests]] to a new empty list.
-  HeapDeque<Member<ReadIntoRequest>> read_into_requests;
-  read_into_requests.Swap(reader->read_into_requests_);
   // 3. For each readIntoRequest of readIntoRequests,
-  for (ReadIntoRequest* request : read_into_requests) {
+  for (ReadIntoRequest* request : reader->read_into_requests_) {
     //   a. Perform readIntoRequest’s error steps, given e.
     request->ErrorSteps(script_state, e);
   }
+  reader->read_into_requests_.clear();
 }
 
 void ReadableStreamBYOBReader::Release(ScriptState* script_state,
diff --git a/third_party/blink/renderer/core/streams/readable_stream_default_reader.cc b/third_party/blink/renderer/core/streams/readable_stream_default_reader.cc
index 04b40ebb134bb..107b7f493d262 100644
--- a/third_party/blink/renderer/core/streams/readable_stream_default_reader.cc
+++ b/third_party/blink/renderer/core/streams/readable_stream_default_reader.cc
@@ -165,13 +165,12 @@ void ReadableStreamDefaultReader::ErrorReadRequests(
   // https://streams.spec.whatwg.org/#abstract-opdef-readablestreamdefaultreadererrorreadrequests
   // 1. Let readRequests be reader.[[readRequests]].
   // 2. Set reader.[[readRequests]] to a new empty list.
-  HeapDeque<Member<ReadRequest>> read_requests;
-  read_requests.Swap(reader->read_requests_);
   // 3. For each readRequest of readRequests,
-  for (ReadRequest* read_request : read_requests) {
+  for (ReadRequest* read_request : reader->read_requests_) {
     //   a. Perform readRequest’s error steps, given e.
     read_request->ErrorSteps(script_state, e);
   }
+  reader->read_requests_.clear();
 }
 
 void ReadableStreamDefaultReader::Release(ScriptState* script_state,
diff --git a/third_party/blink/renderer/core/streams/readable_stream_iterator_options.idl b/third_party/blink/renderer/core/streams/readable_stream_iterator_options.idl
deleted file mode 100644
index f9aac8693e039..0000000000000
--- a/third_party/blink/renderer/core/streams/readable_stream_iterator_options.idl
+++ /dev/null
@@ -1,9 +0,0 @@
-// Copyright 2024 The Chromium Authors
-// Use of this source code is governed by a BSD-style license that can be
-// found in the LICENSE file.
-
-// https://streams.spec.whatwg.org/#dictdef-readablestreamiteratoroptions
-
-dictionary ReadableStreamIteratorOptions {
-  boolean preventCancel = false;
-};
diff --git a/third_party/blink/renderer/platform/runtime_enabled_features.json5 b/third_party/blink/renderer/platform/runtime_enabled_features.json5
index 7aba6c89141f4..22a8805a08d2a 100644
--- a/third_party/blink/renderer/platform/runtime_enabled_features.json5
+++ b/third_party/blink/renderer/platform/runtime_enabled_features.json5
@@ -3049,10 +3049,6 @@
     {
       name: "RasterInducingScroll",
     },
-    {
-      name: "ReadableStreamAsyncIterable",
-      status: "stable",
-    },
     // If enabled, the Accept-Language header will be reduced.
     {
       name: "ReduceAcceptLanguage",
-- 
2.40.1

