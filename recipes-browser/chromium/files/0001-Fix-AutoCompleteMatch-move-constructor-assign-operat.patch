From ea1679622ec0dfef782f1a275a1d4ea6c8b217ba Mon Sep 17 00:00:00 2001
From: Jose Dapena Paz <jose.dapena@lge.com>
Date: Tue, 4 Jun 2019 21:26:05 +0200
Subject: Fix AutoCompleteMatch move constructor/assign operator noexcept

For AutoCompleteMatch to declare noexcept them, all the contained
properties need to be noexcept too. This fixes GCC build.

Bug: 819294
Change-Id: I8714f2c6352a3292bdebdc3aed9790270e49c580

diff --git a/components/omnibox/browser/suggestion_answer.cc b/components/omnibox/browser/suggestion_answer.cc
index 151e55f7dd58..a0c9049afedb 100644
--- a/components/omnibox/browser/suggestion_answer.cc
+++ b/components/omnibox/browser/suggestion_answer.cc
@@ -55,6 +55,12 @@ void AppendWithSpace(const SuggestionAnswer::TextField* text,
 
 SuggestionAnswer::TextField::TextField() = default;
 SuggestionAnswer::TextField::~TextField() = default;
+SuggestionAnswer::TextField::TextField(const TextField&) = default;
+SuggestionAnswer::TextField::TextField(TextField&&) noexcept = default;
+SuggestionAnswer::TextField& SuggestionAnswer::TextField::operator=(
+    const TextField&) = default;
+SuggestionAnswer::TextField& SuggestionAnswer::TextField::operator=(
+    TextField&&) noexcept = default;
 
 // static
 bool SuggestionAnswer::TextField::ParseTextField(const base::Value& field_json,
@@ -93,9 +99,12 @@ size_t SuggestionAnswer::TextField::EstimateMemoryUsage() const {
 SuggestionAnswer::ImageLine::ImageLine()
     : num_text_lines_(1) {}
 SuggestionAnswer::ImageLine::ImageLine(const ImageLine& line) = default;
+SuggestionAnswer::ImageLine::ImageLine(ImageLine&&) noexcept = default;
 
 SuggestionAnswer::ImageLine& SuggestionAnswer::ImageLine::operator=(
     const ImageLine& line) = default;
+SuggestionAnswer::ImageLine& SuggestionAnswer::ImageLine::operator=(
+    ImageLine&&) noexcept = default;
 
 SuggestionAnswer::ImageLine::~ImageLine() {}
 
@@ -251,9 +260,14 @@ SuggestionAnswer::SuggestionAnswer() = default;
 
 SuggestionAnswer::SuggestionAnswer(const SuggestionAnswer& answer) = default;
 
+SuggestionAnswer::SuggestionAnswer(SuggestionAnswer&&) noexcept = default;
+
 SuggestionAnswer& SuggestionAnswer::operator=(const SuggestionAnswer& answer) =
     default;
 
+SuggestionAnswer& SuggestionAnswer::operator=(SuggestionAnswer&&) noexcept =
+    default;
+
 SuggestionAnswer::~SuggestionAnswer() = default;
 
 // static
diff --git a/components/omnibox/browser/suggestion_answer.h b/components/omnibox/browser/suggestion_answer.h
index 31be937ccbed..2840ace1c117 100644
--- a/components/omnibox/browser/suggestion_answer.h
+++ b/components/omnibox/browser/suggestion_answer.h
@@ -125,6 +125,10 @@ class SuggestionAnswer {
    public:
     TextField();
     ~TextField();
+    TextField(const TextField&);
+    TextField(TextField&&) noexcept;
+    TextField& operator=(const TextField&);
+    TextField& operator=(TextField&&) noexcept;
 
     // Parses |field_json| dictionary and populates |text_field| with the
     // contents.  If any of the required elements is missing, returns false and
@@ -162,7 +166,9 @@ class SuggestionAnswer {
    public:
     ImageLine();
     explicit ImageLine(const ImageLine& line);
+    ImageLine(ImageLine&&) noexcept;
     ImageLine& operator=(const ImageLine& line);
+    ImageLine& operator=(ImageLine&&) noexcept;
     ~ImageLine();
 
     // Parses dictionary |line_json| and populates |image_line| with the
@@ -213,7 +219,9 @@ class SuggestionAnswer {
 
   SuggestionAnswer();
   SuggestionAnswer(const SuggestionAnswer& answer);
+  SuggestionAnswer(SuggestionAnswer&&) noexcept;
   SuggestionAnswer& operator=(const SuggestionAnswer& answer);
+  SuggestionAnswer& operator=(SuggestionAnswer&&) noexcept;
   ~SuggestionAnswer();
 
   // Parses dictionary |answer_json| and fills a SuggestionAnswer containing the
diff --git a/components/search_engines/template_url.cc b/components/search_engines/template_url.cc
index 1895362558f9..a6ecb9dbcb52 100644
--- a/components/search_engines/template_url.cc
+++ b/components/search_engines/template_url.cc
@@ -199,6 +199,12 @@ TemplateURLRef::SearchTermsArgs::SearchTermsArgs(
 TemplateURLRef::SearchTermsArgs::SearchTermsArgs(const SearchTermsArgs& other) =
     default;
 
+TemplateURLRef::SearchTermsArgs::SearchTermsArgs(SearchTermsArgs&&) noexcept =
+    default;
+
+TemplateURLRef::SearchTermsArgs& TemplateURLRef::SearchTermsArgs::operator=(
+    SearchTermsArgs&&) noexcept = default;
+
 TemplateURLRef::SearchTermsArgs::~SearchTermsArgs() {
 }
 
@@ -242,6 +248,17 @@ TemplateURLRef::SearchTermsArgs::ContextualSearchParams::ContextualSearchParams(
 TemplateURLRef::SearchTermsArgs::ContextualSearchParams::ContextualSearchParams(
     const ContextualSearchParams& other) = default;
 
+TemplateURLRef::SearchTermsArgs::ContextualSearchParams::ContextualSearchParams(
+    ContextualSearchParams&&) noexcept = default;
+
+TemplateURLRef::SearchTermsArgs::ContextualSearchParams&
+TemplateURLRef::SearchTermsArgs::ContextualSearchParams::operator=(
+    const ContextualSearchParams&) = default;
+
+TemplateURLRef::SearchTermsArgs::ContextualSearchParams&
+TemplateURLRef::SearchTermsArgs::ContextualSearchParams::operator=(
+    ContextualSearchParams&&) noexcept = default;
+
 TemplateURLRef::SearchTermsArgs::ContextualSearchParams::
     ~ContextualSearchParams() {
 }
diff --git a/components/search_engines/template_url.h b/components/search_engines/template_url.h
index 21c68f029f14..be1ab05e0a45 100644
--- a/components/search_engines/template_url.h
+++ b/components/search_engines/template_url.h
@@ -73,7 +73,9 @@ class TemplateURLRef {
   struct SearchTermsArgs {
     explicit SearchTermsArgs(const base::string16& search_terms);
     SearchTermsArgs(const SearchTermsArgs& other);
+    SearchTermsArgs(SearchTermsArgs&&) noexcept;
     ~SearchTermsArgs();
+    SearchTermsArgs& operator=(SearchTermsArgs&&) noexcept;
 
     struct ContextualSearchParams {
       ContextualSearchParams();
@@ -97,7 +99,10 @@ class TemplateURLRef {
                              int64_t previous_event_id,
                              int previous_event_results);
       ContextualSearchParams(const ContextualSearchParams& other);
+      ContextualSearchParams(ContextualSearchParams&&) noexcept;
       ~ContextualSearchParams();
+      ContextualSearchParams& operator=(const ContextualSearchParams&);
+      ContextualSearchParams& operator=(ContextualSearchParams&&) noexcept;
 
       // Estimates dynamic memory usage.
       // See base/trace_event/memory_usage_estimator.h for more info.
-- 
2.20.1

