From 57711e3b2b594e6a65c368db83bebe225387e59d Mon Sep 17 00:00:00 2001
From: Mattias Buelens <mattias.buelens@gmail.com>
Date: Wed, 20 Mar 2024 22:34:03 +0100
Subject: streams: Fix gcc compatibility for ReadableStream::valuesForBinding()

The perfect forwarding technique we used turned out to be incompatible
with gcc. Revert to something simpler.

Bug: 40612900
Change-Id: I45f3588354fe96159c7f84d969ac222a935b1c1a
---
 .../bindings/core/v8/async_iterable.h         | 32 +++++++++----------
 1 file changed, 16 insertions(+), 16 deletions(-)

diff --git a/third_party/blink/renderer/bindings/core/v8/async_iterable.h b/third_party/blink/renderer/bindings/core/v8/async_iterable.h
index 115ee5303414c..8a0d085b8174e 100644
--- a/third_party/blink/renderer/bindings/core/v8/async_iterable.h
+++ b/third_party/blink/renderer/bindings/core/v8/async_iterable.h
@@ -200,42 +200,42 @@ class PairAsyncIterable {
   PairAsyncIterable(const PairAsyncIterable&) = delete;
   PairAsyncIterable& operator=(const PairAsyncIterable&) = delete;
 
+  template <typename... ArgsAndExceptionState>
   AsyncIteratorType* keysForBinding(
       ScriptState* script_state,
-      std::convertible_to<InitArgs> auto&&... args,
-      ExceptionState& exception_state) {
+      ArgsAndExceptionState&&... args_and_exception_state) {
     const auto kind = IterationSource::Kind::kKey;
     IterationSource* source = CreateIterationSource(
-        script_state, kind, std::forward<decltype(args)>(args)...,
-        exception_state);
+        script_state, kind,
+        std::forward<ArgsAndExceptionState>(args_and_exception_state)...);
     if (!source) {
       return nullptr;
     }
     return MakeGarbageCollected<AsyncIteratorType>(source);
   }
 
+  template <typename... ArgsAndExceptionState>
   AsyncIteratorType* valuesForBinding(
       ScriptState* script_state,
-      std::convertible_to<InitArgs> auto&&... args,
-      ExceptionState& exception_state) {
+      ArgsAndExceptionState&&... args_and_exception_state) {
     const auto kind = IterationSource::Kind::kValue;
     IterationSource* source = CreateIterationSource(
-        script_state, kind, std::forward<decltype(args)>(args)...,
-        exception_state);
+        script_state, kind,
+        std::forward<ArgsAndExceptionState>(args_and_exception_state)...);
     if (!source) {
       return nullptr;
     }
     return MakeGarbageCollected<AsyncIteratorType>(source);
   }
 
+  template <typename... ArgsAndExceptionState>
   AsyncIteratorType* entriesForBinding(
       ScriptState* script_state,
-      std::convertible_to<InitArgs> auto&&... args,
-      ExceptionState& exception_state) {
+      ArgsAndExceptionState&&... args_and_exception_state) {
     const auto kind = IterationSource::Kind::kKeyValue;
     IterationSource* source = CreateIterationSource(
-        script_state, kind, std::forward<decltype(args)>(args)...,
-        exception_state);
+        script_state, kind,
+        std::forward<ArgsAndExceptionState>(args_and_exception_state)...);
     if (!source) {
       return nullptr;
     }
@@ -274,14 +274,14 @@ class ValueAsyncIterable {
   ValueAsyncIterable(const ValueAsyncIterable&) = delete;
   ValueAsyncIterable& operator=(const ValueAsyncIterable&) = delete;
 
+  template <typename... ArgsAndExceptionState>
   AsyncIteratorType* valuesForBinding(
       ScriptState* script_state,
-      std::convertible_to<InitArgs> auto&&... args,
-      ExceptionState& exception_state) {
+      ArgsAndExceptionState&&... args_and_exception_state) {
     const auto kind = IterationSource::Kind::kValue;
     IterationSource* source = CreateIterationSource(
-        script_state, kind, std::forward<decltype(args)>(args)...,
-        exception_state);
+        script_state, kind,
+        std::forward<ArgsAndExceptionState>(args_and_exception_state)...);
     if (!source) {
       return nullptr;
     }
-- 
2.40.1

