From 772e6f2509f74487f4ba7ed381c9c6e0edc29778 Mon Sep 17 00:00:00 2001
From: Jose Dapena Paz <jdapena@igalia.com>
Date: Mon, 2 Sep 2024 16:35:54 +0200
Subject: libstdc++: fix StringSplit unit test comparisons

libstdc++ does not provide a valid operator== to compare an optional
of an std::pair of string views to an std::pair of const chars.

Use string view literals to fix the comparisons.

Bug: 41455655
Change-Id: I76b9c1a179ef405eabdbe4faaefebbfaeb2a9536
---
 base/strings/string_split_unittest.cc | 68 ++++++++++++++-------------
 1 file changed, 36 insertions(+), 32 deletions(-)

diff --git a/base/strings/string_split_unittest.cc b/base/strings/string_split_unittest.cc
index dee29784fd698..08a9ff60718e0 100644
--- a/base/strings/string_split_unittest.cc
+++ b/base/strings/string_split_unittest.cc
@@ -401,71 +401,75 @@ TEST(SplitStringPieceUsingSubstrTest, SplitWantNonEmpty) {
 }
 
 TEST(StringSplitTest, SplitStringOnce) {
+  using std::literals::string_view_literals::operator""sv;
+
   // None of the separators are in the input, so should always be std::nullopt.
   EXPECT_EQ(std::nullopt, SplitStringOnce("", ""));
   EXPECT_EQ(std::nullopt, SplitStringOnce("a", ""));
   EXPECT_EQ(std::nullopt, SplitStringOnce("ab", ""));
 
-  EXPECT_EQ(std::pair("a", "b:c"), SplitStringOnce("a:b:c", ':'));
-  EXPECT_EQ(std::pair("a", ""), SplitStringOnce("a:", ':'));
-  EXPECT_EQ(std::pair("", "b"), SplitStringOnce(":b", ':'));
+  EXPECT_EQ(std::pair("a"sv, "b:c"sv), SplitStringOnce("a:b:c", ':'));
+  EXPECT_EQ(std::pair("a"sv, ""sv), SplitStringOnce("a:", ':'));
+  EXPECT_EQ(std::pair(""sv, "b"sv), SplitStringOnce(":b", ':'));
 
   // Now the same using the multiple separators overload, but with only one
   // separator specified.
-  EXPECT_EQ(std::pair("a", "b:c"), SplitStringOnce("a:b:c", ":"));
-  EXPECT_EQ(std::pair("a", ""), SplitStringOnce("a:", ":"));
-  EXPECT_EQ(std::pair("", "b"), SplitStringOnce(":b", ":"));
+  EXPECT_EQ(std::pair("a"sv, "b:c"sv), SplitStringOnce("a:b:c", ":"));
+  EXPECT_EQ(std::pair("a"sv, ""sv), SplitStringOnce("a:", ":"));
+  EXPECT_EQ(std::pair(""sv, "b"sv), SplitStringOnce(":b", ":"));
 
   // Multiple separators overload, but only the first one present.
-  EXPECT_EQ(std::pair("a", "b:c"), SplitStringOnce("a:b:c", ":="));
-  EXPECT_EQ(std::pair("a", ""), SplitStringOnce("a:", ":="));
-  EXPECT_EQ(std::pair("", "b"), SplitStringOnce(":b", ":="));
+  EXPECT_EQ(std::pair("a"sv, "b:c"sv), SplitStringOnce("a:b:c", ":="));
+  EXPECT_EQ(std::pair("a"sv, ""sv), SplitStringOnce("a:", ":="));
+  EXPECT_EQ(std::pair(""sv, "b"sv), SplitStringOnce(":b", ":="));
 
   // Multiple separators overload, but only the second one present.
-  EXPECT_EQ(std::pair("a", "b:c"), SplitStringOnce("a:b:c", "=:"));
-  EXPECT_EQ(std::pair("a", ""), SplitStringOnce("a:", "=:"));
-  EXPECT_EQ(std::pair("", "b"), SplitStringOnce(":b", "=:"));
+  EXPECT_EQ(std::pair("a"sv, "b:c"sv), SplitStringOnce("a:b:c", "=:"));
+  EXPECT_EQ(std::pair("a"sv, ""sv), SplitStringOnce("a:", "=:"));
+  EXPECT_EQ(std::pair(""sv, "b"sv), SplitStringOnce(":b", "=:"));
 
   // Multiple separators overload, both present. The separator that comes first
   // in the input string (not separators string) should win.
-  EXPECT_EQ(std::pair("a", "b=c"), SplitStringOnce("a:b=c", ":="));
-  EXPECT_EQ(std::pair("a", "b=c"), SplitStringOnce("a:b=c", "=:"));
-  EXPECT_EQ(std::pair("a", "b:c"), SplitStringOnce("a=b:c", ":="));
-  EXPECT_EQ(std::pair("a", "b:c"), SplitStringOnce("a=b:c", "=:"));
+  EXPECT_EQ(std::pair("a"sv, "b=c"sv), SplitStringOnce("a:b=c", ":="));
+  EXPECT_EQ(std::pair("a"sv, "b=c"sv), SplitStringOnce("a:b=c", "=:"));
+  EXPECT_EQ(std::pair("a"sv, "b:c"sv), SplitStringOnce("a=b:c", ":="));
+  EXPECT_EQ(std::pair("a"sv, "b:c"sv), SplitStringOnce("a=b:c", "=:"));
 }
 
 TEST(StringSplitTest, RSplitStringOnce) {
+  using std::literals::string_view_literals::operator""sv;
+
   // None of the separators are in the input, so should always be std::nullopt.
   EXPECT_EQ(std::nullopt, RSplitStringOnce("", ""));
   EXPECT_EQ(std::nullopt, RSplitStringOnce("a", ""));
   EXPECT_EQ(std::nullopt, RSplitStringOnce("ab", ""));
 
-  EXPECT_EQ(std::pair("a:b", "c"), RSplitStringOnce("a:b:c", ':'));
-  EXPECT_EQ(std::pair("a", ""), RSplitStringOnce("a:", ':'));
-  EXPECT_EQ(std::pair("", "b"), RSplitStringOnce(":b", ':'));
+  EXPECT_EQ(std::pair("a:b"sv, "c"sv), RSplitStringOnce("a:b:c", ':'));
+  EXPECT_EQ(std::pair("a"sv, ""sv), RSplitStringOnce("a:", ':'));
+  EXPECT_EQ(std::pair(""sv, "b"sv), RSplitStringOnce(":b", ':'));
 
   // Now the same using the multiple separators overload, but with only one
   // separator specified.
-  EXPECT_EQ(std::pair("a:b", "c"), RSplitStringOnce("a:b:c", ":"));
-  EXPECT_EQ(std::pair("a", ""), RSplitStringOnce("a:", ":"));
-  EXPECT_EQ(std::pair("", "b"), RSplitStringOnce(":b", ":"));
+  EXPECT_EQ(std::pair("a:b"sv, "c"sv), RSplitStringOnce("a:b:c", ":"));
+  EXPECT_EQ(std::pair("a"sv, ""sv), RSplitStringOnce("a:", ":"));
+  EXPECT_EQ(std::pair(""sv, "b"sv), RSplitStringOnce(":b", ":"));
 
   // Multiple separators overload, but only the first one present.
-  EXPECT_EQ(std::pair("a:b", "c"), RSplitStringOnce("a:b:c", ":="));
-  EXPECT_EQ(std::pair("a", ""), RSplitStringOnce("a:", ":="));
-  EXPECT_EQ(std::pair("", "b"), RSplitStringOnce(":b", ":="));
+  EXPECT_EQ(std::pair("a:b"sv, "c"sv), RSplitStringOnce("a:b:c", ":="));
+  EXPECT_EQ(std::pair("a"sv, ""sv), RSplitStringOnce("a:", ":="));
+  EXPECT_EQ(std::pair(""sv, "b"sv), RSplitStringOnce(":b", ":="));
 
   // Multiple separators overload, but only the second one present.
-  EXPECT_EQ(std::pair("a:b", "c"), RSplitStringOnce("a:b:c", "=:"));
-  EXPECT_EQ(std::pair("a", ""), RSplitStringOnce("a:", "=:"));
-  EXPECT_EQ(std::pair("", "b"), RSplitStringOnce(":b", "=:"));
+  EXPECT_EQ(std::pair("a:b"sv, "c"sv), RSplitStringOnce("a:b:c", "=:"));
+  EXPECT_EQ(std::pair("a"sv, ""sv), RSplitStringOnce("a:", "=:"));
+  EXPECT_EQ(std::pair(""sv, "b"sv), RSplitStringOnce(":b", "=:"));
 
   // Multiple separators overload, both present. The separator that comes first
   // in the input string (not separators string) should win.
-  EXPECT_EQ(std::pair("a:b", "c"), RSplitStringOnce("a:b=c", ":="));
-  EXPECT_EQ(std::pair("a:b", "c"), RSplitStringOnce("a:b=c", "=:"));
-  EXPECT_EQ(std::pair("a=b", "c"), RSplitStringOnce("a=b:c", ":="));
-  EXPECT_EQ(std::pair("a=b", "c"), RSplitStringOnce("a=b:c", "=:"));
+  EXPECT_EQ(std::pair("a:b"sv, "c"sv), RSplitStringOnce("a:b=c", ":="));
+  EXPECT_EQ(std::pair("a:b"sv, "c"sv), RSplitStringOnce("a:b=c", "=:"));
+  EXPECT_EQ(std::pair("a=b"sv, "c"sv), RSplitStringOnce("a=b:c", ":="));
+  EXPECT_EQ(std::pair("a=b"sv, "c"sv), RSplitStringOnce("a=b:c", "=:"));
 }
 
 TEST(StringSplitTest, StringSplitKeepWhitespace) {
-- 
2.43.0

