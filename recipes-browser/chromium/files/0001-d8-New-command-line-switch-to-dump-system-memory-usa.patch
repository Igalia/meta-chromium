From 1453b2fb2afb23a9477850e0c15480a515e79b59 Mon Sep 17 00:00:00 2001
From: =?UTF-8?q?Jos=C3=A9=20Dapena=20Paz?= <jdapena@igalia.com>
Date: Tue, 5 Sep 2023 10:04:15 +0200
Subject: [d8] New command line switch to dump system memory usage
MIME-Version: 1.0
Content-Type: text/plain; charset=UTF-8
Content-Transfer-Encoding: 8bit

Add new command line switch --dump-system-memory-stats for displaying
memory usage statistics on finishing d8 execution. Right now it only
shows the peak memory usage. In POSIX this is calculated using
getrusage. In Windows, it uses GetProcessMemoryInfo peak working set
size.

Bug: v8:14298
Change-Id: I30713034de5b7089545aca25421d8846de72ff0e
Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/4843109
Commit-Queue: Jos√© Dapena Paz <jdapena@igalia.com>
Reviewed-by: Camillo Bruni <cbruni@chromium.org>
Reviewed-by: Victor Gomes <victorgomes@chromium.org>
Cr-Commit-Position: refs/heads/main@{#89982}
---
 src/base/platform/platform-posix.cc | 19 +++++++++++++++++++
 src/base/platform/platform-win32.cc | 13 +++++++++++++
 src/base/platform/platform.h        |  3 +++
 src/d8/d8.cc                        | 11 +++++++++++
 src/d8/d8.h                         |  2 ++
 5 files changed, 48 insertions(+)

diff --git a/src/base/platform/platform-posix.cc b/src/base/platform/platform-posix.cc
index 73cdbdb19df..93c6e91b36d 100644
--- a/src/base/platform/platform-posix.cc
+++ b/src/base/platform/platform-posix.cc
@@ -849,6 +849,25 @@ int OS::GetUserTime(uint32_t* secs, uint32_t* usecs) {
 }
 #endif
 
+int OS::GetPeakMemoryUsageKb() {
+#if defined(V8_OS_FUCHSIA)
+  // Fuchsia does not implement getrusage()
+  return -1;
+#else
+  struct rusage usage;
+  if (getrusage(RUSAGE_SELF, &usage) < 0) return -1;
+
+#if defined(V8_OS_MACOS) || defined(V8_OS_IOS)
+  constexpr int KB = 1024;
+  // MacOS and iOS ru_maxrss count bytes
+  return static_cast<int>(usage.ru_maxrss / KB);
+#else
+  // Most other cases (at least Linux, IOS, return kilobytes)
+  return static_cast<int>(usage.ru_maxrss);
+#endif  // defined(V8_OS_MACOS) || defined(V8_OS_IOS)
+#endif  // defined(V8_OS_FUCHSIA)
+}
+
 double OS::TimeCurrentMillis() {
   return Time::Now().ToJsTime();
 }
diff --git a/src/base/platform/platform-win32.cc b/src/base/platform/platform-win32.cc
index 152fbbf3c26..c65953b0cf6 100644
--- a/src/base/platform/platform-win32.cc
+++ b/src/base/platform/platform-win32.cc
@@ -22,6 +22,7 @@
 #include <dbghelp.h>  // For SymLoadModule64 and al.
 #include <malloc.h>   // For _msize()
 #include <mmsystem.h>  // For timeGetTime().
+#include <psapi.h>     // For GetProcessmMemoryInfo().
 #include <tlhelp32.h>  // For Module32First and al.
 
 #include <limits>
@@ -487,6 +488,18 @@ int OS::GetUserTime(uint32_t* secs,  uint32_t* usecs) {
   return 0;
 }
 
+int OS::GetPeakMemoryUsageKb() {
+  constexpr int KB = 1024;
+
+  PROCESS_MEMORY_COUNTERS mem_counters;
+  int ret;
+
+  ret = GetProcessMemoryInfo(GetCurrentProcess(), &mem_counters,
+                             sizeof(mem_counters));
+  if (ret == 0) return -1;
+
+  return static_cast<int>(mem_counters.PeakWorkingSetSize / KB);
+}
 
 // Returns current time as the number of milliseconds since
 // 00:00:00 UTC, January 1, 1970.
diff --git a/src/base/platform/platform.h b/src/base/platform/platform.h
index 4ced4fdeddc..0ea081b5ff5 100644
--- a/src/base/platform/platform.h
+++ b/src/base/platform/platform.h
@@ -162,6 +162,9 @@ class V8_BASE_EXPORT OS {
   // micro-second resolution.
   static int GetUserTime(uint32_t* secs,  uint32_t* usecs);
 
+  // Obtain the peak memory usage in kilobytes
+  static int GetPeakMemoryUsageKb();
+
   // Returns current time as the number of milliseconds since
   // 00:00:00 UTC, January 1, 1970.
   static double TimeCurrentMillis();
diff --git a/src/d8/d8.cc b/src/d8/d8.cc
index ba1c8e0e40b..ebfcbe696e1 100644
--- a/src/d8/d8.cc
+++ b/src/d8/d8.cc
@@ -3944,6 +3944,14 @@ void Shell::OnExit(v8::Isolate* isolate, bool dispose) {
     }
   }
 
+  if (options.dump_system_memory_stats) {
+    int peak_memory_usage = base::OS::GetPeakMemoryUsageKb();
+    std::cout << "System peak memory usage (kb): " << peak_memory_usage
+              << std::endl;
+    // TODO(jdapena): call rusage platform independent call, and extract peak
+    // memory usage to print it
+  }
+
   // Only delete the counters if we are done executing; after calling `quit`,
   // other isolates might still be running and accessing that memory. This is a
   // memory leak, which is OK in this case.
@@ -4936,6 +4944,9 @@ bool Shell::SetOptions(int argc, char* argv[]) {
       i::v8_flags.slow_histograms = true;
       options.dump_counters_nvp = true;
       argv[i] = nullptr;
+    } else if (strcmp(argv[i], "--dump-system-memory-stats") == 0) {
+      options.dump_system_memory_stats = true;
+      argv[i] = nullptr;
     } else if (strncmp(argv[i], "--icu-data-file=", 16) == 0) {
       options.icu_data_file = argv[i] + 16;
       argv[i] = nullptr;
diff --git a/src/d8/d8.h b/src/d8/d8.h
index 89b4fa3864e..11c3b6b1c04 100644
--- a/src/d8/d8.h
+++ b/src/d8/d8.h
@@ -427,6 +427,8 @@ class ShellOptions {
   DisallowReassignment<bool> no_fail = {"no-fail", false};
   DisallowReassignment<bool> dump_counters = {"dump-counters", false};
   DisallowReassignment<bool> dump_counters_nvp = {"dump-counters-nvp", false};
+  DisallowReassignment<bool> dump_system_memory_stats = {
+      "dump-system-memory-stats", false};
   DisallowReassignment<bool> ignore_unhandled_promises = {
       "ignore-unhandled-promises", false};
   DisallowReassignment<bool> mock_arraybuffer_allocator = {
-- 
2.39.2

