From 3feee7ee3e566b3d6b263bd03b86b3e709bdc278 Mon Sep 17 00:00:00 2001
From: Jose Dapena Paz <jdapena@igalia.com>
Date: Wed, 9 Feb 2022 19:08:45 +0100
Subject: GCC: make TimeDelta::InMilliseconds to be used in constexpr
 DecodeTimestamp::InMilliseconds
MIME-Version: 1.0
Content-Type: text/plain; charset=UTF-8
Content-Transfer-Encoding: 8bit

Fix bug error in GCC because of using a non-constexpr inside a
constexpr.

../../media/base/stream_parser_buffer.h:96:71: error: call to non-‘constexpr’ function ‘int64_t base::TimeDelta::InMilliseconds() const’
   96 |   constexpr int64_t InMilliseconds() const { return ts_.InMilliseconds(); }
      |                                                     ~~~~~~~~~~~~~~~~~~^~

Bug: 819294
Change-Id: I6d0fb6de7d42c857863827a568059f860505944f
---
 base/time/time.cc | 7 -------
 base/time/time.h  | 9 ++++++++-
 2 files changed, 8 insertions(+), 8 deletions(-)

diff --git a/base/time/time.cc b/base/time/time.cc
index 0de273e79657b..5644e0e3848dd 100644
--- a/base/time/time.cc
+++ b/base/time/time.cc
@@ -81,13 +81,6 @@ double TimeDelta::InMillisecondsF() const {
                       : std::numeric_limits<double>::infinity();
 }
 
-int64_t TimeDelta::InMilliseconds() const {
-  if (!is_inf())
-    return delta_ / Time::kMicrosecondsPerMillisecond;
-  return (delta_ < 0) ? std::numeric_limits<int64_t>::min()
-                      : std::numeric_limits<int64_t>::max();
-}
-
 int64_t TimeDelta::InMillisecondsRoundedUp() const {
   if (!is_inf()) {
     const int64_t result = delta_ / Time::kMicrosecondsPerMillisecond;
diff --git a/base/time/time.h b/base/time/time.h
index c027aab504204..62a1ed85f324a 100644
--- a/base/time/time.h
+++ b/base/time/time.h
@@ -217,7 +217,7 @@ class BASE_EXPORT TimeDelta {
   constexpr double InSecondsF() const;
   constexpr int64_t InSeconds() const;
   double InMillisecondsF() const;
-  int64_t InMilliseconds() const;
+  constexpr int64_t InMilliseconds() const;
   int64_t InMillisecondsRoundedUp() const;
   constexpr int64_t InMicroseconds() const { return delta_; }
   double InMicrosecondsF() const;
@@ -889,6 +889,13 @@ constexpr int64_t TimeDelta::InSeconds() const {
   return is_inf() ? delta_ : (delta_ / Time::kMicrosecondsPerSecond);
 }
 
+constexpr int64_t TimeDelta::InMilliseconds() const {
+  if (!is_inf())
+    return delta_ / Time::kMicrosecondsPerMillisecond;
+  return (delta_ < 0) ? std::numeric_limits<int64_t>::min()
+                      : std::numeric_limits<int64_t>::max();
+}
+
 constexpr int64_t TimeDelta::InNanoseconds() const {
   return base::ClampMul(delta_, Time::kNanosecondsPerMicrosecond);
 }
-- 
2.32.0

