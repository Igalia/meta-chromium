From 2dae04ae93663283f67e50fd3ba84a9fd24a65e0 Mon Sep 17 00:00:00 2001
From: Jose Dapena Paz <jdapena@igalia.com>
Date: Thu, 5 Sep 2024 10:34:07 +0200
Subject: GCC: do not add redundant template spec in constructor

GCC does not allow to pass again the template specification in a
template declaration. This was done in SlotSpanMetadata.

Bug: 40565911
Change-Id: I47db61c6217f770e348e031a084cf2689abc6da8
---
 .../partition_allocator/src/partition_alloc/partition_page.h   | 3 +--
 1 file changed, 1 insertion(+), 2 deletions(-)

diff --git a/base/allocator/partition_allocator/src/partition_alloc/partition_page.h b/base/allocator/partition_allocator/src/partition_alloc/partition_page.h
index dfd948b163d2a..aa0c59bafdf69 100644
--- a/base/allocator/partition_allocator/src/partition_alloc/partition_page.h
+++ b/base/allocator/partition_allocator/src/partition_alloc/partition_page.h
@@ -170,8 +170,7 @@ struct SlotSpanMetadata<MetadataKind::kReadOnly>
       : SlotSpanMetadataBase<MetadataKind::kReadOnly>(b) {}
 #endif  // PA_CONFIG(ENABLE_SHADOW_METADATA)
   // pa_tcache_inspect needs the copy constructor.
-  SlotSpanMetadata<MetadataKind::kReadOnly>(
-      const SlotSpanMetadata<MetadataKind::kReadOnly>&) = default;
+  SlotSpanMetadata(const SlotSpanMetadata<MetadataKind::kReadOnly>&) = default;
 
   // Public API
   // Pointer/address manipulation functions. These must be static as the input
-- 
2.43.0

