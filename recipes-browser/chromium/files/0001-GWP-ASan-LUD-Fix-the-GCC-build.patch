From 8c6916892ab714f8227be39628f0c3b38fd8b65f Mon Sep 17 00:00:00 2001
From: Sergei Glazunov <glazunov@google.com>
Date: Tue, 7 Nov 2023 00:57:30 +0000
Subject: [GWP-ASan][LUD] Fix the GCC build

Simplify the `SharedState` class template initialization by splitting
it into two classes.

Bug: 1418006
Change-Id: If75682dcea7b5b28a1287693b94f12fc175f8a3e
Reviewed-on: https://chromium-review.googlesource.com/c/chromium/src/+/5003640
Reviewed-by: Matthew Denton <mpdenton@chromium.org>
Auto-Submit: Sergei Glazunov <glazunov@google.com>
Commit-Queue: Matthew Denton <mpdenton@chromium.org>
Cr-Commit-Position: refs/heads/main@{#1220644}
---
 .../poison_metadata_recorder.cc               |  2 +-
 .../poison_metadata_recorder.h                |  7 ++--
 .../lightweight_detector/shared_state.h       | 39 ++++++++++++-------
 3 files changed, 30 insertions(+), 18 deletions(-)

diff --git a/components/gwp_asan/client/lightweight_detector/poison_metadata_recorder.cc b/components/gwp_asan/client/lightweight_detector/poison_metadata_recorder.cc
index 59fed77c8cf01..cdce31f985719 100644
--- a/components/gwp_asan/client/lightweight_detector/poison_metadata_recorder.cc
+++ b/components/gwp_asan/client/lightweight_detector/poison_metadata_recorder.cc
@@ -112,6 +112,6 @@ bool PoisonMetadataRecorder::HasAllocationForTesting(uintptr_t address) {
 }
 
 template class EXPORT_TEMPLATE_DEFINE(GWP_ASAN_EXPORT)
-    SharedState<PoisonMetadataRecorder>;
+    SharedStateHolder<PoisonMetadataRecorder>;
 
 }  // namespace gwp_asan::internal
diff --git a/components/gwp_asan/client/lightweight_detector/poison_metadata_recorder.h b/components/gwp_asan/client/lightweight_detector/poison_metadata_recorder.h
index 7da51783fd6bb..172ed01c2ae1d 100644
--- a/components/gwp_asan/client/lightweight_detector/poison_metadata_recorder.h
+++ b/components/gwp_asan/client/lightweight_detector/poison_metadata_recorder.h
@@ -16,10 +16,6 @@
 
 namespace gwp_asan::internal {
 
-class PoisonMetadataRecorder;
-extern template class EXPORT_TEMPLATE_DECLARE(GWP_ASAN_EXPORT)
-    SharedState<PoisonMetadataRecorder>;
-
 // Responsible for both poisoning memory allocations and tracking metadata
 // associated with these poisoned allocations.
 class GWP_ASAN_EXPORT PoisonMetadataRecorder
@@ -63,6 +59,9 @@ class GWP_ASAN_EXPORT PoisonMetadataRecorder
   FRIEND_TEST_ALL_PREFIXES(LightweightDetectorAnalyzerTest, InternalError);
 };
 
+extern template class EXPORT_TEMPLATE_DECLARE(GWP_ASAN_EXPORT)
+    SharedStateHolder<PoisonMetadataRecorder>;
+
 }  // namespace gwp_asan::internal
 
 #endif  // COMPONENTS_GWP_ASAN_CLIENT_LIGHTWEIGHT_DETECTOR_POISON_METADATA_RECORDER_H_
diff --git a/components/gwp_asan/client/lightweight_detector/shared_state.h b/components/gwp_asan/client/lightweight_detector/shared_state.h
index aeca6b730947f..0c98a4e657471 100644
--- a/components/gwp_asan/client/lightweight_detector/shared_state.h
+++ b/components/gwp_asan/client/lightweight_detector/shared_state.h
@@ -5,6 +5,7 @@
 #ifndef COMPONENTS_GWP_ASAN_CLIENT_LIGHTWEIGHT_DETECTOR_SHARED_STATE_H_
 #define COMPONENTS_GWP_ASAN_CLIENT_LIGHTWEIGHT_DETECTOR_SHARED_STATE_H_
 
+#include <stdint.h>
 #include <utility>
 
 #include "base/check.h"
@@ -12,6 +13,24 @@
 
 namespace gwp_asan::internal {
 
+template <typename T>
+class SharedState;
+
+template <typename T>
+class SharedStateHolder {
+ private:
+  static bool initialized_;
+  static uint8_t buffer_[];
+
+  friend class SharedState<T>;
+};
+
+template <typename T>
+bool SharedStateHolder<T>::initialized_ = false;
+
+template <typename T>
+alignas(T) uint8_t SharedStateHolder<T>::buffer_[sizeof(T)];
+
 // Special purpose shared state type. Uses a static buffer to reduce the number
 // of pointer dereferences, requires explicit initialization, and doesn't
 // provide thread safety.
@@ -20,33 +39,27 @@ class SharedState {
  public:
   template <typename... Args>
   static void Init(Args&&... args) {
-    instance_initialized_ = true;
+    DCHECK(!Holder::initialized_);
+    Holder::initialized_ = true;
     new (Get()) T(std::forward<Args>(args)...);
   }
 
   ALWAYS_INLINE static T* Get() {
-    DCHECK(instance_initialized_);
-    return reinterpret_cast<T*>(instance_buffer_);
+    DCHECK(Holder::initialized_);
+    return reinterpret_cast<T*>(Holder::buffer_);
   }
 
   static void ResetForTesting() {
-    if (instance_initialized_) {
+    if (Holder::initialized_) {
       Get()->~T();
-      instance_initialized_ = false;
+      Holder::initialized_ = false;
     }
   }
 
  private:
-  static bool instance_initialized_;
-  static uint8_t instance_buffer_[];
+  using Holder = SharedStateHolder<T>;
 };
 
-template <typename T>
-bool SharedState<T>::instance_initialized_ = false;
-
-template <typename T>
-alignas(T) uint8_t SharedState<T>::instance_buffer_[sizeof(T)];
-
 }  // namespace gwp_asan::internal
 
 #endif  // COMPONENTS_GWP_ASAN_CLIENT_LIGHTWEIGHT_DETECTOR_SHARED_STATE_H_
-- 
2.39.2

