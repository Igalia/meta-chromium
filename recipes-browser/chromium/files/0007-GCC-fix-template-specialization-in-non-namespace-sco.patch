From d74c5b354c652697a87fcdb28161e61f5eb48dd7 Mon Sep 17 00:00:00 2001
From: Jose Dapena Paz <jdapena@igalia.com>
Date: Mon, 29 Jan 2024 13:38:38 +0100
Subject: GCC: fix template specialization in non-namespace scope in
 url_loader_factory_builder.h

GCC does not allow template specializations out in any non-namespace
scope.

Bug: 819294
Change-Id: Ia5e6e61801dfcd0c6b5269204fcd513d5064ffc3
---
 .../public/cpp/url_loader_factory_builder.cc  | 14 +++++++++
 .../public/cpp/url_loader_factory_builder.h   | 30 ++++++++-----------
 2 files changed, 26 insertions(+), 18 deletions(-)

diff --git a/services/network/public/cpp/url_loader_factory_builder.cc b/services/network/public/cpp/url_loader_factory_builder.cc
index 297bdbcf3eafe..25a29893b8596 100644
--- a/services/network/public/cpp/url_loader_factory_builder.cc
+++ b/services/network/public/cpp/url_loader_factory_builder.cc
@@ -69,4 +69,18 @@ void URLLoaderFactoryBuilder::ConnectTerminal(
   terminal_factory->Clone(std::move(pending_receiver));
 }
 
+template <>
+scoped_refptr<SharedURLLoaderFactory> URLLoaderFactoryBuilder::WrapAs(
+    mojo::PendingRemote<mojom::URLLoaderFactory> in) {
+  return base::MakeRefCounted<WrapperSharedURLLoaderFactory>(std::move(in));
+}
+
+template <>
+mojo::PendingRemote<mojom::URLLoaderFactory> URLLoaderFactoryBuilder::WrapAs(
+    scoped_refptr<SharedURLLoaderFactory> in) {
+  mojo::PendingRemote<mojom::URLLoaderFactory> remote;
+  in->Clone(remote.InitWithNewPipeAndPassReceiver());
+  return remote;
+}
+
 }  // namespace network
diff --git a/services/network/public/cpp/url_loader_factory_builder.h b/services/network/public/cpp/url_loader_factory_builder.h
index 1675b7b57aaac..4d0aff33abe9e 100644
--- a/services/network/public/cpp/url_loader_factory_builder.h
+++ b/services/network/public/cpp/url_loader_factory_builder.h
@@ -120,24 +120,6 @@ class COMPONENT_EXPORT(NETWORK_CPP) URLLoaderFactoryBuilder final {
     return std::move(in);
   }
 
-  // `PendingRemote` -> `SharedURLLoaderFactory`:
-  // Wraps by `WrapperSharedURLLoaderFactory`.
-  template <>
-  scoped_refptr<SharedURLLoaderFactory> WrapAs(
-      mojo::PendingRemote<mojom::URLLoaderFactory> in) {
-    return base::MakeRefCounted<WrapperSharedURLLoaderFactory>(std::move(in));
-  }
-
-  // `SharedURLLoaderFactory` -> `PendingRemote`:
-  // Creates a new pipe and cloning.
-  template <>
-  mojo::PendingRemote<mojom::URLLoaderFactory> WrapAs(
-      scoped_refptr<SharedURLLoaderFactory> in) {
-    mojo::PendingRemote<mojom::URLLoaderFactory> remote;
-    in->Clone(remote.InitWithNewPipeAndPassReceiver());
-    return remote;
-  }
-
   // `ContextType` is an object with a method:
   // void ContextType::CreateURLLoaderFactory(
   //   mojo::PendingReceiver<mojom::URLLoaderFactory> receiver,
@@ -187,6 +169,18 @@ class COMPONENT_EXPORT(NETWORK_CPP) URLLoaderFactoryBuilder final {
   mojo::PendingReceiver<mojom::URLLoaderFactory> tail_;
 };
 
+// `PendingRemote` -> `SharedURLLoaderFactory`:
+// Wraps by `WrapperSharedURLLoaderFactory`.
+template <>
+scoped_refptr<SharedURLLoaderFactory> URLLoaderFactoryBuilder::WrapAs(
+    mojo::PendingRemote<mojom::URLLoaderFactory> in);
+
+// `SharedURLLoaderFactory` -> `PendingRemote`:
+// Creates a new pipe and cloning.
+template <>
+mojo::PendingRemote<mojom::URLLoaderFactory> URLLoaderFactoryBuilder::WrapAs(
+    scoped_refptr<SharedURLLoaderFactory> in);
+
 }  // namespace network
 
 #endif  // SERVICES_NETWORK_PUBLIC_CPP_URL_LOADER_FACTORY_BUILDER_H_
-- 
2.40.1

