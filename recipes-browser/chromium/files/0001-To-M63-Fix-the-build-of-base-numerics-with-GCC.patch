From 8190cfb2c0e2e0e1b93d730d87fcfb7ba89f8391 Mon Sep 17 00:00:00 2001
From: Tomas Popela <tomas.popela@gmail.com>
Date: Thu, 26 Oct 2017 19:24:04 +0000
Subject: To M63: Fix the build of base/numerics with GCC

Initialize the uninitialized variables where the build is failing.

BUG=776705
TBR=jschuh@chromium.org

Change-Id: I5782e18086a752b3676f8738930bf0553f3f97ad
Reviewed-on: https://chromium-review.googlesource.com/730709
Reviewed-by: Thomas Anderson <thomasanderson@chromium.org>
Reviewed-by: Justin Schuh <jschuh@chromium.org>
Commit-Queue: Thomas Anderson <thomasanderson@chromium.org>
Cr-Original-Commit-Position: refs/heads/master@{#510753}(cherry picked from commit ec48e4ae39eea7377870732a1bb9cf62e84af42e)
Reviewed-on: https://chromium-review.googlesource.com/740221
Reviewed-by: Matthew Wolenetz <wolenetz@chromium.org>
Cr-Commit-Position: refs/branch-heads/3239@{#247}
Cr-Branched-From: adb61db19020ed8ecee5e91b1a0ea4c924ae2988-refs/heads/master@{#508578}
---
 base/numerics/checked_math_impl.h |  6 +++---
 base/numerics/clamped_math_impl.h | 10 +++++-----
 2 files changed, 8 insertions(+), 8 deletions(-)

diff --git a/base/numerics/checked_math_impl.h b/base/numerics/checked_math_impl.h
index 2926b37b5ecd..e083389ebf38 100644
--- a/base/numerics/checked_math_impl.h
+++ b/base/numerics/checked_math_impl.h
@@ -67,7 +67,7 @@ struct CheckedAddOp<T,
       return false;
     }
 
-    Promotion presult;
+    Promotion presult = {};
     bool is_valid = true;
     if (IsIntegerArithmeticSafe<Promotion, T, U>::value) {
       presult = static_cast<Promotion>(x) + static_cast<Promotion>(y);
@@ -127,7 +127,7 @@ struct CheckedSubOp<T,
       return false;
     }
 
-    Promotion presult;
+    Promotion presult = {};
     bool is_valid = true;
     if (IsIntegerArithmeticSafe<Promotion, T, U>::value) {
       presult = static_cast<Promotion>(x) - static_cast<Promotion>(y);
@@ -183,7 +183,7 @@ struct CheckedMulOp<T,
       return false;
     }
 
-    Promotion presult;
+    Promotion presult = {};
     bool is_valid = true;
     if (CheckedMulFastOp<Promotion, Promotion>::is_supported) {
       // The fast op may be available with the promoted type.
diff --git a/base/numerics/clamped_math_impl.h b/base/numerics/clamped_math_impl.h
index 7b5e4346f216..303a7e945a11 100644
--- a/base/numerics/clamped_math_impl.h
+++ b/base/numerics/clamped_math_impl.h
@@ -87,7 +87,7 @@ struct ClampedAddOp<T,
                   "The saturation result cannot be determined from the "
                   "provided types.");
     const V saturated = CommonMaxOrMin<V>(IsValueNegative(y));
-    V result;
+    V result = {};
     return BASE_NUMERICS_LIKELY((CheckedAddOp<T, U>::Do(x, y, &result)))
                ? result
                : saturated;
@@ -114,7 +114,7 @@ struct ClampedSubOp<T,
                   "The saturation result cannot be determined from the "
                   "provided types.");
     const V saturated = CommonMaxOrMin<V>(!IsValueNegative(y));
-    V result;
+    V result = {};
     return BASE_NUMERICS_LIKELY((CheckedSubOp<T, U>::Do(x, y, &result)))
                ? result
                : saturated;
@@ -136,7 +136,7 @@ struct ClampedMulOp<T,
     if (ClampedMulFastOp<T, U>::is_supported)
       return ClampedMulFastOp<T, U>::template Do<V>(x, y);
 
-    V result;
+    V result = {};
     const V saturated =
         CommonMaxOrMin<V>(IsValueNegative(x) ^ IsValueNegative(y));
     return BASE_NUMERICS_LIKELY((CheckedMulOp<T, U>::Do(x, y, &result)))
@@ -156,7 +156,7 @@ struct ClampedDivOp<T,
   using result_type = typename MaxExponentPromotion<T, U>::type;
   template <typename V = result_type>
   static constexpr V Do(T x, U y) {
-    V result;
+    V result = {};
     if (BASE_NUMERICS_LIKELY((CheckedDivOp<T, U>::Do(x, y, &result))))
       return result;
     // Saturation goes to max, min, or NaN (if x is zero).
@@ -176,7 +176,7 @@ struct ClampedModOp<T,
   using result_type = typename MaxExponentPromotion<T, U>::type;
   template <typename V = result_type>
   static constexpr V Do(T x, U y) {
-    V result;
+    V result = {};
     return BASE_NUMERICS_LIKELY((CheckedModOp<T, U>::Do(x, y, &result)))
                ? result
                : x;
-- 
2.11.0

